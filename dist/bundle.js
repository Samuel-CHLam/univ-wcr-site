/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,n,r,o={26981:(e,t,n)=>{"use strict";n(11983);var r,o=(r=n(11543))&&r.__esModule?r:{default:r};o.default._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),o.default._babelPolyfill=!0},11983:(e,t,n)=>{"use strict";n(15033),n(88033),n(72863),n(56141),n(74316),n(117),n(86863),n(30290),n(44007),n(91235),n(58930),n(31794),n(1523),n(35666)},15033:(e,t,n)=>{n(98997),n(57944),n(65388),n(10266),n(57557),n(63386),n(30081),n(54943),n(40192),n(24371),n(17026),n(16736),n(7260),n(4649),n(88325),n(52798),n(86911),n(84394),n(78769),n(729),n(99383),n(19315),n(15072),n(10348),n(71028),n(2610),n(64007),n(87616),n(86762),n(43316),n(93019),n(40293),n(60640),n(96589),n(93210),n(12372),n(30511),n(6781),n(74434),n(14783),n(95521),n(94093),n(86378),n(52380),n(2803),n(63725),n(7977),n(14192),n(2940),n(35731),n(79382),n(38877),n(22539),n(39820),n(28417),n(74333),n(82858),n(22058),n(95472),n(57001),n(57492),n(50447),n(65624),n(51263),n(65193),n(28241),n(96723),n(9394),n(66938),n(11961),n(69659),n(23354),n(99620),n(638),n(32338),n(20641),n(21575),n(75611),n(91033),n(50160),n(65271),n(18221),n(92523),n(65441),n(88375),n(9106),n(9139),n(33352),n(53289),n(35943),n(59483),n(88292),n(86174),n(86975),n(71412),n(30360),n(18394),n(83118),n(78772),n(71308),n(87080),n(58615),n(35244),n(39544),n(45475),n(33770),n(5201),n(61385),n(12813),n(82509),n(98253),n(57391),n(33307),n(63315),n(12920),n(95443),n(69815),n(43771),n(76935),n(17846),n(56403),n(51200),n(30951),n(10029),n(69310),n(66722),n(18372),n(14604),n(84781),n(38416),n(24395),n(49649),n(32475),n(12924),n(16337),n(83286),n(47225),n(68766),e.exports=n(14411)},72863:(e,t,n)=>{n(98125),e.exports=n(14411).Array.flatMap},88033:(e,t,n)=>{n(49348),e.exports=n(14411).Array.includes},58930:(e,t,n)=>{n(1768),e.exports=n(14411).Object.entries},44007:(e,t,n)=>{n(59223),e.exports=n(14411).Object.getOwnPropertyDescriptors},91235:(e,t,n)=>{n(67442),e.exports=n(14411).Object.values},31794:(e,t,n)=>{"use strict";n(12813),n(14936),e.exports=n(14411).Promise.finally},74316:(e,t,n)=>{n(20239),e.exports=n(14411).String.padEnd},56141:(e,t,n)=>{n(28755),e.exports=n(14411).String.padStart},86863:(e,t,n)=>{n(66948),e.exports=n(14411).String.trimRight},117:(e,t,n)=>{n(53412),e.exports=n(14411).String.trimLeft},30290:(e,t,n)=>{n(78284),e.exports=n(38833).f("asyncIterator")},11543:(e,t,n)=>{n(94296),e.exports=n(1275).global},87411:e=>{e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},23206:(e,t,n)=>{var r=n(700);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},1275:e=>{var t=e.exports={version:"2.6.12"};"number"==typeof __e&&(__e=t)},30999:(e,t,n)=>{var r=n(87411);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},50697:(e,t,n)=>{e.exports=!n(13834)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},42394:(e,t,n)=>{var r=n(700),o=n(71075).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},44553:(e,t,n)=>{var r=n(71075),o=n(1275),i=n(30999),a=n(2550),l=n(94324),u="prototype",c=function(e,t,n){var s,f,d,p=e&c.F,h=e&c.G,m=e&c.S,g=e&c.P,v=e&c.B,y=e&c.W,A=h?o:o[t]||(o[t]={}),b=A[u],w=h?r:m?r[t]:(r[t]||{})[u];for(s in h&&(n=t),n)(f=!p&&w&&void 0!==w[s])&&l(A,s)||(d=f?w[s]:n[s],A[s]=h&&"function"!=typeof w[s]?n[s]:v&&f?i(d,r):y&&w[s]==d?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t[u]=e[u],t}(d):g&&"function"==typeof d?i(Function.call,d):d,g&&((A.virtual||(A.virtual={}))[s]=d,e&c.R&&b&&!b[s]&&a(b,s,d)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},13834:e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},71075:e=>{var t=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=t)},94324:e=>{var t={}.hasOwnProperty;e.exports=function(e,n){return t.call(e,n)}},2550:(e,t,n)=>{var r=n(249),o=n(43652);e.exports=n(50697)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},43393:(e,t,n)=>{e.exports=!n(50697)&&!n(13834)((function(){return 7!=Object.defineProperty(n(42394)("div"),"a",{get:function(){return 7}}).a}))},700:e=>{e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},249:(e,t,n)=>{var r=n(23206),o=n(43393),i=n(3377),a=Object.defineProperty;t.f=n(50697)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},43652:e=>{e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},3377:(e,t,n)=>{var r=n(700);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},94296:(e,t,n)=>{var r=n(44553);r(r.G,{global:n(71075)})},23079:e=>{e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},23373:(e,t,n)=>{var r=n(89426);e.exports=function(e,t){if("number"!=typeof e&&"Number"!=r(e))throw TypeError(t);return+e}},12802:(e,t,n)=>{var r=n(9739)("unscopables"),o=Array.prototype;null==o[r]&&n(98442)(o,r,{}),e.exports=function(e){o[r][e]=!0}},9959:(e,t,n)=>{"use strict";var r=n(7384)(!0);e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},30599:e=>{e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+": incorrect invocation!");return e}},59719:(e,t,n)=>{var r=n(17481);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},4893:(e,t,n)=>{"use strict";var r=n(54200),o=n(15044),i=n(61838);e.exports=[].copyWithin||function(e,t){var n=r(this),a=i(n.length),l=o(e,a),u=o(t,a),c=arguments.length>2?arguments[2]:void 0,s=Math.min((void 0===c?a:o(c,a))-u,a-l),f=1;for(u<l&&l<u+s&&(f=-1,u+=s-1,l+=s-1);s-- >0;)u in n?n[l]=n[u]:delete n[l],l+=f,u+=f;return n}},70852:(e,t,n)=>{"use strict";var r=n(54200),o=n(15044),i=n(61838);e.exports=function(e){for(var t=r(this),n=i(t.length),a=arguments.length,l=o(a>1?arguments[1]:void 0,n),u=a>2?arguments[2]:void 0,c=void 0===u?n:o(u,n);c>l;)t[l++]=e;return t}},61545:(e,t,n)=>{var r=n(8500),o=n(61838),i=n(15044);e.exports=function(e){return function(t,n,a){var l,u=r(t),c=o(u.length),s=i(a,c);if(e&&n!=n){for(;c>s;)if((l=u[s++])!=l)return!0}else for(;c>s;s++)if((e||s in u)&&u[s]===n)return e||s||0;return!e&&-1}}},66934:(e,t,n)=>{var r=n(82794),o=n(60975),i=n(54200),a=n(61838),l=n(44087);e.exports=function(e,t){var n=1==e,u=2==e,c=3==e,s=4==e,f=6==e,d=5==e||f,p=t||l;return function(t,l,h){for(var m,g,v=i(t),y=o(v),A=r(l,h,3),b=a(y.length),w=0,x=n?p(t,b):u?p(t,0):void 0;b>w;w++)if((d||w in y)&&(g=A(m=y[w],w,v),e))if(n)x[w]=g;else if(g)switch(e){case 3:return!0;case 5:return m;case 6:return w;case 2:x.push(m)}else if(s)return!1;return f?-1:c||s?s:x}}},9857:(e,t,n)=>{var r=n(23079),o=n(54200),i=n(60975),a=n(61838);e.exports=function(e,t,n,l,u){r(t);var c=o(e),s=i(c),f=a(c.length),d=u?f-1:0,p=u?-1:1;if(n<2)for(;;){if(d in s){l=s[d],d+=p;break}if(d+=p,u?d<0:f<=d)throw TypeError("Reduce of empty array with no initial value")}for(;u?d>=0:f>d;d+=p)d in s&&(l=t(l,s[d],d,c));return l}},54849:(e,t,n)=>{var r=n(17481),o=n(40689),i=n(9739)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),r(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},44087:(e,t,n)=>{var r=n(54849);e.exports=function(e,t){return new(r(e))(t)}},46966:(e,t,n)=>{"use strict";var r=n(23079),o=n(17481),i=n(16137),a=[].slice,l={};e.exports=Function.bind||function(e){var t=r(this),n=a.call(arguments,1),u=function(){var r=n.concat(a.call(arguments));return this instanceof u?function(e,t,n){if(!(t in l)){for(var r=[],o=0;o<t;o++)r[o]="a["+o+"]";l[t]=Function("F,a","return new F("+r.join(",")+")")}return l[t](e,n)}(t,r.length,r):i(t,r,e)};return o(t.prototype)&&(u.prototype=t.prototype),u}},12845:(e,t,n)=>{var r=n(89426),o=n(9739)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(a=r(t))&&"function"==typeof t.callee?"Arguments":a}},89426:e=>{var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},95144:(e,t,n)=>{"use strict";var r=n(83530).f,o=n(62545),i=n(24092),a=n(82794),l=n(30599),u=n(62971),c=n(19121),s=n(78611),f=n(75993),d=n(51916),p=n(82153).fastKey,h=n(91603),m=d?"_s":"size",g=function(e,t){var n,r=p(t);if("F"!==r)return e._i[r];for(n=e._f;n;n=n.n)if(n.k==t)return n};e.exports={getConstructor:function(e,t,n,c){var s=e((function(e,r){l(e,s,t,"_i"),e._t=t,e._i=o(null),e._f=void 0,e._l=void 0,e[m]=0,null!=r&&u(r,n,e[c],e)}));return i(s.prototype,{clear:function(){for(var e=h(this,t),n=e._i,r=e._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];e._f=e._l=void 0,e[m]=0},delete:function(e){var n=h(this,t),r=g(n,e);if(r){var o=r.n,i=r.p;delete n._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==r&&(n._f=o),n._l==r&&(n._l=i),n[m]--}return!!r},forEach:function(e){h(this,t);for(var n,r=a(e,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(e){return!!g(h(this,t),e)}}),d&&r(s.prototype,"size",{get:function(){return h(this,t)[m]}}),s},def:function(e,t,n){var r,o,i=g(e,t);return i?i.v=n:(e._l=i={i:o=p(t,!0),k:t,v:n,p:r=e._l,n:void 0,r:!1},e._f||(e._f=i),r&&(r.n=i),e[m]++,"F"!==o&&(e._i[o]=i)),e},getEntry:g,setStrong:function(e,t,n){c(e,t,(function(e,n){this._t=h(e,t),this._k=n,this._l=void 0}),(function(){for(var e=this,t=e._k,n=e._l;n&&n.r;)n=n.p;return e._t&&(e._l=n=n?n.n:e._t._f)?s(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(e._t=void 0,s(1))}),n?"entries":"values",!n,!0),f(t)}}},33503:(e,t,n)=>{"use strict";var r=n(24092),o=n(82153).getWeak,i=n(59719),a=n(17481),l=n(30599),u=n(62971),c=n(66934),s=n(41063),f=n(91603),d=c(5),p=c(6),h=0,m=function(e){return e._l||(e._l=new g)},g=function(){this.a=[]},v=function(e,t){return d(e.a,(function(e){return e[0]===t}))};g.prototype={get:function(e){var t=v(this,e);if(t)return t[1]},has:function(e){return!!v(this,e)},set:function(e,t){var n=v(this,e);n?n[1]=t:this.a.push([e,t])},delete:function(e){var t=p(this.a,(function(t){return t[0]===e}));return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,n,i){var c=e((function(e,r){l(e,c,t,"_i"),e._t=t,e._i=h++,e._l=void 0,null!=r&&u(r,n,e[i],e)}));return r(c.prototype,{delete:function(e){if(!a(e))return!1;var n=o(e);return!0===n?m(f(this,t)).delete(e):n&&s(n,this._i)&&delete n[this._i]},has:function(e){if(!a(e))return!1;var n=o(e);return!0===n?m(f(this,t)).has(e):n&&s(n,this._i)}}),c},def:function(e,t,n){var r=o(i(t),!0);return!0===r?m(e).set(t,n):r[e._i]=n,e},ufstore:m}},58091:(e,t,n)=>{"use strict";var r=n(56341),o=n(35366),i=n(1564),a=n(24092),l=n(82153),u=n(62971),c=n(30599),s=n(17481),f=n(71240),d=n(61461),p=n(21309),h=n(94805);e.exports=function(e,t,n,m,g,v){var y=r[e],A=y,b=g?"set":"add",w=A&&A.prototype,x={},E=function(e){var t=w[e];i(w,e,"delete"==e||"has"==e?function(e){return!(v&&!s(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return v&&!s(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,n){return t.call(this,0===e?0:e,n),this})};if("function"==typeof A&&(v||w.forEach&&!f((function(){(new A).entries().next()})))){var C=new A,k=C[b](v?{}:-0,1)!=C,S=f((function(){C.has(1)})),B=d((function(e){new A(e)})),I=!v&&f((function(){for(var e=new A,t=5;t--;)e[b](t,t);return!e.has(-0)}));B||((A=t((function(t,n){c(t,A,e);var r=h(new y,t,A);return null!=n&&u(n,g,r[b],r),r}))).prototype=w,w.constructor=A),(S||I)&&(E("delete"),E("has"),g&&E("get")),(I||k)&&E(b),v&&w.clear&&delete w.clear}else A=m.getConstructor(t,e,g,b),a(A.prototype,n),l.NEED=!0;return p(A,e),x[e]=A,o(o.G+o.W+o.F*(A!=y),x),v||m.setStrong(A,e,g),A}},14411:e=>{var t=e.exports={version:"2.6.12"};"number"==typeof __e&&(__e=t)},51676:(e,t,n)=>{"use strict";var r=n(83530),o=n(21761);e.exports=function(e,t,n){t in e?r.f(e,t,o(0,n)):e[t]=n}},82794:(e,t,n)=>{var r=n(23079);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},41792:(e,t,n)=>{"use strict";var r=n(71240),o=Date.prototype.getTime,i=Date.prototype.toISOString,a=function(e){return e>9?e:"0"+e};e.exports=r((function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-50000000000001))}))||!r((function(){i.call(new Date(NaN))}))?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var e=this,t=e.getUTCFullYear(),n=e.getUTCMilliseconds(),r=t<0?"-":t>9999?"+":"";return r+("00000"+Math.abs(t)).slice(r?-6:-4)+"-"+a(e.getUTCMonth()+1)+"-"+a(e.getUTCDate())+"T"+a(e.getUTCHours())+":"+a(e.getUTCMinutes())+":"+a(e.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:i},27687:(e,t,n)=>{"use strict";var r=n(59719),o=n(9241),i="number";e.exports=function(e){if("string"!==e&&e!==i&&"default"!==e)throw TypeError("Incorrect hint");return o(r(this),e!=i)}},13589:e=>{e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},51916:(e,t,n)=>{e.exports=!n(71240)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},83383:(e,t,n)=>{var r=n(17481),o=n(56341).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},97590:e=>{e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},4535:(e,t,n)=>{var r=n(15825),o=n(32520),i=n(41144);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var a,l=n(e),u=i.f,c=0;l.length>c;)u.call(e,a=l[c++])&&t.push(a);return t}},35366:(e,t,n)=>{var r=n(56341),o=n(14411),i=n(98442),a=n(1564),l=n(82794),u="prototype",c=function(e,t,n){var s,f,d,p,h=e&c.F,m=e&c.G,g=e&c.S,v=e&c.P,y=e&c.B,A=m?r:g?r[t]||(r[t]={}):(r[t]||{})[u],b=m?o:o[t]||(o[t]={}),w=b[u]||(b[u]={});for(s in m&&(n=t),n)d=((f=!h&&A&&void 0!==A[s])?A:n)[s],p=y&&f?l(d,r):v&&"function"==typeof d?l(Function.call,d):d,A&&a(A,s,d,e&c.U),b[s]!=d&&i(b,s,p),v&&w[s]!=d&&(w[s]=d)};r.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},46881:(e,t,n)=>{var r=n(9739)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,!"/./"[e](t)}catch(e){}}return!0}},71240:e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},25307:(e,t,n)=>{"use strict";n(58615);var r=n(1564),o=n(98442),i=n(71240),a=n(13589),l=n(9739),u=n(18868),c=l("species"),s=!i((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),f=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var d=l(e),p=!i((function(){var t={};return t[d]=function(){return 7},7!=""[e](t)})),h=p?!i((function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[c]=function(){return n}),n[d](""),!t})):void 0;if(!p||!h||"replace"===e&&!s||"split"===e&&!f){var m=/./[d],g=n(a,d,""[e],(function(e,t,n,r,o){return t.exec===u?p&&!o?{done:!0,value:m.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}})),v=g[0],y=g[1];r(String.prototype,e,v),o(RegExp.prototype,d,2==t?function(e,t){return y.call(e,this,t)}:function(e){return y.call(e,this)})}}},6439:(e,t,n)=>{"use strict";var r=n(59719);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},3885:(e,t,n)=>{"use strict";var r=n(40689),o=n(17481),i=n(61838),a=n(82794),l=n(9739)("isConcatSpreadable");e.exports=function e(t,n,u,c,s,f,d,p){for(var h,m,g=s,v=0,y=!!d&&a(d,p,3);v<c;){if(v in u){if(h=y?y(u[v],v,n):u[v],m=!1,o(h)&&(m=void 0!==(m=h[l])?!!m:r(h)),m&&f>0)g=e(t,n,h,i(h.length),g,f-1)-1;else{if(g>=9007199254740991)throw TypeError();t[g]=h}g++}v++}return g}},62971:(e,t,n)=>{var r=n(82794),o=n(55539),i=n(63894),a=n(59719),l=n(61838),u=n(18444),c={},s={},f=e.exports=function(e,t,n,f,d){var p,h,m,g,v=d?function(){return e}:u(e),y=r(n,f,t?2:1),A=0;if("function"!=typeof v)throw TypeError(e+" is not iterable!");if(i(v)){for(p=l(e.length);p>A;A++)if((g=t?y(a(h=e[A])[0],h[1]):y(e[A]))===c||g===s)return g}else for(m=v.call(e);!(h=m.next()).done;)if((g=o(m,y,h.value,t))===c||g===s)return g};f.BREAK=c,f.RETURN=s},65979:(e,t,n)=>{e.exports=n(97355)("native-function-to-string",Function.toString)},56341:e=>{var t=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=t)},41063:e=>{var t={}.hasOwnProperty;e.exports=function(e,n){return t.call(e,n)}},98442:(e,t,n)=>{var r=n(83530),o=n(21761);e.exports=n(51916)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},26137:(e,t,n)=>{var r=n(56341).document;e.exports=r&&r.documentElement},44352:(e,t,n)=>{e.exports=!n(51916)&&!n(71240)((function(){return 7!=Object.defineProperty(n(83383)("div"),"a",{get:function(){return 7}}).a}))},94805:(e,t,n)=>{var r=n(17481),o=n(87135).set;e.exports=function(e,t,n){var i,a=t.constructor;return a!==n&&"function"==typeof a&&(i=a.prototype)!==n.prototype&&r(i)&&o&&o(e,i),e}},16137:e=>{e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},60975:(e,t,n)=>{var r=n(89426);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},63894:(e,t,n)=>{var r=n(4919),o=n(9739)("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)}},40689:(e,t,n)=>{var r=n(89426);e.exports=Array.isArray||function(e){return"Array"==r(e)}},22289:(e,t,n)=>{var r=n(17481),o=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&o(e)===e}},17481:e=>{e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},89543:(e,t,n)=>{var r=n(17481),o=n(89426),i=n(9739)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},55539:(e,t,n)=>{var r=n(59719);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},47938:(e,t,n)=>{"use strict";var r=n(62545),o=n(21761),i=n(21309),a={};n(98442)(a,n(9739)("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=r(a,{next:o(1,n)}),i(e,t+" Iterator")}},19121:(e,t,n)=>{"use strict";var r=n(35113),o=n(35366),i=n(1564),a=n(98442),l=n(4919),u=n(47938),c=n(21309),s=n(44408),f=n(9739)("iterator"),d=!([].keys&&"next"in[].keys()),p="keys",h="values",m=function(){return this};e.exports=function(e,t,n,g,v,y,A){u(n,t,g);var b,w,x,E=function(e){if(!d&&e in B)return B[e];switch(e){case p:case h:return function(){return new n(this,e)}}return function(){return new n(this,e)}},C=t+" Iterator",k=v==h,S=!1,B=e.prototype,I=B[f]||B["@@iterator"]||v&&B[v],O=I||E(v),P=v?k?E("entries"):O:void 0,F="Array"==t&&B.entries||I;if(F&&(x=s(F.call(new e)))!==Object.prototype&&x.next&&(c(x,C,!0),r||"function"==typeof x[f]||a(x,f,m)),k&&I&&I.name!==h&&(S=!0,O=function(){return I.call(this)}),r&&!A||!d&&!S&&B[f]||a(B,f,O),l[t]=O,l[C]=m,v)if(b={values:k?O:E(h),keys:y?O:E(p),entries:P},A)for(w in b)w in B||i(B,w,b[w]);else o(o.P+o.F*(d||S),t,b);return b}},61461:(e,t,n)=>{var r=n(9739)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:n=!0}},i[r]=function(){return a},e(i)}catch(e){}return n}},78611:e=>{e.exports=function(e,t){return{value:t,done:!!e}}},4919:e=>{e.exports={}},35113:e=>{e.exports=!1},77117:e=>{var t=Math.expm1;e.exports=!t||t(10)>22025.465794806718||t(10)<22025.465794806718||-2e-17!=t(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:Math.exp(e)-1}:t},59396:(e,t,n)=>{var r=n(84247),o=Math.pow,i=o(2,-52),a=o(2,-23),l=o(2,127)*(2-a),u=o(2,-126);e.exports=Math.fround||function(e){var t,n,o=Math.abs(e),c=r(e);return o<u?c*(o/u/a+1/i-1/i)*u*a:(n=(t=(1+a/i)*o)-(t-o))>l||n!=n?c*(1/0):c*n}},19007:e=>{e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:Math.log(1+e)}},84247:e=>{e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},82153:(e,t,n)=>{var r=n(90430)("meta"),o=n(17481),i=n(41063),a=n(83530).f,l=0,u=Object.isExtensible||function(){return!0},c=!n(71240)((function(){return u(Object.preventExtensions({}))})),s=function(e){a(e,r,{value:{i:"O"+ ++l,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!u(e))return"F";if(!t)return"E";s(e)}return e[r].i},getWeak:function(e,t){if(!i(e,r)){if(!u(e))return!0;if(!t)return!1;s(e)}return e[r].w},onFreeze:function(e){return c&&f.NEED&&u(e)&&!i(e,r)&&s(e),e}}},37:(e,t,n)=>{var r=n(56341),o=n(7122).set,i=r.MutationObserver||r.WebKitMutationObserver,a=r.process,l=r.Promise,u="process"==n(89426)(a);e.exports=function(){var e,t,n,c=function(){var r,o;for(u&&(r=a.domain)&&r.exit();e;){o=e.fn,e=e.next;try{o()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(u)n=function(){a.nextTick(c)};else if(!i||r.navigator&&r.navigator.standalone)if(l&&l.resolve){var s=l.resolve(void 0);n=function(){s.then(c)}}else n=function(){o.call(r,c)};else{var f=!0,d=document.createTextNode("");new i(c).observe(d,{characterData:!0}),n=function(){d.data=f=!f}}return function(r){var o={fn:r,next:void 0};t&&(t.next=o),e||(e=o,n()),t=o}}},83285:(e,t,n)=>{"use strict";var r=n(23079);function o(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=r(t),this.reject=r(n)}e.exports.f=function(e){return new o(e)}},49821:(e,t,n)=>{"use strict";var r=n(51916),o=n(15825),i=n(32520),a=n(41144),l=n(54200),u=n(60975),c=Object.assign;e.exports=!c||n(71240)((function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach((function(e){t[e]=e})),7!=c({},e)[n]||Object.keys(c({},t)).join("")!=r}))?function(e,t){for(var n=l(e),c=arguments.length,s=1,f=i.f,d=a.f;c>s;)for(var p,h=u(arguments[s++]),m=f?o(h).concat(f(h)):o(h),g=m.length,v=0;g>v;)p=m[v++],r&&!d.call(h,p)||(n[p]=h[p]);return n}:c},62545:(e,t,n)=>{var r=n(59719),o=n(30413),i=n(97590),a=n(53548)("IE_PROTO"),l=function(){},u="prototype",c=function(){var e,t=n(83383)("iframe"),r=i.length;for(t.style.display="none",n(26137).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),c=e.F;r--;)delete c[u][i[r]];return c()};e.exports=Object.create||function(e,t){var n;return null!==e?(l[u]=r(e),n=new l,l[u]=null,n[a]=e):n=c(),void 0===t?n:o(n,t)}},83530:(e,t,n)=>{var r=n(59719),o=n(44352),i=n(9241),a=Object.defineProperty;t.f=n(51916)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},30413:(e,t,n)=>{var r=n(83530),o=n(59719),i=n(15825);e.exports=n(51916)?Object.defineProperties:function(e,t){o(e);for(var n,a=i(t),l=a.length,u=0;l>u;)r.f(e,n=a[u++],t[n]);return e}},57762:(e,t,n)=>{var r=n(41144),o=n(21761),i=n(8500),a=n(9241),l=n(41063),u=n(44352),c=Object.getOwnPropertyDescriptor;t.f=n(51916)?c:function(e,t){if(e=i(e),t=a(t,!0),u)try{return c(e,t)}catch(e){}if(l(e,t))return o(!r.f.call(e,t),e[t])}},85009:(e,t,n)=>{var r=n(8500),o=n(14230).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return a.slice()}}(e):o(r(e))}},14230:(e,t,n)=>{var r=n(92851),o=n(97590).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},32520:(e,t)=>{t.f=Object.getOwnPropertySymbols},44408:(e,t,n)=>{var r=n(41063),o=n(54200),i=n(53548)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},92851:(e,t,n)=>{var r=n(41063),o=n(8500),i=n(61545)(!1),a=n(53548)("IE_PROTO");e.exports=function(e,t){var n,l=o(e),u=0,c=[];for(n in l)n!=a&&r(l,n)&&c.push(n);for(;t.length>u;)r(l,n=t[u++])&&(~i(c,n)||c.push(n));return c}},15825:(e,t,n)=>{var r=n(92851),o=n(97590);e.exports=Object.keys||function(e){return r(e,o)}},41144:(e,t)=>{t.f={}.propertyIsEnumerable},81025:(e,t,n)=>{var r=n(35366),o=n(14411),i=n(71240);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*i((function(){n(1)})),"Object",a)}},15346:(e,t,n)=>{var r=n(51916),o=n(15825),i=n(8500),a=n(41144).f;e.exports=function(e){return function(t){for(var n,l=i(t),u=o(l),c=u.length,s=0,f=[];c>s;)n=u[s++],r&&!a.call(l,n)||f.push(e?[n,l[n]]:l[n]);return f}}},17285:(e,t,n)=>{var r=n(14230),o=n(32520),i=n(59719),a=n(56341).Reflect;e.exports=a&&a.ownKeys||function(e){var t=r.f(i(e)),n=o.f;return n?t.concat(n(e)):t}},13765:(e,t,n)=>{var r=n(56341).parseFloat,o=n(97370).trim;e.exports=1/r(n(18275)+"-0")!=-1/0?function(e){var t=o(String(e),3),n=r(t);return 0===n&&"-"==t.charAt(0)?-0:n}:r},80500:(e,t,n)=>{var r=n(56341).parseInt,o=n(97370).trim,i=n(18275),a=/^[-+]?0[xX]/;e.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(e,t){var n=o(String(e),3);return r(n,t>>>0||(a.test(n)?16:10))}:r},98332:e=>{e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},38614:(e,t,n)=>{var r=n(59719),o=n(17481),i=n(83285);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},21761:e=>{e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},24092:(e,t,n)=>{var r=n(1564);e.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},1564:(e,t,n)=>{var r=n(56341),o=n(98442),i=n(41063),a=n(90430)("src"),l=n(65979),u="toString",c=(""+l).split(u);n(14411).inspectSource=function(e){return l.call(e)},(e.exports=function(e,t,n,l){var u="function"==typeof n;u&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(u&&(i(n,a)||o(n,a,e[t]?""+e[t]:c.join(String(t)))),e===r?e[t]=n:l?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,u,(function(){return"function"==typeof this&&this[a]||l.call(this)}))},29073:(e,t,n)=>{"use strict";var r=n(12845),o=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(e,t)}},18868:(e,t,n)=>{"use strict";var r,o,i=n(6439),a=RegExp.prototype.exec,l=String.prototype.replace,u=a,c="lastIndex",s=(r=/a/,o=/b*/g,a.call(r,"a"),a.call(o,"a"),0!==r[c]||0!==o[c]),f=void 0!==/()??/.exec("")[1];(s||f)&&(u=function(e){var t,n,r,o,u=this;return f&&(n=new RegExp("^"+u.source+"$(?!\\s)",i.call(u))),s&&(t=u[c]),r=a.call(u,e),s&&r&&(u[c]=u.global?r.index+r[0].length:t),f&&r&&r.length>1&&l.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),e.exports=u},61541:e=>{e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},87135:(e,t,n)=>{var r=n(17481),o=n(59719),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(82794)(Function.call,n(57762).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},75993:(e,t,n)=>{"use strict";var r=n(56341),o=n(83530),i=n(51916),a=n(9739)("species");e.exports=function(e){var t=r[e];i&&t&&!t[a]&&o.f(t,a,{configurable:!0,get:function(){return this}})}},21309:(e,t,n)=>{var r=n(83530).f,o=n(41063),i=n(9739)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},53548:(e,t,n)=>{var r=n(97355)("keys"),o=n(90430);e.exports=function(e){return r[e]||(r[e]=o(e))}},97355:(e,t,n)=>{var r=n(14411),o=n(56341),i="__core-js_shared__",a=o[i]||(o[i]={});(e.exports=function(e,t){return a[e]||(a[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(35113)?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},59789:(e,t,n)=>{var r=n(59719),o=n(23079),i=n(9739)("species");e.exports=function(e,t){var n,a=r(e).constructor;return void 0===a||null==(n=r(a)[i])?t:o(n)}},85139:(e,t,n)=>{"use strict";var r=n(71240);e.exports=function(e,t){return!!e&&r((function(){t?e.call(null,(function(){}),1):e.call(null)}))}},7384:(e,t,n)=>{var r=n(51549),o=n(13589);e.exports=function(e){return function(t,n){var i,a,l=String(o(t)),u=r(n),c=l.length;return u<0||u>=c?e?"":void 0:(i=l.charCodeAt(u))<55296||i>56319||u+1===c||(a=l.charCodeAt(u+1))<56320||a>57343?e?l.charAt(u):i:e?l.slice(u,u+2):a-56320+(i-55296<<10)+65536}}},83256:(e,t,n)=>{var r=n(89543),o=n(13589);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(e))}},79048:(e,t,n)=>{var r=n(35366),o=n(71240),i=n(13589),a=/"/g,l=function(e,t,n,r){var o=String(i(e)),l="<"+t;return""!==n&&(l+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),l+">"+o+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(l),r(r.P+r.F*o((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3})),"String",n)}},9823:(e,t,n)=>{var r=n(61838),o=n(40005),i=n(13589);e.exports=function(e,t,n,a){var l=String(i(e)),u=l.length,c=void 0===n?" ":String(n),s=r(t);if(s<=u||""==c)return l;var f=s-u,d=o.call(c,Math.ceil(f/c.length));return d.length>f&&(d=d.slice(0,f)),a?d+l:l+d}},40005:(e,t,n)=>{"use strict";var r=n(51549),o=n(13589);e.exports=function(e){var t=String(o(this)),n="",i=r(e);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(t+=t))1&i&&(n+=t);return n}},97370:(e,t,n)=>{var r=n(35366),o=n(13589),i=n(71240),a=n(18275),l="["+a+"]",u=RegExp("^"+l+l+"*"),c=RegExp(l+l+"*$"),s=function(e,t,n){var o={},l=i((function(){return!!a[e]()||"​"!="​"[e]()})),u=o[e]=l?t(f):a[e];n&&(o[n]=u),r(r.P+r.F*l,"String",o)},f=s.trim=function(e,t){return e=String(o(e)),1&t&&(e=e.replace(u,"")),2&t&&(e=e.replace(c,"")),e};e.exports=s},18275:e=>{e.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},7122:(e,t,n)=>{var r,o,i,a=n(82794),l=n(16137),u=n(26137),c=n(83383),s=n(56341),f=s.process,d=s.setImmediate,p=s.clearImmediate,h=s.MessageChannel,m=s.Dispatch,g=0,v={},y="onreadystatechange",A=function(){var e=+this;if(v.hasOwnProperty(e)){var t=v[e];delete v[e],t()}},b=function(e){A.call(e.data)};d&&p||(d=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return v[++g]=function(){l("function"==typeof e?e:Function(e),t)},r(g),g},p=function(e){delete v[e]},"process"==n(89426)(f)?r=function(e){f.nextTick(a(A,e,1))}:m&&m.now?r=function(e){m.now(a(A,e,1))}:h?(i=(o=new h).port2,o.port1.onmessage=b,r=a(i.postMessage,i,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(r=function(e){s.postMessage(e+"","*")},s.addEventListener("message",b,!1)):r=y in c("script")?function(e){u.appendChild(c("script"))[y]=function(){u.removeChild(this),A.call(e)}}:function(e){setTimeout(a(A,e,1),0)}),e.exports={set:d,clear:p}},15044:(e,t,n)=>{var r=n(51549),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},99707:(e,t,n)=>{var r=n(51549),o=n(61838);e.exports=function(e){if(void 0===e)return 0;var t=r(e),n=o(t);if(t!==n)throw RangeError("Wrong length!");return n}},51549:e=>{var t=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:t)(e)}},8500:(e,t,n)=>{var r=n(60975),o=n(13589);e.exports=function(e){return r(o(e))}},61838:(e,t,n)=>{var r=n(51549),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},54200:(e,t,n)=>{var r=n(13589);e.exports=function(e){return Object(r(e))}},9241:(e,t,n)=>{var r=n(17481);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},58754:(e,t,n)=>{"use strict";if(n(51916)){var r=n(35113),o=n(56341),i=n(71240),a=n(35366),l=n(67728),u=n(29895),c=n(82794),s=n(30599),f=n(21761),d=n(98442),p=n(24092),h=n(51549),m=n(61838),g=n(99707),v=n(15044),y=n(9241),A=n(41063),b=n(12845),w=n(17481),x=n(54200),E=n(63894),C=n(62545),k=n(44408),S=n(14230).f,B=n(18444),I=n(90430),O=n(9739),P=n(66934),F=n(61545),_=n(59789),T=n(71308),L=n(4919),N=n(61461),j=n(75993),R=n(70852),M=n(4893),z=n(83530),D=n(57762),U=z.f,W=D.f,q=o.RangeError,V=o.TypeError,H=o.Uint8Array,Q="ArrayBuffer",Y="Shared"+Q,G="BYTES_PER_ELEMENT",$="prototype",X=Array[$],K=u.ArrayBuffer,J=u.DataView,Z=P(0),ee=P(2),te=P(3),ne=P(4),re=P(5),oe=P(6),ie=F(!0),ae=F(!1),le=T.values,ue=T.keys,ce=T.entries,se=X.lastIndexOf,fe=X.reduce,de=X.reduceRight,pe=X.join,he=X.sort,me=X.slice,ge=X.toString,ve=X.toLocaleString,ye=O("iterator"),Ae=O("toStringTag"),be=I("typed_constructor"),we=I("def_constructor"),xe=l.CONSTR,Ee=l.TYPED,Ce=l.VIEW,ke="Wrong length!",Se=P(1,(function(e,t){return Fe(_(e,e[we]),t)})),Be=i((function(){return 1===new H(new Uint16Array([1]).buffer)[0]})),Ie=!!H&&!!H[$].set&&i((function(){new H(1).set({})})),Oe=function(e,t){var n=h(e);if(n<0||n%t)throw q("Wrong offset!");return n},Pe=function(e){if(w(e)&&Ee in e)return e;throw V(e+" is not a typed array!")},Fe=function(e,t){if(!w(e)||!(be in e))throw V("It is not a typed array constructor!");return new e(t)},_e=function(e,t){return Te(_(e,e[we]),t)},Te=function(e,t){for(var n=0,r=t.length,o=Fe(e,r);r>n;)o[n]=t[n++];return o},Le=function(e,t,n){U(e,t,{get:function(){return this._d[n]}})},Ne=function(e){var t,n,r,o,i,a,l=x(e),u=arguments.length,s=u>1?arguments[1]:void 0,f=void 0!==s,d=B(l);if(null!=d&&!E(d)){for(a=d.call(l),r=[],t=0;!(i=a.next()).done;t++)r.push(i.value);l=r}for(f&&u>2&&(s=c(s,arguments[2],2)),t=0,n=m(l.length),o=Fe(this,n);n>t;t++)o[t]=f?s(l[t],t):l[t];return o},je=function(){for(var e=0,t=arguments.length,n=Fe(this,t);t>e;)n[e]=arguments[e++];return n},Re=!!H&&i((function(){ve.call(new H(1))})),Me=function(){return ve.apply(Re?me.call(Pe(this)):Pe(this),arguments)},ze={copyWithin:function(e,t){return M.call(Pe(this),e,t,arguments.length>2?arguments[2]:void 0)},every:function(e){return ne(Pe(this),e,arguments.length>1?arguments[1]:void 0)},fill:function(e){return R.apply(Pe(this),arguments)},filter:function(e){return _e(this,ee(Pe(this),e,arguments.length>1?arguments[1]:void 0))},find:function(e){return re(Pe(this),e,arguments.length>1?arguments[1]:void 0)},findIndex:function(e){return oe(Pe(this),e,arguments.length>1?arguments[1]:void 0)},forEach:function(e){Z(Pe(this),e,arguments.length>1?arguments[1]:void 0)},indexOf:function(e){return ae(Pe(this),e,arguments.length>1?arguments[1]:void 0)},includes:function(e){return ie(Pe(this),e,arguments.length>1?arguments[1]:void 0)},join:function(e){return pe.apply(Pe(this),arguments)},lastIndexOf:function(e){return se.apply(Pe(this),arguments)},map:function(e){return Se(Pe(this),e,arguments.length>1?arguments[1]:void 0)},reduce:function(e){return fe.apply(Pe(this),arguments)},reduceRight:function(e){return de.apply(Pe(this),arguments)},reverse:function(){for(var e,t=this,n=Pe(t).length,r=Math.floor(n/2),o=0;o<r;)e=t[o],t[o++]=t[--n],t[n]=e;return t},some:function(e){return te(Pe(this),e,arguments.length>1?arguments[1]:void 0)},sort:function(e){return he.call(Pe(this),e)},subarray:function(e,t){var n=Pe(this),r=n.length,o=v(e,r);return new(_(n,n[we]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,m((void 0===t?r:v(t,r))-o))}},De=function(e,t){return _e(this,me.call(Pe(this),e,t))},Ue=function(e){Pe(this);var t=Oe(arguments[1],1),n=this.length,r=x(e),o=m(r.length),i=0;if(o+t>n)throw q(ke);for(;i<o;)this[t+i]=r[i++]},We={entries:function(){return ce.call(Pe(this))},keys:function(){return ue.call(Pe(this))},values:function(){return le.call(Pe(this))}},qe=function(e,t){return w(e)&&e[Ee]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},Ve=function(e,t){return qe(e,t=y(t,!0))?f(2,e[t]):W(e,t)},He=function(e,t,n){return!(qe(e,t=y(t,!0))&&w(n)&&A(n,"value"))||A(n,"get")||A(n,"set")||n.configurable||A(n,"writable")&&!n.writable||A(n,"enumerable")&&!n.enumerable?U(e,t,n):(e[t]=n.value,e)};xe||(D.f=Ve,z.f=He),a(a.S+a.F*!xe,"Object",{getOwnPropertyDescriptor:Ve,defineProperty:He}),i((function(){ge.call({})}))&&(ge=ve=function(){return pe.call(this)});var Qe=p({},ze);p(Qe,We),d(Qe,ye,We.values),p(Qe,{slice:De,set:Ue,constructor:function(){},toString:ge,toLocaleString:Me}),Le(Qe,"buffer","b"),Le(Qe,"byteOffset","o"),Le(Qe,"byteLength","l"),Le(Qe,"length","e"),U(Qe,Ae,{get:function(){return this[Ee]}}),e.exports=function(e,t,n,u){var c=e+((u=!!u)?"Clamped":"")+"Array",f="get"+e,p="set"+e,h=o[c],v=h||{},y=h&&k(h),A=!h||!l.ABV,x={},E=h&&h[$],B=function(e,n){U(e,n,{get:function(){return function(e,n){var r=e._d;return r.v[f](n*t+r.o,Be)}(this,n)},set:function(e){return function(e,n,r){var o=e._d;u&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[p](n*t+o.o,r,Be)}(this,n,e)},enumerable:!0})};A?(h=n((function(e,n,r,o){s(e,h,c,"_d");var i,a,l,u,f=0,p=0;if(w(n)){if(!(n instanceof K||(u=b(n))==Q||u==Y))return Ee in n?Te(h,n):Ne.call(h,n);i=n,p=Oe(r,t);var v=n.byteLength;if(void 0===o){if(v%t)throw q(ke);if((a=v-p)<0)throw q(ke)}else if((a=m(o)*t)+p>v)throw q(ke);l=a/t}else l=g(n),i=new K(a=l*t);for(d(e,"_d",{b:i,o:p,l:a,e:l,v:new J(i)});f<l;)B(e,f++)})),E=h[$]=C(Qe),d(E,"constructor",h)):i((function(){h(1)}))&&i((function(){new h(-1)}))&&N((function(e){new h,new h(null),new h(1.5),new h(e)}),!0)||(h=n((function(e,n,r,o){var i;return s(e,h,c),w(n)?n instanceof K||(i=b(n))==Q||i==Y?void 0!==o?new v(n,Oe(r,t),o):void 0!==r?new v(n,Oe(r,t)):new v(n):Ee in n?Te(h,n):Ne.call(h,n):new v(g(n))})),Z(y!==Function.prototype?S(v).concat(S(y)):S(v),(function(e){e in h||d(h,e,v[e])})),h[$]=E,r||(E.constructor=h));var I=E[ye],O=!!I&&("values"==I.name||null==I.name),P=We.values;d(h,be,!0),d(E,Ee,c),d(E,Ce,!0),d(E,we,h),(u?new h(1)[Ae]==c:Ae in E)||U(E,Ae,{get:function(){return c}}),x[c]=h,a(a.G+a.W+a.F*(h!=v),x),a(a.S,c,{BYTES_PER_ELEMENT:t}),a(a.S+a.F*i((function(){v.of.call(h,1)})),c,{from:Ne,of:je}),G in E||d(E,G,t),a(a.P,c,ze),j(c),a(a.P+a.F*Ie,c,{set:Ue}),a(a.P+a.F*!O,c,We),r||E.toString==ge||(E.toString=ge),a(a.P+a.F*i((function(){new h(1).slice()})),c,{slice:De}),a(a.P+a.F*(i((function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()}))||!i((function(){E.toLocaleString.call([1,2])}))),c,{toLocaleString:Me}),L[c]=O?I:P,r||O||d(E,ye,P)}}else e.exports=function(){}},29895:(e,t,n)=>{"use strict";var r=n(56341),o=n(51916),i=n(35113),a=n(67728),l=n(98442),u=n(24092),c=n(71240),s=n(30599),f=n(51549),d=n(61838),p=n(99707),h=n(14230).f,m=n(83530).f,g=n(70852),v=n(21309),y="ArrayBuffer",A="DataView",b="prototype",w="Wrong index!",x=r[y],E=r[A],C=r.Math,k=r.RangeError,S=r.Infinity,B=x,I=C.abs,O=C.pow,P=C.floor,F=C.log,_=C.LN2,T="buffer",L="byteLength",N="byteOffset",j=o?"_b":T,R=o?"_l":L,M=o?"_o":N;function z(e,t,n){var r,o,i,a=new Array(n),l=8*n-t-1,u=(1<<l)-1,c=u>>1,s=23===t?O(2,-24)-O(2,-77):0,f=0,d=e<0||0===e&&1/e<0?1:0;for((e=I(e))!=e||e===S?(o=e!=e?1:0,r=u):(r=P(F(e)/_),e*(i=O(2,-r))<1&&(r--,i*=2),(e+=r+c>=1?s/i:s*O(2,1-c))*i>=2&&(r++,i/=2),r+c>=u?(o=0,r=u):r+c>=1?(o=(e*i-1)*O(2,t),r+=c):(o=e*O(2,c-1)*O(2,t),r=0));t>=8;a[f++]=255&o,o/=256,t-=8);for(r=r<<t|o,l+=t;l>0;a[f++]=255&r,r/=256,l-=8);return a[--f]|=128*d,a}function D(e,t,n){var r,o=8*n-t-1,i=(1<<o)-1,a=i>>1,l=o-7,u=n-1,c=e[u--],s=127&c;for(c>>=7;l>0;s=256*s+e[u],u--,l-=8);for(r=s&(1<<-l)-1,s>>=-l,l+=t;l>0;r=256*r+e[u],u--,l-=8);if(0===s)s=1-a;else{if(s===i)return r?NaN:c?-S:S;r+=O(2,t),s-=a}return(c?-1:1)*r*O(2,s-t)}function U(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function W(e){return[255&e]}function q(e){return[255&e,e>>8&255]}function V(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function H(e){return z(e,52,8)}function Q(e){return z(e,23,4)}function Y(e,t,n){m(e[b],t,{get:function(){return this[n]}})}function G(e,t,n,r){var o=p(+n);if(o+t>e[R])throw k(w);var i=e[j]._b,a=o+e[M],l=i.slice(a,a+t);return r?l:l.reverse()}function $(e,t,n,r,o,i){var a=p(+n);if(a+t>e[R])throw k(w);for(var l=e[j]._b,u=a+e[M],c=r(+o),s=0;s<t;s++)l[u+s]=c[i?s:t-s-1]}if(a.ABV){if(!c((function(){x(1)}))||!c((function(){new x(-1)}))||c((function(){return new x,new x(1.5),new x(NaN),x.name!=y}))){for(var X,K=(x=function(e){return s(this,x),new B(p(e))})[b]=B[b],J=h(B),Z=0;J.length>Z;)(X=J[Z++])in x||l(x,X,B[X]);i||(K.constructor=x)}var ee=new E(new x(2)),te=E[b].setInt8;ee.setInt8(0,2147483648),ee.setInt8(1,2147483649),!ee.getInt8(0)&&ee.getInt8(1)||u(E[b],{setInt8:function(e,t){te.call(this,e,t<<24>>24)},setUint8:function(e,t){te.call(this,e,t<<24>>24)}},!0)}else x=function(e){s(this,x,y);var t=p(e);this._b=g.call(new Array(t),0),this[R]=t},E=function(e,t,n){s(this,E,A),s(e,x,A);var r=e[R],o=f(t);if(o<0||o>r)throw k("Wrong offset!");if(o+(n=void 0===n?r-o:d(n))>r)throw k("Wrong length!");this[j]=e,this[M]=o,this[R]=n},o&&(Y(x,L,"_l"),Y(E,T,"_b"),Y(E,L,"_l"),Y(E,N,"_o")),u(E[b],{getInt8:function(e){return G(this,1,e)[0]<<24>>24},getUint8:function(e){return G(this,1,e)[0]},getInt16:function(e){var t=G(this,2,e,arguments[1]);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=G(this,2,e,arguments[1]);return t[1]<<8|t[0]},getInt32:function(e){return U(G(this,4,e,arguments[1]))},getUint32:function(e){return U(G(this,4,e,arguments[1]))>>>0},getFloat32:function(e){return D(G(this,4,e,arguments[1]),23,4)},getFloat64:function(e){return D(G(this,8,e,arguments[1]),52,8)},setInt8:function(e,t){$(this,1,e,W,t)},setUint8:function(e,t){$(this,1,e,W,t)},setInt16:function(e,t){$(this,2,e,q,t,arguments[2])},setUint16:function(e,t){$(this,2,e,q,t,arguments[2])},setInt32:function(e,t){$(this,4,e,V,t,arguments[2])},setUint32:function(e,t){$(this,4,e,V,t,arguments[2])},setFloat32:function(e,t){$(this,4,e,Q,t,arguments[2])},setFloat64:function(e,t){$(this,8,e,H,t,arguments[2])}});v(x,y),v(E,A),l(E[b],a.VIEW,!0),t[y]=x,t[A]=E},67728:(e,t,n)=>{for(var r,o=n(56341),i=n(98442),a=n(90430),l=a("typed_array"),u=a("view"),c=!(!o.ArrayBuffer||!o.DataView),s=c,f=0,d="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=o[d[f++]])?(i(r.prototype,l,!0),i(r.prototype,u,!0)):s=!1;e.exports={ABV:c,CONSTR:s,TYPED:l,VIEW:u}},90430:e=>{var t=0,n=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++t+n).toString(36))}},83843:(e,t,n)=>{var r=n(56341).navigator;e.exports=r&&r.userAgent||""},91603:(e,t,n)=>{var r=n(17481);e.exports=function(e,t){if(!r(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},48155:(e,t,n)=>{var r=n(56341),o=n(14411),i=n(35113),a=n(38833),l=n(83530).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||l(t,e,{value:a.f(e)})}},38833:(e,t,n)=>{t.f=n(9739)},9739:(e,t,n)=>{var r=n(97355)("wks"),o=n(90430),i=n(56341).Symbol,a="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=r},18444:(e,t,n)=>{var r=n(12845),o=n(9739)("iterator"),i=n(4919);e.exports=n(14411).getIteratorMethod=function(e){if(null!=e)return e[o]||e["@@iterator"]||i[r(e)]}},71412:(e,t,n)=>{var r=n(35366);r(r.P,"Array",{copyWithin:n(4893)}),n(12802)("copyWithin")},35943:(e,t,n)=>{"use strict";var r=n(35366),o=n(66934)(4);r(r.P+r.F*!n(85139)([].every,!0),"Array",{every:function(e){return o(this,e,arguments[1])}})},30360:(e,t,n)=>{var r=n(35366);r(r.P,"Array",{fill:n(70852)}),n(12802)("fill")},33352:(e,t,n)=>{"use strict";var r=n(35366),o=n(66934)(2);r(r.P+r.F*!n(85139)([].filter,!0),"Array",{filter:function(e){return o(this,e,arguments[1])}})},83118:(e,t,n)=>{"use strict";var r=n(35366),o=n(66934)(6),i="findIndex",a=!0;i in[]&&Array(1)[i]((function(){a=!1})),r(r.P+r.F*a,"Array",{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(12802)(i)},18394:(e,t,n)=>{"use strict";var r=n(35366),o=n(66934)(5),i="find",a=!0;i in[]&&Array(1)[i]((function(){a=!1})),r(r.P+r.F*a,"Array",{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(12802)(i)},9106:(e,t,n)=>{"use strict";var r=n(35366),o=n(66934)(0),i=n(85139)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(e){return o(this,e,arguments[1])}})},65271:(e,t,n)=>{"use strict";var r=n(82794),o=n(35366),i=n(54200),a=n(55539),l=n(63894),u=n(61838),c=n(51676),s=n(18444);o(o.S+o.F*!n(61461)((function(e){Array.from(e)})),"Array",{from:function(e){var t,n,o,f,d=i(e),p="function"==typeof this?this:Array,h=arguments.length,m=h>1?arguments[1]:void 0,g=void 0!==m,v=0,y=s(d);if(g&&(m=r(m,h>2?arguments[2]:void 0,2)),null==y||p==Array&&l(y))for(n=new p(t=u(d.length));t>v;v++)c(n,v,g?m(d[v],v):d[v]);else for(f=y.call(d),n=new p;!(o=f.next()).done;v++)c(n,v,g?a(f,m,[o.value,v],!0):o.value);return n.length=v,n}})},86174:(e,t,n)=>{"use strict";var r=n(35366),o=n(61545)(!1),i=[].indexOf,a=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(85139)(i)),"Array",{indexOf:function(e){return a?i.apply(this,arguments)||0:o(this,e,arguments[1])}})},50160:(e,t,n)=>{var r=n(35366);r(r.S,"Array",{isArray:n(40689)})},71308:(e,t,n)=>{"use strict";var r=n(12802),o=n(78611),i=n(4919),a=n(8500);e.exports=n(19121)(Array,"Array",(function(e,t){this._t=a(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},92523:(e,t,n)=>{"use strict";var r=n(35366),o=n(8500),i=[].join;r(r.P+r.F*(n(60975)!=Object||!n(85139)(i)),"Array",{join:function(e){return i.call(o(this),void 0===e?",":e)}})},86975:(e,t,n)=>{"use strict";var r=n(35366),o=n(8500),i=n(51549),a=n(61838),l=[].lastIndexOf,u=!!l&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(u||!n(85139)(l)),"Array",{lastIndexOf:function(e){if(u)return l.apply(this,arguments)||0;var t=o(this),n=a(t.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in t&&t[r]===e)return r||0;return-1}})},9139:(e,t,n)=>{"use strict";var r=n(35366),o=n(66934)(1);r(r.P+r.F*!n(85139)([].map,!0),"Array",{map:function(e){return o(this,e,arguments[1])}})},18221:(e,t,n)=>{"use strict";var r=n(35366),o=n(51676);r(r.S+r.F*n(71240)((function(){function e(){}return!(Array.of.call(e)instanceof e)})),"Array",{of:function(){for(var e=0,t=arguments.length,n=new("function"==typeof this?this:Array)(t);t>e;)o(n,e,arguments[e++]);return n.length=t,n}})},88292:(e,t,n)=>{"use strict";var r=n(35366),o=n(9857);r(r.P+r.F*!n(85139)([].reduceRight,!0),"Array",{reduceRight:function(e){return o(this,e,arguments.length,arguments[1],!0)}})},59483:(e,t,n)=>{"use strict";var r=n(35366),o=n(9857);r(r.P+r.F*!n(85139)([].reduce,!0),"Array",{reduce:function(e){return o(this,e,arguments.length,arguments[1],!1)}})},65441:(e,t,n)=>{"use strict";var r=n(35366),o=n(26137),i=n(89426),a=n(15044),l=n(61838),u=[].slice;r(r.P+r.F*n(71240)((function(){o&&u.call(o)})),"Array",{slice:function(e,t){var n=l(this.length),r=i(this);if(t=void 0===t?n:t,"Array"==r)return u.call(this,e,t);for(var o=a(e,n),c=a(t,n),s=l(c-o),f=new Array(s),d=0;d<s;d++)f[d]="String"==r?this.charAt(o+d):this[o+d];return f}})},53289:(e,t,n)=>{"use strict";var r=n(35366),o=n(66934)(3);r(r.P+r.F*!n(85139)([].some,!0),"Array",{some:function(e){return o(this,e,arguments[1])}})},88375:(e,t,n)=>{"use strict";var r=n(35366),o=n(23079),i=n(54200),a=n(71240),l=[].sort,u=[1,2,3];r(r.P+r.F*(a((function(){u.sort(void 0)}))||!a((function(){u.sort(null)}))||!n(85139)(l)),"Array",{sort:function(e){return void 0===e?l.call(i(this)):l.call(i(this),o(e))}})},78772:(e,t,n)=>{n(75993)("Array")},32338:(e,t,n)=>{var r=n(35366);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},21575:(e,t,n)=>{var r=n(35366),o=n(41792);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},20641:(e,t,n)=>{"use strict";var r=n(35366),o=n(54200),i=n(9241);r(r.P+r.F*n(71240)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(e){var t=o(this),n=i(t);return"number"!=typeof n||isFinite(n)?t.toISOString():null}})},91033:(e,t,n)=>{var r=n(9739)("toPrimitive"),o=Date.prototype;r in o||n(98442)(o,r,n(27687))},75611:(e,t,n)=>{var r=Date.prototype,o="Invalid Date",i="toString",a=r[i],l=r.getTime;new Date(NaN)+""!=o&&n(1564)(r,i,(function(){var e=l.call(this);return e==e?a.call(this):o}))},78769:(e,t,n)=>{var r=n(35366);r(r.P,"Function",{bind:n(46966)})},99383:(e,t,n)=>{"use strict";var r=n(17481),o=n(44408),i=n(9739)("hasInstance"),a=Function.prototype;i in a||n(83530).f(a,i,{value:function(e){if("function"!=typeof this||!r(e))return!1;if(!r(this.prototype))return e instanceof this;for(;e=o(e);)if(this.prototype===e)return!0;return!1}})},729:(e,t,n)=>{var r=n(83530).f,o=Function.prototype,i=/^\s*function ([^ (]*)/,a="name";a in o||n(51916)&&r(o,a,{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},82509:(e,t,n)=>{"use strict";var r=n(95144),o=n(91603),i="Map";e.exports=n(58091)(i,(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(e){var t=r.getEntry(o(this,i),e);return t&&t.v},set:function(e,t){return r.def(o(this,i),0===e?0:e,t)}},r,!0)},12372:(e,t,n)=>{var r=n(35366),o=n(19007),i=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?Math.log(e)+Math.LN2:o(e-1+i(e-1)*i(e+1))}})},30511:(e,t,n)=>{var r=n(35366),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):Math.log(t+Math.sqrt(t*t+1)):t}})},6781:(e,t,n)=>{var r=n(35366),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(e){return 0==(e=+e)?e:Math.log((1+e)/(1-e))/2}})},74434:(e,t,n)=>{var r=n(35366),o=n(84247);r(r.S,"Math",{cbrt:function(e){return o(e=+e)*Math.pow(Math.abs(e),1/3)}})},14783:(e,t,n)=>{var r=n(35366);r(r.S,"Math",{clz32:function(e){return(e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}})},95521:(e,t,n)=>{var r=n(35366),o=Math.exp;r(r.S,"Math",{cosh:function(e){return(o(e=+e)+o(-e))/2}})},94093:(e,t,n)=>{var r=n(35366),o=n(77117);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},86378:(e,t,n)=>{var r=n(35366);r(r.S,"Math",{fround:n(59396)})},52380:(e,t,n)=>{var r=n(35366),o=Math.abs;r(r.S,"Math",{hypot:function(e,t){for(var n,r,i=0,a=0,l=arguments.length,u=0;a<l;)u<(n=o(arguments[a++]))?(i=i*(r=u/n)*r+1,u=n):i+=n>0?(r=n/u)*r:n;return u===1/0?1/0:u*Math.sqrt(i)}})},2803:(e,t,n)=>{var r=n(35366),o=Math.imul;r(r.S+r.F*n(71240)((function(){return-5!=o(4294967295,5)||2!=o.length})),"Math",{imul:function(e,t){var n=65535,r=+e,o=+t,i=n&r,a=n&o;return 0|i*a+((n&r>>>16)*a+i*(n&o>>>16)<<16>>>0)}})},63725:(e,t,n)=>{var r=n(35366);r(r.S,"Math",{log10:function(e){return Math.log(e)*Math.LOG10E}})},7977:(e,t,n)=>{var r=n(35366);r(r.S,"Math",{log1p:n(19007)})},14192:(e,t,n)=>{var r=n(35366);r(r.S,"Math",{log2:function(e){return Math.log(e)/Math.LN2}})},2940:(e,t,n)=>{var r=n(35366);r(r.S,"Math",{sign:n(84247)})},35731:(e,t,n)=>{var r=n(35366),o=n(77117),i=Math.exp;r(r.S+r.F*n(71240)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(e){return Math.abs(e=+e)<1?(o(e)-o(-e))/2:(i(e-1)-i(-e-1))*(Math.E/2)}})},79382:(e,t,n)=>{var r=n(35366),o=n(77117),i=Math.exp;r(r.S,"Math",{tanh:function(e){var t=o(e=+e),n=o(-e);return t==1/0?1:n==1/0?-1:(t-n)/(i(e)+i(-e))}})},38877:(e,t,n)=>{var r=n(35366);r(r.S,"Math",{trunc:function(e){return(e>0?Math.floor:Math.ceil)(e)}})},10348:(e,t,n)=>{"use strict";var r=n(56341),o=n(41063),i=n(89426),a=n(94805),l=n(9241),u=n(71240),c=n(14230).f,s=n(57762).f,f=n(83530).f,d=n(97370).trim,p="Number",h=r[p],m=h,g=h.prototype,v=i(n(62545)(g))==p,y="trim"in String.prototype,A=function(e){var t=l(e,!1);if("string"==typeof t&&t.length>2){var n,r,o,i=(t=y?t.trim():d(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=t.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+t}for(var a,u=t.slice(2),c=0,s=u.length;c<s;c++)if((a=u.charCodeAt(c))<48||a>o)return NaN;return parseInt(u,r)}}return+t};if(!h(" 0o1")||!h("0b1")||h("+0x1")){h=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof h&&(v?u((function(){g.valueOf.call(n)})):i(n)!=p)?a(new m(A(t)),n,h):A(t)};for(var b,w=n(51916)?c(m):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;w.length>x;x++)o(m,b=w[x])&&!o(h,b)&&f(h,b,s(m,b));h.prototype=g,g.constructor=h,n(1564)(r,p,h)}},64007:(e,t,n)=>{var r=n(35366);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},87616:(e,t,n)=>{var r=n(35366),o=n(56341).isFinite;r(r.S,"Number",{isFinite:function(e){return"number"==typeof e&&o(e)}})},86762:(e,t,n)=>{var r=n(35366);r(r.S,"Number",{isInteger:n(22289)})},43316:(e,t,n)=>{var r=n(35366);r(r.S,"Number",{isNaN:function(e){return e!=e}})},93019:(e,t,n)=>{var r=n(35366),o=n(22289),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(e){return o(e)&&i(e)<=9007199254740991}})},40293:(e,t,n)=>{var r=n(35366);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},60640:(e,t,n)=>{var r=n(35366);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},96589:(e,t,n)=>{var r=n(35366),o=n(13765);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},93210:(e,t,n)=>{var r=n(35366),o=n(80500);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},71028:(e,t,n)=>{"use strict";var r=n(35366),o=n(51549),i=n(23373),a=n(40005),l=1..toFixed,u=Math.floor,c=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",f="0",d=function(e,t){for(var n=-1,r=t;++n<6;)r+=e*c[n],c[n]=r%1e7,r=u(r/1e7)},p=function(e){for(var t=6,n=0;--t>=0;)n+=c[t],c[t]=u(n/e),n=n%e*1e7},h=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==c[e]){var n=String(c[e]);t=""===t?n:t+a.call(f,7-n.length)+n}return t},m=function(e,t,n){return 0===t?n:t%2==1?m(e,t-1,n*e):m(e*e,t/2,n)};r(r.P+r.F*(!!l&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(71240)((function(){l.call({})}))),"Number",{toFixed:function(e){var t,n,r,l,u=i(this,s),c=o(e),g="",v=f;if(c<0||c>20)throw RangeError(s);if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(g="-",u=-u),u>1e-21)if(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(u*m(2,69,1))-69,n=t<0?u*m(2,-t,1):u/m(2,t,1),n*=4503599627370496,(t=52-t)>0){for(d(0,n),r=c;r>=7;)d(1e7,0),r-=7;for(d(m(10,r,1),0),r=t-1;r>=23;)p(1<<23),r-=23;p(1<<r),d(1,1),p(2),v=h()}else d(0,n),d(1<<-t,0),v=h()+a.call(f,c);return c>0?g+((l=v.length)<=c?"0."+a.call(f,c-l)+v:v.slice(0,l-c)+"."+v.slice(l-c)):g+v}})},2610:(e,t,n)=>{"use strict";var r=n(35366),o=n(71240),i=n(23373),a=1..toPrecision;r(r.P+r.F*(o((function(){return"1"!==a.call(1,void 0)}))||!o((function(){a.call({})}))),"Number",{toPrecision:function(e){var t=i(this,"Number#toPrecision: incorrect invocation!");return void 0===e?a.call(t):a.call(t,e)}})},88325:(e,t,n)=>{var r=n(35366);r(r.S+r.F,"Object",{assign:n(49821)})},57944:(e,t,n)=>{var r=n(35366);r(r.S,"Object",{create:n(62545)})},10266:(e,t,n)=>{var r=n(35366);r(r.S+r.F*!n(51916),"Object",{defineProperties:n(30413)})},65388:(e,t,n)=>{var r=n(35366);r(r.S+r.F*!n(51916),"Object",{defineProperty:n(83530).f})},40192:(e,t,n)=>{var r=n(17481),o=n(82153).onFreeze;n(81025)("freeze",(function(e){return function(t){return e&&r(t)?e(o(t)):t}}))},57557:(e,t,n)=>{var r=n(8500),o=n(57762).f;n(81025)("getOwnPropertyDescriptor",(function(){return function(e,t){return o(r(e),t)}}))},54943:(e,t,n)=>{n(81025)("getOwnPropertyNames",(function(){return n(85009).f}))},63386:(e,t,n)=>{var r=n(54200),o=n(44408);n(81025)("getPrototypeOf",(function(){return function(e){return o(r(e))}}))},4649:(e,t,n)=>{var r=n(17481);n(81025)("isExtensible",(function(e){return function(t){return!!r(t)&&(!e||e(t))}}))},16736:(e,t,n)=>{var r=n(17481);n(81025)("isFrozen",(function(e){return function(t){return!r(t)||!!e&&e(t)}}))},7260:(e,t,n)=>{var r=n(17481);n(81025)("isSealed",(function(e){return function(t){return!r(t)||!!e&&e(t)}}))},52798:(e,t,n)=>{var r=n(35366);r(r.S,"Object",{is:n(61541)})},30081:(e,t,n)=>{var r=n(54200),o=n(15825);n(81025)("keys",(function(){return function(e){return o(r(e))}}))},17026:(e,t,n)=>{var r=n(17481),o=n(82153).onFreeze;n(81025)("preventExtensions",(function(e){return function(t){return e&&r(t)?e(o(t)):t}}))},24371:(e,t,n)=>{var r=n(17481),o=n(82153).onFreeze;n(81025)("seal",(function(e){return function(t){return e&&r(t)?e(o(t)):t}}))},86911:(e,t,n)=>{var r=n(35366);r(r.S,"Object",{setPrototypeOf:n(87135).set})},84394:(e,t,n)=>{"use strict";var r=n(12845),o={};o[n(9739)("toStringTag")]="z",o+""!="[object z]"&&n(1564)(Object.prototype,"toString",(function(){return"[object "+r(this)+"]"}),!0)},15072:(e,t,n)=>{var r=n(35366),o=n(13765);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},19315:(e,t,n)=>{var r=n(35366),o=n(80500);r(r.G+r.F*(parseInt!=o),{parseInt:o})},12813:(e,t,n)=>{"use strict";var r,o,i,a,l=n(35113),u=n(56341),c=n(82794),s=n(12845),f=n(35366),d=n(17481),p=n(23079),h=n(30599),m=n(62971),g=n(59789),v=n(7122).set,y=n(37)(),A=n(83285),b=n(98332),w=n(83843),x=n(38614),E="Promise",C=u.TypeError,k=u.process,S=k&&k.versions,B=S&&S.v8||"",I=u[E],O="process"==s(k),P=function(){},F=o=A.f,_=!!function(){try{var e=I.resolve(1),t=(e.constructor={})[n(9739)("species")]=function(e){e(P,P)};return(O||"function"==typeof PromiseRejectionEvent)&&e.then(P)instanceof t&&0!==B.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(e){}}(),T=function(e){var t;return!(!d(e)||"function"!=typeof(t=e.then))&&t},L=function(e,t){if(!e._n){e._n=!0;var n=e._c;y((function(){for(var r=e._v,o=1==e._s,i=0,a=function(t){var n,i,a,l=o?t.ok:t.fail,u=t.resolve,c=t.reject,s=t.domain;try{l?(o||(2==e._h&&R(e),e._h=1),!0===l?n=r:(s&&s.enter(),n=l(r),s&&(s.exit(),a=!0)),n===t.promise?c(C("Promise-chain cycle")):(i=T(n))?i.call(n,u,c):u(n)):c(r)}catch(e){s&&!a&&s.exit(),c(e)}};n.length>i;)a(n[i++]);e._c=[],e._n=!1,t&&!e._h&&N(e)}))}},N=function(e){v.call(u,(function(){var t,n,r,o=e._v,i=j(e);if(i&&(t=b((function(){O?k.emit("unhandledRejection",o,e):(n=u.onunhandledrejection)?n({promise:e,reason:o}):(r=u.console)&&r.error&&r.error("Unhandled promise rejection",o)})),e._h=O||j(e)?2:1),e._a=void 0,i&&t.e)throw t.v}))},j=function(e){return 1!==e._h&&0===(e._a||e._c).length},R=function(e){v.call(u,(function(){var t;O?k.emit("rejectionHandled",e):(t=u.onrejectionhandled)&&t({promise:e,reason:e._v})}))},M=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),L(t,!0))},z=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw C("Promise can't be resolved itself");(t=T(e))?y((function(){var r={_w:n,_d:!1};try{t.call(e,c(z,r,1),c(M,r,1))}catch(e){M.call(r,e)}})):(n._v=e,n._s=1,L(n,!1))}catch(e){M.call({_w:n,_d:!1},e)}}};_||(I=function(e){h(this,I,E,"_h"),p(e),r.call(this);try{e(c(z,this,1),c(M,this,1))}catch(e){M.call(this,e)}},(r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(24092)(I.prototype,{then:function(e,t){var n=F(g(this,I));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=O?k.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&L(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new r;this.promise=e,this.resolve=c(z,e,1),this.reject=c(M,e,1)},A.f=F=function(e){return e===I||e===a?new i(e):o(e)}),f(f.G+f.W+f.F*!_,{Promise:I}),n(21309)(I,E),n(75993)(E),a=n(14411)[E],f(f.S+f.F*!_,E,{reject:function(e){var t=F(this);return(0,t.reject)(e),t.promise}}),f(f.S+f.F*(l||!_),E,{resolve:function(e){return x(l&&this===a?I:this,e)}}),f(f.S+f.F*!(_&&n(61461)((function(e){I.all(e).catch(P)}))),E,{all:function(e){var t=this,n=F(t),r=n.resolve,o=n.reject,i=b((function(){var n=[],i=0,a=1;m(e,!1,(function(e){var l=i++,u=!1;n.push(void 0),a++,t.resolve(e).then((function(e){u||(u=!0,n[l]=e,--a||r(n))}),o)})),--a||r(n)}));return i.e&&o(i.v),n.promise},race:function(e){var t=this,n=F(t),r=n.reject,o=b((function(){m(e,!1,(function(e){t.resolve(e).then(n.resolve,r)}))}));return o.e&&r(o.v),n.promise}})},69310:(e,t,n)=>{var r=n(35366),o=n(23079),i=n(59719),a=(n(56341).Reflect||{}).apply,l=Function.apply;r(r.S+r.F*!n(71240)((function(){a((function(){}))})),"Reflect",{apply:function(e,t,n){var r=o(e),u=i(n);return a?a(r,t,u):l.call(r,t,u)}})},66722:(e,t,n)=>{var r=n(35366),o=n(62545),i=n(23079),a=n(59719),l=n(17481),u=n(71240),c=n(46966),s=(n(56341).Reflect||{}).construct,f=u((function(){function e(){}return!(s((function(){}),[],e)instanceof e)})),d=!u((function(){s((function(){}))}));r(r.S+r.F*(f||d),"Reflect",{construct:function(e,t){i(e),a(t);var n=arguments.length<3?e:i(arguments[2]);if(d&&!f)return s(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(c.apply(e,r))}var u=n.prototype,p=o(l(u)?u:Object.prototype),h=Function.apply.call(e,p,t);return l(h)?h:p}})},18372:(e,t,n)=>{var r=n(83530),o=n(35366),i=n(59719),a=n(9241);o(o.S+o.F*n(71240)((function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(e,t,n){i(e),t=a(t,!0),i(n);try{return r.f(e,t,n),!0}catch(e){return!1}}})},14604:(e,t,n)=>{var r=n(35366),o=n(57762).f,i=n(59719);r(r.S,"Reflect",{deleteProperty:function(e,t){var n=o(i(e),t);return!(n&&!n.configurable)&&delete e[t]}})},84781:(e,t,n)=>{"use strict";var r=n(35366),o=n(59719),i=function(e){this._t=o(e),this._i=0;var t,n=this._k=[];for(t in e)n.push(t)};n(47938)(i,"Object",(function(){var e,t=this,n=t._k;do{if(t._i>=n.length)return{value:void 0,done:!0}}while(!((e=n[t._i++])in t._t));return{value:e,done:!1}})),r(r.S,"Reflect",{enumerate:function(e){return new i(e)}})},24395:(e,t,n)=>{var r=n(57762),o=n(35366),i=n(59719);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(e,t){return r.f(i(e),t)}})},49649:(e,t,n)=>{var r=n(35366),o=n(44408),i=n(59719);r(r.S,"Reflect",{getPrototypeOf:function(e){return o(i(e))}})},38416:(e,t,n)=>{var r=n(57762),o=n(44408),i=n(41063),a=n(35366),l=n(17481),u=n(59719);a(a.S,"Reflect",{get:function e(t,n){var a,c,s=arguments.length<3?t:arguments[2];return u(t)===s?t[n]:(a=r.f(t,n))?i(a,"value")?a.value:void 0!==a.get?a.get.call(s):void 0:l(c=o(t))?e(c,n,s):void 0}})},32475:(e,t,n)=>{var r=n(35366);r(r.S,"Reflect",{has:function(e,t){return t in e}})},12924:(e,t,n)=>{var r=n(35366),o=n(59719),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(e){return o(e),!i||i(e)}})},16337:(e,t,n)=>{var r=n(35366);r(r.S,"Reflect",{ownKeys:n(17285)})},83286:(e,t,n)=>{var r=n(35366),o=n(59719),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(e){o(e);try{return i&&i(e),!0}catch(e){return!1}}})},68766:(e,t,n)=>{var r=n(35366),o=n(87135);o&&r(r.S,"Reflect",{setPrototypeOf:function(e,t){o.check(e,t);try{return o.set(e,t),!0}catch(e){return!1}}})},47225:(e,t,n)=>{var r=n(83530),o=n(57762),i=n(44408),a=n(41063),l=n(35366),u=n(21761),c=n(59719),s=n(17481);l(l.S,"Reflect",{set:function e(t,n,l){var f,d,p=arguments.length<4?t:arguments[3],h=o.f(c(t),n);if(!h){if(s(d=i(t)))return e(d,n,l,p);h=u(0)}if(a(h,"value")){if(!1===h.writable||!s(p))return!1;if(f=o.f(p,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=l,r.f(p,n,f)}else r.f(p,n,u(0,l));return!0}return void 0!==h.set&&(h.set.call(p,l),!0)}})},87080:(e,t,n)=>{var r=n(56341),o=n(94805),i=n(83530).f,a=n(14230).f,l=n(89543),u=n(6439),c=r.RegExp,s=c,f=c.prototype,d=/a/g,p=/a/g,h=new c(d)!==d;if(n(51916)&&(!h||n(71240)((function(){return p[n(9739)("match")]=!1,c(d)!=d||c(p)==p||"/a/i"!=c(d,"i")})))){c=function(e,t){var n=this instanceof c,r=l(e),i=void 0===t;return!n&&r&&e.constructor===c&&i?e:o(h?new s(r&&!i?e.source:e,t):s((r=e instanceof c)?e.source:e,r&&i?u.call(e):t),n?this:f,c)};for(var m=function(e){e in c||i(c,e,{configurable:!0,get:function(){return s[e]},set:function(t){s[e]=t}})},g=a(s),v=0;g.length>v;)m(g[v++]);f.constructor=c,c.prototype=f,n(1564)(r,"RegExp",c)}n(75993)("RegExp")},58615:(e,t,n)=>{"use strict";var r=n(18868);n(35366)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},39544:(e,t,n)=>{n(51916)&&"g"!=/./g.flags&&n(83530).f(RegExp.prototype,"flags",{configurable:!0,get:n(6439)})},45475:(e,t,n)=>{"use strict";var r=n(59719),o=n(61838),i=n(9959),a=n(29073);n(25307)("match",1,(function(e,t,n,l){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=l(n,e,this);if(t.done)return t.value;var u=r(e),c=String(this);if(!u.global)return a(u,c);var s=u.unicode;u.lastIndex=0;for(var f,d=[],p=0;null!==(f=a(u,c));){var h=String(f[0]);d[p]=h,""===h&&(u.lastIndex=i(c,o(u.lastIndex),s)),p++}return 0===p?null:d}]}))},33770:(e,t,n)=>{"use strict";var r=n(59719),o=n(54200),i=n(61838),a=n(51549),l=n(9959),u=n(29073),c=Math.max,s=Math.min,f=Math.floor,d=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;n(25307)("replace",2,(function(e,t,n,h){return[function(r,o){var i=e(this),a=null==r?void 0:r[t];return void 0!==a?a.call(r,i,o):n.call(String(i),r,o)},function(e,t){var o=h(n,e,this,t);if(o.done)return o.value;var f=r(e),d=String(this),p="function"==typeof t;p||(t=String(t));var g=f.global;if(g){var v=f.unicode;f.lastIndex=0}for(var y=[];;){var A=u(f,d);if(null===A)break;if(y.push(A),!g)break;""===String(A[0])&&(f.lastIndex=l(d,i(f.lastIndex),v))}for(var b,w="",x=0,E=0;E<y.length;E++){A=y[E];for(var C=String(A[0]),k=c(s(a(A.index),d.length),0),S=[],B=1;B<A.length;B++)S.push(void 0===(b=A[B])?b:String(b));var I=A.groups;if(p){var O=[C].concat(S,k,d);void 0!==I&&O.push(I);var P=String(t.apply(void 0,O))}else P=m(C,d,k,S,I,t);k>=x&&(w+=d.slice(x,k)+P,x=k+C.length)}return w+d.slice(x)}];function m(e,t,r,i,a,l){var u=r+e.length,c=i.length,s=p;return void 0!==a&&(a=o(a),s=d),n.call(l,s,(function(n,o){var l;switch(o.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,r);case"'":return t.slice(u);case"<":l=a[o.slice(1,-1)];break;default:var s=+o;if(0===s)return n;if(s>c){var d=f(s/10);return 0===d?n:d<=c?void 0===i[d-1]?o.charAt(1):i[d-1]+o.charAt(1):n}l=i[s-1]}return void 0===l?"":l}))}}))},5201:(e,t,n)=>{"use strict";var r=n(59719),o=n(61541),i=n(29073);n(25307)("search",1,(function(e,t,n,a){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=a(n,e,this);if(t.done)return t.value;var l=r(e),u=String(this),c=l.lastIndex;o(c,0)||(l.lastIndex=0);var s=i(l,u);return o(l.lastIndex,c)||(l.lastIndex=c),null===s?-1:s.index}]}))},61385:(e,t,n)=>{"use strict";var r=n(89543),o=n(59719),i=n(59789),a=n(9959),l=n(61838),u=n(29073),c=n(18868),s=n(71240),f=Math.min,d=[].push,p="split",h="length",m="lastIndex",g=4294967295,v=!s((function(){RegExp(g,"y")}));n(25307)("split",2,(function(e,t,n,s){var y;return y="c"=="abbc"[p](/(b)*/)[1]||4!="test"[p](/(?:)/,-1)[h]||2!="ab"[p](/(?:ab)*/)[h]||4!="."[p](/(.?)(.?)/)[h]||"."[p](/()()/)[h]>1||""[p](/.?/)[h]?function(e,t){var o=String(this);if(void 0===e&&0===t)return[];if(!r(e))return n.call(o,e,t);for(var i,a,l,u=[],s=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),f=0,p=void 0===t?g:t>>>0,v=new RegExp(e.source,s+"g");(i=c.call(v,o))&&!((a=v[m])>f&&(u.push(o.slice(f,i.index)),i[h]>1&&i.index<o[h]&&d.apply(u,i.slice(1)),l=i[0][h],f=a,u[h]>=p));)v[m]===i.index&&v[m]++;return f===o[h]?!l&&v.test("")||u.push(""):u.push(o.slice(f)),u[h]>p?u.slice(0,p):u}:"0"[p](void 0,0)[h]?function(e,t){return void 0===e&&0===t?[]:n.call(this,e,t)}:n,[function(n,r){var o=e(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,o,r):y.call(String(o),n,r)},function(e,t){var r=s(y,e,this,t,y!==n);if(r.done)return r.value;var c=o(e),d=String(this),p=i(c,RegExp),h=c.unicode,m=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(v?"y":"g"),A=new p(v?c:"^(?:"+c.source+")",m),b=void 0===t?g:t>>>0;if(0===b)return[];if(0===d.length)return null===u(A,d)?[d]:[];for(var w=0,x=0,E=[];x<d.length;){A.lastIndex=v?x:0;var C,k=u(A,v?d:d.slice(x));if(null===k||(C=f(l(A.lastIndex+(v?0:x)),d.length))===w)x=a(d,x,h);else{if(E.push(d.slice(w,x)),E.length===b)return E;for(var S=1;S<=k.length-1;S++)if(E.push(k[S]),E.length===b)return E;x=w=C}}return E.push(d.slice(w)),E}]}))},35244:(e,t,n)=>{"use strict";n(39544);var r=n(59719),o=n(6439),i=n(51916),a="toString",l=/./[a],u=function(e){n(1564)(RegExp.prototype,a,e,!0)};n(71240)((function(){return"/a/b"!=l.call({source:"a",flags:"b"})}))?u((function(){var e=r(this);return"/".concat(e.source,"/","flags"in e?e.flags:!i&&e instanceof RegExp?o.call(e):void 0)})):l.name!=a&&u((function(){return l.call(this)}))},98253:(e,t,n)=>{"use strict";var r=n(95144),o=n(91603);e.exports=n(58091)("Set",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return r.def(o(this,"Set"),e=0===e?0:e,e)}},r)},50447:(e,t,n)=>{"use strict";n(79048)("anchor",(function(e){return function(t){return e(this,"a","name",t)}}))},65624:(e,t,n)=>{"use strict";n(79048)("big",(function(e){return function(){return e(this,"big","","")}}))},51263:(e,t,n)=>{"use strict";n(79048)("blink",(function(e){return function(){return e(this,"blink","","")}}))},65193:(e,t,n)=>{"use strict";n(79048)("bold",(function(e){return function(){return e(this,"b","","")}}))},82858:(e,t,n)=>{"use strict";var r=n(35366),o=n(7384)(!1);r(r.P,"String",{codePointAt:function(e){return o(this,e)}})},22058:(e,t,n)=>{"use strict";var r=n(35366),o=n(61838),i=n(83256),a="endsWith",l=""[a];r(r.P+r.F*n(46881)(a),"String",{endsWith:function(e){var t=i(this,e,a),n=arguments.length>1?arguments[1]:void 0,r=o(t.length),u=void 0===n?r:Math.min(o(n),r),c=String(e);return l?l.call(t,c,u):t.slice(u-c.length,u)===c}})},28241:(e,t,n)=>{"use strict";n(79048)("fixed",(function(e){return function(){return e(this,"tt","","")}}))},96723:(e,t,n)=>{"use strict";n(79048)("fontcolor",(function(e){return function(t){return e(this,"font","color",t)}}))},9394:(e,t,n)=>{"use strict";n(79048)("fontsize",(function(e){return function(t){return e(this,"font","size",t)}}))},22539:(e,t,n)=>{var r=n(35366),o=n(15044),i=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(e){for(var t,n=[],r=arguments.length,a=0;r>a;){if(t=+arguments[a++],o(t,1114111)!==t)throw RangeError(t+" is not a valid code point");n.push(t<65536?i(t):i(55296+((t-=65536)>>10),t%1024+56320))}return n.join("")}})},95472:(e,t,n)=>{"use strict";var r=n(35366),o=n(83256),i="includes";r(r.P+r.F*n(46881)(i),"String",{includes:function(e){return!!~o(this,e,i).indexOf(e,arguments.length>1?arguments[1]:void 0)}})},66938:(e,t,n)=>{"use strict";n(79048)("italics",(function(e){return function(){return e(this,"i","","")}}))},74333:(e,t,n)=>{"use strict";var r=n(7384)(!0);n(19121)(String,"String",(function(e){this._t=String(e),this._i=0}),(function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})}))},11961:(e,t,n)=>{"use strict";n(79048)("link",(function(e){return function(t){return e(this,"a","href",t)}}))},39820:(e,t,n)=>{var r=n(35366),o=n(8500),i=n(61838);r(r.S,"String",{raw:function(e){for(var t=o(e.raw),n=i(t.length),r=arguments.length,a=[],l=0;n>l;)a.push(String(t[l++])),l<r&&a.push(String(arguments[l]));return a.join("")}})},57001:(e,t,n)=>{var r=n(35366);r(r.P,"String",{repeat:n(40005)})},69659:(e,t,n)=>{"use strict";n(79048)("small",(function(e){return function(){return e(this,"small","","")}}))},57492:(e,t,n)=>{"use strict";var r=n(35366),o=n(61838),i=n(83256),a="startsWith",l=""[a];r(r.P+r.F*n(46881)(a),"String",{startsWith:function(e){var t=i(this,e,a),n=o(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return l?l.call(t,r,n):t.slice(n,n+r.length)===r}})},23354:(e,t,n)=>{"use strict";n(79048)("strike",(function(e){return function(){return e(this,"strike","","")}}))},99620:(e,t,n)=>{"use strict";n(79048)("sub",(function(e){return function(){return e(this,"sub","","")}}))},638:(e,t,n)=>{"use strict";n(79048)("sup",(function(e){return function(){return e(this,"sup","","")}}))},28417:(e,t,n)=>{"use strict";n(97370)("trim",(function(e){return function(){return e(this,3)}}))},98997:(e,t,n)=>{"use strict";var r=n(56341),o=n(41063),i=n(51916),a=n(35366),l=n(1564),u=n(82153).KEY,c=n(71240),s=n(97355),f=n(21309),d=n(90430),p=n(9739),h=n(38833),m=n(48155),g=n(4535),v=n(40689),y=n(59719),A=n(17481),b=n(54200),w=n(8500),x=n(9241),E=n(21761),C=n(62545),k=n(85009),S=n(57762),B=n(32520),I=n(83530),O=n(15825),P=S.f,F=I.f,_=k.f,T=r.Symbol,L=r.JSON,N=L&&L.stringify,j="prototype",R=p("_hidden"),M=p("toPrimitive"),z={}.propertyIsEnumerable,D=s("symbol-registry"),U=s("symbols"),W=s("op-symbols"),q=Object[j],V="function"==typeof T&&!!B.f,H=r.QObject,Q=!H||!H[j]||!H[j].findChild,Y=i&&c((function(){return 7!=C(F({},"a",{get:function(){return F(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=P(q,t);r&&delete q[t],F(e,t,n),r&&e!==q&&F(q,t,r)}:F,G=function(e){var t=U[e]=C(T[j]);return t._k=e,t},$=V&&"symbol"==typeof T.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof T},X=function(e,t,n){return e===q&&X(W,t,n),y(e),t=x(t,!0),y(n),o(U,t)?(n.enumerable?(o(e,R)&&e[R][t]&&(e[R][t]=!1),n=C(n,{enumerable:E(0,!1)})):(o(e,R)||F(e,R,E(1,{})),e[R][t]=!0),Y(e,t,n)):F(e,t,n)},K=function(e,t){y(e);for(var n,r=g(t=w(t)),o=0,i=r.length;i>o;)X(e,n=r[o++],t[n]);return e},J=function(e){var t=z.call(this,e=x(e,!0));return!(this===q&&o(U,e)&&!o(W,e))&&(!(t||!o(this,e)||!o(U,e)||o(this,R)&&this[R][e])||t)},Z=function(e,t){if(e=w(e),t=x(t,!0),e!==q||!o(U,t)||o(W,t)){var n=P(e,t);return!n||!o(U,t)||o(e,R)&&e[R][t]||(n.enumerable=!0),n}},ee=function(e){for(var t,n=_(w(e)),r=[],i=0;n.length>i;)o(U,t=n[i++])||t==R||t==u||r.push(t);return r},te=function(e){for(var t,n=e===q,r=_(n?W:w(e)),i=[],a=0;r.length>a;)!o(U,t=r[a++])||n&&!o(q,t)||i.push(U[t]);return i};V||(l((T=function(){if(this instanceof T)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(n){this===q&&t.call(W,n),o(this,R)&&o(this[R],e)&&(this[R][e]=!1),Y(this,e,E(1,n))};return i&&Q&&Y(q,e,{configurable:!0,set:t}),G(e)})[j],"toString",(function(){return this._k})),S.f=Z,I.f=X,n(14230).f=k.f=ee,n(41144).f=J,B.f=te,i&&!n(35113)&&l(q,"propertyIsEnumerable",J,!0),h.f=function(e){return G(p(e))}),a(a.G+a.W+a.F*!V,{Symbol:T});for(var ne="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),re=0;ne.length>re;)p(ne[re++]);for(var oe=O(p.store),ie=0;oe.length>ie;)m(oe[ie++]);a(a.S+a.F*!V,"Symbol",{for:function(e){return o(D,e+="")?D[e]:D[e]=T(e)},keyFor:function(e){if(!$(e))throw TypeError(e+" is not a symbol!");for(var t in D)if(D[t]===e)return t},useSetter:function(){Q=!0},useSimple:function(){Q=!1}}),a(a.S+a.F*!V,"Object",{create:function(e,t){return void 0===t?C(e):K(C(e),t)},defineProperty:X,defineProperties:K,getOwnPropertyDescriptor:Z,getOwnPropertyNames:ee,getOwnPropertySymbols:te});var ae=c((function(){B.f(1)}));a(a.S+a.F*ae,"Object",{getOwnPropertySymbols:function(e){return B.f(b(e))}}),L&&a(a.S+a.F*(!V||c((function(){var e=T();return"[null]"!=N([e])||"{}"!=N({a:e})||"{}"!=N(Object(e))}))),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(A(t)||void 0!==e)&&!$(e))return v(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!$(t))return t}),r[1]=t,N.apply(L,r)}}),T[j][M]||n(98442)(T[j],M,T[j].valueOf),f(T,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},63315:(e,t,n)=>{"use strict";var r=n(35366),o=n(67728),i=n(29895),a=n(59719),l=n(15044),u=n(61838),c=n(17481),s=n(56341).ArrayBuffer,f=n(59789),d=i.ArrayBuffer,p=i.DataView,h=o.ABV&&s.isView,m=d.prototype.slice,g=o.VIEW,v="ArrayBuffer";r(r.G+r.W+r.F*(s!==d),{ArrayBuffer:d}),r(r.S+r.F*!o.CONSTR,v,{isView:function(e){return h&&h(e)||c(e)&&g in e}}),r(r.P+r.U+r.F*n(71240)((function(){return!new d(2).slice(1,void 0).byteLength})),v,{slice:function(e,t){if(void 0!==m&&void 0===t)return m.call(a(this),e);for(var n=a(this).byteLength,r=l(e,n),o=l(void 0===t?n:t,n),i=new(f(this,d))(u(o-r)),c=new p(this),s=new p(i),h=0;r<o;)s.setUint8(h++,c.getUint8(r++));return i}}),n(75993)(v)},12920:(e,t,n)=>{var r=n(35366);r(r.G+r.W+r.F*!n(67728).ABV,{DataView:n(29895).DataView})},30951:(e,t,n)=>{n(58754)("Float32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},10029:(e,t,n)=>{n(58754)("Float64",8,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},76935:(e,t,n)=>{n(58754)("Int16",2,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},56403:(e,t,n)=>{n(58754)("Int32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},95443:(e,t,n)=>{n(58754)("Int8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},17846:(e,t,n)=>{n(58754)("Uint16",2,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},51200:(e,t,n)=>{n(58754)("Uint32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},69815:(e,t,n)=>{n(58754)("Uint8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},43771:(e,t,n)=>{n(58754)("Uint8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}),!0)},57391:(e,t,n)=>{"use strict";var r,o=n(56341),i=n(66934)(0),a=n(1564),l=n(82153),u=n(49821),c=n(33503),s=n(17481),f=n(91603),d=n(91603),p=!o.ActiveXObject&&"ActiveXObject"in o,h="WeakMap",m=l.getWeak,g=Object.isExtensible,v=c.ufstore,y=function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},A={get:function(e){if(s(e)){var t=m(e);return!0===t?v(f(this,h)).get(e):t?t[this._i]:void 0}},set:function(e,t){return c.def(f(this,h),e,t)}},b=e.exports=n(58091)(h,y,A,c,!0,!0);d&&p&&(u((r=c.getConstructor(y,h)).prototype,A),l.NEED=!0,i(["delete","has","get","set"],(function(e){var t=b.prototype,n=t[e];a(t,e,(function(t,o){if(s(t)&&!g(t)){this._f||(this._f=new r);var i=this._f[e](t,o);return"set"==e?this:i}return n.call(this,t,o)}))})))},33307:(e,t,n)=>{"use strict";var r=n(33503),o=n(91603),i="WeakSet";n(58091)(i,(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return r.def(o(this,i),e,!0)}},r,!1,!0)},98125:(e,t,n)=>{"use strict";var r=n(35366),o=n(3885),i=n(54200),a=n(61838),l=n(23079),u=n(44087);r(r.P,"Array",{flatMap:function(e){var t,n,r=i(this);return l(e),t=a(r.length),n=u(r,0),o(n,r,r,t,0,1,e,arguments[1]),n}}),n(12802)("flatMap")},49348:(e,t,n)=>{"use strict";var r=n(35366),o=n(61545)(!0);r(r.P,"Array",{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(12802)("includes")},1768:(e,t,n)=>{var r=n(35366),o=n(15346)(!0);r(r.S,"Object",{entries:function(e){return o(e)}})},59223:(e,t,n)=>{var r=n(35366),o=n(17285),i=n(8500),a=n(57762),l=n(51676);r(r.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,n,r=i(e),u=a.f,c=o(r),s={},f=0;c.length>f;)void 0!==(n=u(r,t=c[f++]))&&l(s,t,n);return s}})},67442:(e,t,n)=>{var r=n(35366),o=n(15346)(!1);r(r.S,"Object",{values:function(e){return o(e)}})},14936:(e,t,n)=>{"use strict";var r=n(35366),o=n(14411),i=n(56341),a=n(59789),l=n(38614);r(r.P+r.R,"Promise",{finally:function(e){var t=a(this,o.Promise||i.Promise),n="function"==typeof e;return this.then(n?function(n){return l(t,e()).then((function(){return n}))}:e,n?function(n){return l(t,e()).then((function(){throw n}))}:e)}})},20239:(e,t,n)=>{"use strict";var r=n(35366),o=n(9823),i=n(83843),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*a,"String",{padEnd:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!1)}})},28755:(e,t,n)=>{"use strict";var r=n(35366),o=n(9823),i=n(83843),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*a,"String",{padStart:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!0)}})},53412:(e,t,n)=>{"use strict";n(97370)("trimLeft",(function(e){return function(){return e(this,1)}}),"trimStart")},66948:(e,t,n)=>{"use strict";n(97370)("trimRight",(function(e){return function(){return e(this,2)}}),"trimEnd")},78284:(e,t,n)=>{n(48155)("asyncIterator")},78745:(e,t,n)=>{for(var r=n(71308),o=n(15825),i=n(1564),a=n(56341),l=n(98442),u=n(4919),c=n(9739),s=c("iterator"),f=c("toStringTag"),d=u.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(p),m=0;m<h.length;m++){var g,v=h[m],y=p[v],A=a[v],b=A&&A.prototype;if(b&&(b[s]||l(b,s,d),b[f]||l(b,f,v),u[v]=d,y))for(g in r)b[g]||i(b,g,r[g],!0)}},60025:(e,t,n)=>{var r=n(35366),o=n(7122);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},51629:(e,t,n)=>{var r=n(56341),o=n(35366),i=n(83843),a=[].slice,l=/MSIE .\./.test(i),u=function(e){return function(t,n){var r=arguments.length>2,o=!!r&&a.call(arguments,2);return e(r?function(){("function"==typeof t?t:Function(t)).apply(this,o)}:t,n)}};o(o.G+o.B+o.F*l,{setTimeout:u(r.setTimeout),setInterval:u(r.setInterval)})},1523:(e,t,n)=>{n(51629),n(60025),n(78745),e.exports=n(14411)},86426:(e,t,n)=>{"use strict";n.d(t,{rg:()=>i});var r=n(67294);const o=(0,r.createContext)(null);function i({clientId:e,onScriptLoadSuccess:t,onScriptLoadError:n,children:i}){const a=function(e={}){const{onScriptLoadSuccess:t,onScriptLoadError:n}=e,[o,i]=(0,r.useState)(!1),a=(0,r.useRef)(t);a.current=t;const l=(0,r.useRef)(n);return l.current=n,(0,r.useEffect)((()=>{const e=document.createElement("script");return e.src="https://accounts.google.com/gsi/client",e.async=!0,e.defer=!0,e.onload=()=>{var e;i(!0),null===(e=a.current)||void 0===e||e.call(a)},e.onerror=()=>{var e;i(!1),null===(e=l.current)||void 0===e||e.call(l)},document.body.appendChild(e),()=>{document.body.removeChild(e)}}),[]),o}({onScriptLoadSuccess:t,onScriptLoadError:n}),l=(0,r.useMemo)((()=>({clientId:e,scriptLoadedSuccessfully:a})),[e,a]);return r.createElement(o.Provider,{value:l},i)}},12599:(e,t,n)=>{"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}var o;n.d(t,{Ep:()=>s,RQ:()=>_,WK:()=>R,Zn:()=>B,Zq:()=>P,aU:()=>o,cP:()=>f,fp:()=>p,kG:()=>l,lX:()=>a,pC:()=>F}),function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(o||(o={}));const i="popstate";function a(e){return void 0===e&&(e={}),function(e,t,n,a){void 0===a&&(a={});let{window:f=document.defaultView,v5Compat:d=!1}=a,p=f.history,h=o.Pop,m=null,g=v();function v(){return(p.state||{idx:null}).idx}function y(){h=o.Pop;let e=v(),t=null==e?null:e-g;g=e,m&&m({action:h,location:b.location,delta:t})}function A(e){let t="null"!==f.location.origin?f.location.origin:f.location.href,n="string"==typeof e?e:s(e);return l(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==g&&(g=0,p.replaceState(r({},p.state,{idx:g}),""));let b={get action(){return h},get location(){return e(f,p)},listen(e){if(m)throw new Error("A history only accepts one active listener");return f.addEventListener(i,y),m=e,()=>{f.removeEventListener(i,y),m=null}},createHref:e=>t(f,e),createURL:A,encodeLocation(e){let t=A(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){h=o.Push;let r=c(b.location,e,t);n&&n(r,e),g=v()+1;let i=u(r,g),a=b.createHref(r);try{p.pushState(i,"",a)}catch(e){f.location.assign(a)}d&&m&&m({action:h,location:b.location,delta:1})},replace:function(e,t){h=o.Replace;let r=c(b.location,e,t);n&&n(r,e),g=v();let i=u(r,g),a=b.createHref(r);p.replaceState(i,"",a),d&&m&&m({action:h,location:b.location,delta:0})},go:e=>p.go(e)};return b}((function(e,t){let{pathname:n,search:r,hash:o}=e.location;return c("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:s(t)}),null,e)}function l(e,t){if(!1===e||null==e)throw new Error(t)}function u(e,t){return{usr:e.state,key:e.key,idx:t}}function c(e,t,n,o){return void 0===n&&(n=null),r({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?f(t):t,{state:n,key:t&&t.key||o||Math.random().toString(36).substr(2,8)})}function s(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function f(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var d;function p(e,t,n){void 0===n&&(n="/");let r=B(("string"==typeof t?f(t):t).pathname||"/",n);if(null==r)return null;let o=h(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e)i=C(o[e],S(r));return i}function h(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let o=(e,o,i)=>{let a={relativePath:void 0===i?e.path||"":i,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};a.relativePath.startsWith("/")&&(l(a.relativePath.startsWith(r),'Absolute route path "'+a.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),a.relativePath=a.relativePath.slice(r.length));let u=_([r,a.relativePath]),c=n.concat(a);e.children&&e.children.length>0&&(l(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+u+'".'),h(e.children,t,c,u)),(null!=e.path||e.index)&&t.push({path:u,score:E(u,e.index),routesMeta:c})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of m(e.path))o(e,t,n);else o(e,t)})),t}function m(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),i=n.replace(/\?$/,"");if(0===r.length)return o?[i,""]:[i];let a=m(r.join("/")),l=[];return l.push(...a.map((e=>""===e?i:[i,e].join("/")))),o&&l.push(...a),l.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(d||(d={}));const g=/^:\w+$/,v=3,y=2,A=1,b=10,w=-2,x=e=>"*"===e;function E(e,t){let n=e.split("/"),r=n.length;return n.some(x)&&(r+=w),t&&(r+=y),n.filter((e=>!x(e))).reduce(((e,t)=>e+(g.test(t)?v:""===t?A:b)),r)}function C(e,t){let{routesMeta:n}=e,r={},o="/",i=[];for(let e=0;e<n.length;++e){let a=n[e],l=e===n.length-1,u="/"===o?t:t.slice(o.length)||"/",c=k({path:a.relativePath,caseSensitive:a.caseSensitive,end:l},u);if(!c)return null;Object.assign(r,c.params);let s=a.route;i.push({params:r,pathname:_([o,c.pathname]),pathnameBase:T(_([o,c.pathnameBase])),route:s}),"/"!==c.pathnameBase&&(o=_([o,c.pathnameBase]))}return i}function k(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),I("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(r.push(t),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let i=o[0],a=i.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";a=i.slice(0,i.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return I(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(l[n]||"",t),e}),{}),pathname:i,pathnameBase:a,pattern:e}}function S(e){try{return decodeURI(e)}catch(t){return I(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function B(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function I(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function O(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function P(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function F(e,t,n,o){let i;void 0===o&&(o=!1),"string"==typeof e?i=f(e):(i=r({},e),l(!i.pathname||!i.pathname.includes("?"),O("?","pathname","search",i)),l(!i.pathname||!i.pathname.includes("#"),O("#","pathname","hash",i)),l(!i.search||!i.search.includes("#"),O("#","search","hash",i)));let a,u=""===e||""===i.pathname,c=u?"/":i.pathname;if(o||null==c)a=n;else{let e=t.length-1;if(c.startsWith("..")){let t=c.split("/");for(;".."===t[0];)t.shift(),e-=1;i.pathname=t.join("/")}a=e>=0?t[e]:"/"}let s=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?f(e):e,i=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:i,search:L(r),hash:N(o)}}(i,a),d=c&&"/"!==c&&c.endsWith("/"),p=(u||"."===c)&&n.endsWith("/");return s.pathname.endsWith("/")||!d&&!p||(s.pathname+="/"),s}const _=e=>e.join("/").replace(/\/\/+/g,"/"),T=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),L=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",N=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";class j extends Error{}function R(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const M=["post","put","patch","delete"],z=(new Set(M),["get",...M]);new Set(z),new Set([301,302,303,307,308]),new Set([307,308]),"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement,Symbol("deferred")},81613:(e,t,n)=>{"use strict";n.d(t,{Z:()=>Ia});var r={};n.r(r),n.d(r,{boolean:()=>Yt,booleanish:()=>Gt,commaOrSpaceSeparated:()=>Zt,commaSeparated:()=>Jt,number:()=>Xt,overloadedBoolean:()=>$t,spaceSeparated:()=>Kt});var o={};n.r(o),n.d(o,{attentionMarkers:()=>Co,contentInitial:()=>yo,disable:()=>ko,document:()=>vo,flow:()=>bo,flowInitial:()=>Ao,insideSpan:()=>Eo,string:()=>wo,text:()=>xo}),n(68309),n(82526),n(41817),n(41539),n(32165),n(66992),n(78783),n(33948),n(47042),n(91038),n(74916);var i=n(67294),a=n(89250);function l(e){this.message=e}l.prototype=new Error,l.prototype.name="InvalidCharacterError";var u="undefined"!=typeof window&&window.atob&&window.atob.bind(window)||function(e){var t=String(e).replace(/=+$/,"");if(t.length%4==1)throw new l("'atob' failed: The string to be decoded is not correctly encoded.");for(var n,r,o=0,i=0,a="";r=t.charAt(i++);~r&&(n=o%4?64*n+r:r,o++%4)?a+=String.fromCharCode(255&n>>(-2*o&6)):0)r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(r);return a};function c(e){var t=e.replace(/-/g,"+").replace(/_/g,"/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw"Illegal base64url string!"}try{return function(e){return decodeURIComponent(u(e).replace(/(.)/g,(function(e,t){var n=t.charCodeAt(0).toString(16).toUpperCase();return n.length<2&&(n="0"+n),"%"+n})))}(t)}catch(e){return u(t)}}function s(e){this.message=e}s.prototype=new Error,s.prototype.name="InvalidTokenError";var f=n(79655);function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n(21249),n(37248),n(82199);const p=function(e){var t,n,r=(t=(0,i.useState)(!1),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(t,n)||function(e,t){if(e){if("string"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?d(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1],l=function(){a(!1),window.scrollTo({top:0,behavior:"smooth"})};return i.createElement(i.Fragment,null,i.createElement("ul",{onClick:function(){return a(!o)},className:o?"navbardropdown-menu clicked":"navbardropdown-menu"},e.menuItems.map((function(e,t){return i.createElement("li",{key:t},e.localpath?i.createElement(f.rU,{className:"navbardropdown-link",to:e.path,onClick:l}," ",e.title," "):i.createElement("a",{className:"navbardropdown-link",href:e.path,onClick:l}," ",e.title," "))}))))};n(81362);const h=n.p+"cd2e5227c3705a48f4a0.png",m=n.p+"WCR_constitution_2018.pdf";function g(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?v(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const y=function(e){var t=e.userId,n=960,r=g((0,i.useState)(!1),2),o=r[0],a=r[1],l=g((0,i.useState)(!1),2),u=l[0],c=l[1],s=g((0,i.useState)(!1),2),d=s[0],v=s[1],y=g((0,i.useState)(!1),2),A=y[0],b=y[1],w=g((0,i.useState)(!1),2),x=w[0],E=w[1],C=function(){window.scrollTo({top:0,behavior:"smooth"})},k=function(){a(!1),C()},S=[{title:"Governance",localpath:!0,path:"/governance"},{title:"Constitution (PDF)",localpath:!1,path:m}];return i.createElement(i.Fragment,null,i.createElement("nav",{className:"navbar-container"},i.createElement("div",null,i.createElement(f.rU,{to:"/",className:"navbar-title u-inlineBlock",onClick:C},i.createElement("div",{className:"navbar-logo-container"}," ",i.createElement("img",{src:h,className:"navbar-logo"})," "),i.createElement("span",{className:"navbar-title-full"},"University College, Oxford ",i.createElement("br",null)," Weir Common Room"),i.createElement("span",{className:"navbar-title-short"},"Univ WCR"))),i.createElement("div",{className:"navbar-menu-icon",onClick:function(){return a(!o)}},i.createElement("i",{className:o?"fas fa-times":"fas fa-bars"})),i.createElement("ul",{className:o?"navbar-menu active":"navbar-menu"},i.createElement("li",{className:"navbar-item",onMouseEnter:function(){window.innerwidth<n?c(!1):c(!0)},onMouseLeave:function(){c(!1)}},i.createElement(f.rU,{to:"/whatson",className:"navbar-links"},"What's on ",i.createElement("i",{className:"fas fa-caret-down"})," "),u&&i.createElement(p,{menuItems:[{title:"Societies A to Z",localpath:!0,path:"/societies"},{title:"Support for societies",localpath:!0,path:"/societies/supports"}]})),i.createElement("li",{className:"navbar-item",onMouseEnter:function(){window.innerwidth<n?v(!1):v(!0)},onMouseLeave:function(){v(!1)}},i.createElement(f.rU,{to:"/about",className:"navbar-links"},"About ",i.createElement("i",{className:"fas fa-caret-down"})," "),d&&i.createElement(p,{menuItems:S})),i.createElement("li",{className:"navbar-item",onMouseEnter:function(){window.innerwidth<n?b(!1):b(!0)},onMouseLeave:function(){b(!1)}},i.createElement(f.rU,{to:"/welfare",className:"navbar-links"},"Welfare ",i.createElement("i",{className:"fas fa-caret-down"})," "),A&&i.createElement(p,{menuItems:[{title:"Welfare FAQ",localpath:!0,path:"/welfare/welfarefaq"},{title:"Who's who",localpath:!0,path:"/welfare/whoswho"}]})),i.createElement("li",{className:"navbar-item",onMouseEnter:function(){window.innerwidth<n?E(!1):E(!0)},onMouseLeave:function(){E(!1)}},i.createElement(f.rU,{to:"/externalaffairs",className:"navbar-links"},"External Affairs ",i.createElement("i",{className:"fas fa-caret-down"})," "),x&&i.createElement(p,{menuItems:[{title:"Voting records",localpath:!0,path:""},{title:"Union policy directory",localpath:!0,path:""}]})),i.createElement("li",{className:"navbar-item"},i.createElement(f.rU,{to:"/contact",className:"navbar-links",onClick:k},"Contact Us")),t?i.createElement("li",{className:"navbar-item"},i.createElement(f.rU,{to:"/profile",className:"navbar-links",onClick:k},"Your profile")):i.createElement(i.Fragment,null))))};function A(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return b(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?b(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n(40659),n(54747),n(80070);const w=function(e){var t=e.title,n=e.children,r=A((0,i.useState)(!1),2),o=r[0],a=r[1],l=(0,i.useRef)(null);return(0,i.useEffect)((function(){var e=new IntersectionObserver((function(e){var t=A(e,1)[0];a(t.isIntersecting)}),{rootMargin:"-150px"});return e.observe(l.current),function(){return e.disconnect()}}),[o]),(0,i.useEffect)((function(){o&&l.current.querySelectorAll("h1").forEach((function(e){e.classList.add("contentblock-title")}))}),[o]),i.createElement("div",{className:"contentblock",ref:l},t?i.createElement("h1",null,t):i.createElement(i.Fragment,null),n)};n(29254),n(28415);const x=function(e){var t=e.display,n=void 0===t?[{key:1,des:"Learn more",isLocal:!0,link:"/about"},{key:2,des:"Contact us",isLocal:!1,link:"https://forms.office.com/r/2vTvALSNBx"},{key:3,des:"College website",isLocal:!1,link:"https://www.univ.ox.ac.uk"}]:t,r=function(){window.scrollTo({top:0,behavior:"smooth"})},o=["secondary","primary","darkgrey"];return i.createElement("div",{className:"ButtonFlex-container ButtonFlex-container-".concat(n.length)},n.map((function(e,t){return i.createElement(i.Fragment,null,e.link?i.createElement(i.Fragment,null,e.isLocal?i.createElement(f.rU,{onClick:e.onClick||r,to:e.link,className:"u-b-".concat(e.color||o[t]),key:e.key},e.des," "):i.createElement("a",{href:e.link,className:"u-b-".concat(e.color||o[t]),key:e.key},e.des)):i.createElement(i.Fragment,null,e.isSubmit?i.createElement("input",{className:"u-b-".concat(e.color||o[t]),type:"submit",onClick:e.onClick,key:e.key}):i.createElement("button",{onClick:e.onClick,className:"u-b-".concat(e.color||o[t]),key:e.key},e.des)))})))},E=n.p+"2e163fe6eb7cb7b6e028.svg",C=n.p+"ff7a297fe8780b4ad0cc.png";var k=function(){window.scrollTo({top:0,behavior:"smooth"})};const S=function(){return i.createElement(i.Fragment,null,i.createElement(w,{title:"About WCR"},i.createElement("p",null,"The WCR has a double meaning: it refers to the graduate body of students at University College and also to the physical space in the College where graduate students can relax and socialise. It is an engaging and diverse community of early-researchers consisting around 150 members across all year groups and subjects. Whether you are here for a one/two-year Masters programme or a DPhil programme we do hope you choose to get involved with college life!")),i.createElement(w,null,i.createElement(x,null)),i.createElement("div",{className:"u-block u-textCenter u-darkgrey BottomBanner"},i.createElement("div",{className:"BottomBanner-unionlogo"},i.createElement("a",{href:"https://www.ox.ac.uk"},i.createElement("img",{src:E,alt:"University of Oxford"})),i.createElement("a",{href:"https://www.univ.ox.ac.uk"},i.createElement("img",{src:C,alt:"University College, Oxford"}))),i.createElement("div",{className:"BottomBanner-sociallogo"},i.createElement("a",{href:"mailto:wcr.externalaffairs@univ.ox.ac.uk"},i.createElement("i",{className:"fa-regular fa-envelope fa-2x",title:"email"})),i.createElement("a",{href:"https://www.facebook.com/groups/433253188107301"},i.createElement("i",{className:"fa-brands fa-facebook fa-2x",title:"facebook"})),i.createElement("a",{href:"https://www.instagram.com/univwcr/"},i.createElement("i",{className:"fa-brands fa-instagram fa-2x",title:"instagram"}))),i.createElement("div",{className:"BottomBanner-description"},i.createElement("p",null," © 2023 Weir Common Room, University College, Oxford "),i.createElement("p",null," The Weir Common Room is the Middle Common Room representing the postgraduate members of University College, Oxford. "),i.createElement("br",null),i.createElement("p",null," ",i.createElement(f.rU,{to:"/privacyaccessibility",className:"author",onClick:k},"Privacy and Accessibility")),i.createElement("p",null," Website by ",i.createElement("a",{href:"https://samuel-chlam.github.io/newsite/#/",className:"author"},"Samuel Lam"),". Vector icons by ",i.createElement("a",{className:"author",href:"https://icomoon.io/app"},"IcoMoon"),". "))))};n(34071);const B=function(){return i.createElement(i.Fragment,null,i.createElement("div",{className:"NotFound-banner u-banner u-standard-banner"}),i.createElement("div",{className:"u-block"},i.createElement("h1",{className:"u-section-title"},"Your requested page could not be found"),i.createElement("p",null,"Please navigate to your desired page using the navigation bar.")))};n(69826),n(92222),n(57717);var I=[{key:"primary",bgColor:[0,59,121],textColor:"secondary",defaultOpacity:.85},{key:"secondary",bgColor:[251,189,26],textColor:"primary",defaultOpacity:.85},{key:"blue",bgColor:[122,178,221],textColor:"primary",defaultOpacity:.95},{key:"violet",bgColor:[148,18,118],textColor:"secondary",defaultOpacity:.9},{key:"black",bgColor:[0,0,0],textColor:"white",defaultOpacity:.7}];const O=function(e){var t=e.backgroundImage,n=e.bgColorKey,r=e.opacityLeft,o=e.opacityRight,a=e.textColor,l=e.title,u=e.content,c=n||"black",s=I.find((function(e){return e.key==c})).bgColor,f=a||I.find((function(e){return e.key==c})).textColor,d={backgroundColor:"rgb(".concat(s[0],", ").concat(s[1],", ").concat(s[2],")")};if(t){var p=r||I.find((function(e){return e.key==c})).defaultOpacity,h=o||I.find((function(e){return e.key==c})).defaultOpacity;d={backgroundImage:"linear-gradient(rgba(".concat(s[0],", ").concat(s[1],", ").concat(s[2],", ").concat(p,"), \n      rgba(").concat(s[0],", ").concat(s[1],", ").concat(s[2],", ").concat(h,")), \n      url(").concat(t,")")}}return i.createElement("div",{className:"topbanner",style:d},i.createElement("div",{className:"topbanner-bodycontainer"},i.createElement("h3",{className:"topbanner-title",style:{color:"var(--".concat(f,")")}}," ",l," "),i.createElement("h1",{className:"topbanner-content",style:{color:"var(--".concat(f,")")}},i.createElement("span",{className:"topbanner-line",style:{color:"var(--".concat(f,")")}}),u)))};n(46761);const P=function(){return i.createElement(i.Fragment,null,i.createElement(O,{bgColorKey:"secondary",title:"Privacy and Accessibility",content:"Privacy and Accessibility Statements"}),i.createElement("div",{className:"u-block"},i.createElement("h1",null,"Privacy"),i.createElement("h2",null,"Information Collection, Use, and Sharing"),i.createElement("p",null,"We are the sole owners of the information collected on this site. We only have access to/collect information that you voluntarily give us via email or other direct contact from you. We will not sell or rent this information to anyone."),i.createElement("p",null,"We will use your information to respond to you, regarding the reason you contacted us. We will not share your information with any third party outside of our organization, other than as necessary to fulfill your request, e.g. to ship an order. Unless you ask us not to, we may contact you via email in the future to tell you about specials, new products or services, or changes to this privacy policy."),i.createElement("h2",null,"Your Access to and Control Over Information"),i.createElement("p",null,"You may opt out of any future contacts from us at any time. We take precautions to protect your information. When you submit sensitive information via the website, your information is protected both online and offline. If you feel that we are not abiding by this privacy policy, you should contact us immediately via email at ",i.createElement("a",{href:"mailto:wcr-externalaffairs@univ.ox.ac.uk"},"wcr-externalaffairs@univ.ox.ac.uk"))),i.createElement("div",{className:"u-block"},i.createElement("h1",null," Accessibility "),i.createElement("p",null,"The website aims to comply with the ",i.createElement("a",{href:"https://www.w3.org/TR/WCAG21/"},"Web Content Accessibility Guidelines (WCAG) 2.1"),". Since the website is under development, there may be content which are not accessible. If you need information on this website in a different format like accessible PDF, large print, easy read, audio recording or braille or if you find any accessibility issues, then please contact us at ",i.createElement("a",{href:"mailto:wcr-externalaffairs@univ.ox.ac.uk"},"wcr-externalaffairs@univ.ox.ac.uk"),". We will consider your request and get back to you within seven days."),i.createElement("p",null,"The Equality and Human Rights Commission (EHRC) is responsible for enforcing the Public Sector Bodies (Websites and Mobile Applications) (No. 2) Accessibility Regulations 2018 (the ‘accessibility regulations’). If you’re not happy with how we respond to your complaint, contact the ",i.createElement("a",{href:"https://www.equalityadvisoryservice.com/"},"Equality Advisory and Support Service (EASS)"),".")))};n(82559);const F=n.p+"ade0b78bccb28004998a.png",_=function(){return i.createElement(i.Fragment,null,i.createElement(O,{backgroundImage:F,bgColorKey:"black",title:"Home",content:"Welcome to the University College WCR"}))};n(32982);const T=n.p+"8aaecdc91bdd3319c844.jpg",L=function(){return i.createElement(i.Fragment,null,i.createElement(O,{backgroundImage:T,title:"About",content:"About"}),i.createElement(w,{title:"The graduate community of University College, Oxford."},i.createElement("p",null,"The main objectives of the common room are:"),i.createElement("ul",null,i.createElement("li",null,"promoting the interests and welfare of WCR members; "),i.createElement("li",null,"organising social activities among WCR members; and"),i.createElement("li",null,"representing the interests of WCR members to the Governing Body of the College."))),i.createElement(w,{title:"Our Building"},i.createElement("p",null,"The WCR room is situated on the first floor of the Mitchell building, right behind the Old library. It is a regular meeting-point for the graduate community here at Univ. A whole suite of events are held in the WCR from drinks receptions, art socials, discussion groups and our graduate bops. The building is John Fryman of the Architects Design Partnership, and is named after Sir Harold Mitchell, an Old Member of the College, who paid for its construction.")),i.createElement(w,null,i.createElement(x,{display:[{key:1,isLocal:!1,des:"Click here to learn more about the history of WCR building!",link:"https://www.univ.ox.ac.uk/news/a-history-of-the-mitchell-building/"}]})),i.createElement(w,null,i.createElement("h2",null,"General Facilities"),i.createElement("ul",null,i.createElement("li",null,"Comfortable lounge with plenty of seatings."),i.createElement("li",null,"Fully equipped kitchen, including a coffee machine, available for use by any member of the graduate body free of charge."),i.createElement("li",null,"Pigeon holes (or “pidges”) that hosts all mail correspondence sent to you during your stay in college accommodation."),i.createElement("li",null,"Two gender-neutral bathrooms.")),i.createElement("h2",null,"Entertainment"),i.createElement("ul",null,i.createElement("li",null,"Foosball (table football)"),i.createElement("li",null,"Table tennis table"),i.createElement("li",null,"Newspaper and magazine subscriptions"),i.createElement("li",null,"A large selection of books and DVDs, kindly donated to the common room by alumni and the previous Master"),i.createElement("li",null,"Music and TV facilities"))))};n(82880);const N=n.p+"8a56c0b3af35469580dc.jpg";function j(e,t){return function(){return e.apply(t,arguments)}}n(2707),n(88674),n(72443),n(39341),n(73706),n(10408),n(30489),n(68304);const{toString:R}=Object.prototype,{getPrototypeOf:M}=Object,z=(D=Object.create(null),e=>{const t=R.call(e);return D[t]||(D[t]=t.slice(8,-1).toLowerCase())});var D;const U=e=>(e=e.toLowerCase(),t=>z(t)===e),W=e=>t=>typeof t===e,{isArray:q}=Array,V=W("undefined"),H=U("ArrayBuffer"),Q=W("string"),Y=W("function"),G=W("number"),$=e=>null!==e&&"object"==typeof e,X=e=>{if("object"!==z(e))return!1;const t=M(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},K=U("Date"),J=U("File"),Z=U("Blob"),ee=U("FileList"),te=U("URLSearchParams");function ne(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,o;if("object"!=typeof e&&(e=[e]),q(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),i=o.length;let a;for(r=0;r<i;r++)a=o[r],t.call(null,e[a],a,e)}}function re(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,o=n.length;for(;o-- >0;)if(r=n[o],t===r.toLowerCase())return r;return null}const oe="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,ie=e=>!V(e)&&e!==oe,ae=(le="undefined"!=typeof Uint8Array&&M(Uint8Array),e=>le&&e instanceof le);var le;const ue=U("HTMLFormElement"),ce=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),se=U("RegExp"),fe=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};ne(n,((n,o)=>{let i;!1!==(i=t(n,o,e))&&(r[o]=i||n)})),Object.defineProperties(e,r)},de="abcdefghijklmnopqrstuvwxyz",pe="0123456789",he={DIGIT:pe,ALPHA:de,ALPHA_DIGIT:de+de.toUpperCase()+pe},me=U("AsyncFunction"),ge={isArray:q,isArrayBuffer:H,isBuffer:function(e){return null!==e&&!V(e)&&null!==e.constructor&&!V(e.constructor)&&Y(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||Y(e.append)&&("formdata"===(t=z(e))||"object"===t&&Y(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&H(e.buffer),t},isString:Q,isNumber:G,isBoolean:e=>!0===e||!1===e,isObject:$,isPlainObject:X,isUndefined:V,isDate:K,isFile:J,isBlob:Z,isRegExp:se,isFunction:Y,isStream:e=>$(e)&&Y(e.pipe),isURLSearchParams:te,isTypedArray:ae,isFileList:ee,forEach:ne,merge:function e(){const{caseless:t}=ie(this)&&this||{},n={},r=(r,o)=>{const i=t&&re(n,o)||o;X(n[i])&&X(r)?n[i]=e(n[i],r):X(r)?n[i]=e({},r):q(r)?n[i]=r.slice():n[i]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&ne(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(ne(t,((t,r)=>{n&&Y(t)?e[r]=j(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let o,i,a;const l={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),i=o.length;i-- >0;)a=o[i],r&&!r(a,e,t)||l[a]||(t[a]=e[a],l[a]=!0);e=!1!==n&&M(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:z,kindOfTest:U,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(q(e))return e;let t=e.length;if(!G(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:ue,hasOwnProperty:ce,hasOwnProp:ce,reduceDescriptors:fe,freezeMethods:e=>{fe(e,((t,n)=>{if(Y(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];Y(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return q(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:re,global:oe,isContextDefined:ie,ALPHABET:he,generateString:(e=16,t=he.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&Y(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if($(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const o=q(e)?[]:{};return ne(e,((e,t)=>{const i=n(e,r+1);!V(i)&&(o[t]=i)})),t[r]=void 0,o}}return e};return n(e,0)},isAsyncFn:me,isThenable:e=>e&&($(e)||Y(e))&&Y(e.then)&&Y(e.catch)};function ve(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}ge.inherits(ve,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:ge.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const ye=ve.prototype,Ae={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{Ae[e]={value:e}})),Object.defineProperties(ve,Ae),Object.defineProperty(ye,"isAxiosError",{value:!0}),ve.from=(e,t,n,r,o,i)=>{const a=Object.create(ye);return ge.toFlatObject(e,a,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),ve.call(a,e.message,t,n,r,o),a.cause=e,a.name=e.name,i&&Object.assign(a,i),a};const be=ve;function we(e){return ge.isPlainObject(e)||ge.isArray(e)}function xe(e){return ge.endsWith(e,"[]")?e.slice(0,-2):e}function Ee(e,t,n){return e?e.concat(t).map((function(e,t){return e=xe(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const Ce=ge.toFlatObject(ge,{},null,(function(e){return/^is[A-Z]/.test(e)})),ke=function(e,t,n){if(!ge.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=ge.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!ge.isUndefined(t[e])}))).metaTokens,o=n.visitor||c,i=n.dots,a=n.indexes,l=(n.Blob||"undefined"!=typeof Blob&&Blob)&&ge.isSpecCompliantForm(t);if(!ge.isFunction(o))throw new TypeError("visitor must be a function");function u(e){if(null===e)return"";if(ge.isDate(e))return e.toISOString();if(!l&&ge.isBlob(e))throw new be("Blob is not supported. Use a Buffer instead.");return ge.isArrayBuffer(e)||ge.isTypedArray(e)?l&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function c(e,n,o){let l=e;if(e&&!o&&"object"==typeof e)if(ge.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(ge.isArray(e)&&function(e){return ge.isArray(e)&&!e.some(we)}(e)||(ge.isFileList(e)||ge.endsWith(n,"[]"))&&(l=ge.toArray(e)))return n=xe(n),l.forEach((function(e,r){!ge.isUndefined(e)&&null!==e&&t.append(!0===a?Ee([n],r,i):null===a?n:n+"[]",u(e))})),!1;return!!we(e)||(t.append(Ee(o,n,i),u(e)),!1)}const s=[],f=Object.assign(Ce,{defaultVisitor:c,convertValue:u,isVisitable:we});if(!ge.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!ge.isUndefined(n)){if(-1!==s.indexOf(n))throw Error("Circular reference detected in "+r.join("."));s.push(n),ge.forEach(n,(function(n,i){!0===(!(ge.isUndefined(n)||null===n)&&o.call(t,n,ge.isString(i)?i.trim():i,r,f))&&e(n,r?r.concat(i):[i])})),s.pop()}}(e),t};function Se(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function Be(e,t){this._pairs=[],e&&ke(e,this,t)}const Ie=Be.prototype;Ie.append=function(e,t){this._pairs.push([e,t])},Ie.toString=function(e){const t=e?function(t){return e.call(this,t,Se)}:Se;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const Oe=Be;function Pe(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Fe(e,t,n){if(!t)return e;const r=n&&n.encode||Pe,o=n&&n.serialize;let i;if(i=o?o(t,n):ge.isURLSearchParams(t)?t.toString():new Oe(t,n).toString(r),i){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}const _e=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){ge.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},Te={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Le={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:Oe,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},isStandardBrowserEnv:(()=>{let e;return("undefined"==typeof navigator||"ReactNative"!==(e=navigator.product)&&"NativeScript"!==e&&"NS"!==e)&&"undefined"!=typeof window&&"undefined"!=typeof document})(),isStandardBrowserWebWorkerEnv:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,protocols:["http","https","file","blob","url","data"]},Ne=function(e){function t(e,n,r,o){let i=e[o++];const a=Number.isFinite(+i),l=o>=e.length;return i=!i&&ge.isArray(r)?r.length:i,l?(ge.hasOwnProp(r,i)?r[i]=[r[i],n]:r[i]=n,!a):(r[i]&&ge.isObject(r[i])||(r[i]=[]),t(e,n,r[i],o)&&ge.isArray(r[i])&&(r[i]=function(e){const t={},n=Object.keys(e);let r;const o=n.length;let i;for(r=0;r<o;r++)i=n[r],t[i]=e[i];return t}(r[i])),!a)}if(ge.isFormData(e)&&ge.isFunction(e.entries)){const n={};return ge.forEachEntry(e,((e,r)=>{t(function(e){return ge.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},je={transitional:Te,adapter:Le.isNode?"http":"xhr",transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,o=ge.isObject(e);if(o&&ge.isHTMLForm(e)&&(e=new FormData(e)),ge.isFormData(e))return r&&r?JSON.stringify(Ne(e)):e;if(ge.isArrayBuffer(e)||ge.isBuffer(e)||ge.isStream(e)||ge.isFile(e)||ge.isBlob(e))return e;if(ge.isArrayBufferView(e))return e.buffer;if(ge.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let i;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return ke(e,new Le.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return Le.isNode&&ge.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((i=ge.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return ke(i?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||r?(t.setContentType("application/json",!1),function(e,t,n){if(ge.isString(e))try{return(0,JSON.parse)(e),ge.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||je.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&ge.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw be.from(e,be.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Le.classes.FormData,Blob:Le.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};ge.forEach(["delete","get","head","post","put","patch"],(e=>{je.headers[e]={}}));const Re=je,Me=ge.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),ze=Symbol("internals");function De(e){return e&&String(e).trim().toLowerCase()}function Ue(e){return!1===e||null==e?e:ge.isArray(e)?e.map(Ue):String(e)}function We(e,t,n,r,o){return ge.isFunction(r)?r.call(this,t,n):(o&&(t=n),ge.isString(t)?ge.isString(r)?-1!==t.indexOf(r):ge.isRegExp(r)?r.test(t):void 0:void 0)}class qe{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function o(e,t,n){const o=De(t);if(!o)throw new Error("header name must be a non-empty string");const i=ge.findKey(r,o);(!i||void 0===r[i]||!0===n||void 0===n&&!1!==r[i])&&(r[i||t]=Ue(e))}const i=(e,t)=>ge.forEach(e,((e,n)=>o(e,n,t)));return ge.isPlainObject(e)||e instanceof this.constructor?i(e,t):ge.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?i((e=>{const t={};let n,r,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),n=e.substring(0,o).trim().toLowerCase(),r=e.substring(o+1).trim(),!n||t[n]&&Me[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t):null!=e&&o(t,e,n),this}get(e,t){if(e=De(e)){const n=ge.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(ge.isFunction(t))return t.call(this,e,n);if(ge.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=De(e)){const n=ge.findKey(this,e);return!(!n||void 0===this[n]||t&&!We(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function o(e){if(e=De(e)){const o=ge.findKey(n,e);!o||t&&!We(0,n[o],o,t)||(delete n[o],r=!0)}}return ge.isArray(e)?e.forEach(o):o(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const o=t[n];e&&!We(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}normalize(e){const t=this,n={};return ge.forEach(this,((r,o)=>{const i=ge.findKey(n,o);if(i)return t[i]=Ue(r),void delete t[o];const a=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(o):String(o).trim();a!==o&&delete t[o],t[a]=Ue(r),n[a]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return ge.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&ge.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[ze]=this[ze]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=De(e);t[r]||(function(e,t){const n=ge.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})}))}(n,e),t[r]=!0)}return ge.isArray(e)?e.forEach(r):r(e),this}}qe.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),ge.reduceDescriptors(qe.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),ge.freezeMethods(qe);const Ve=qe;function He(e,t){const n=this||Re,r=t||n,o=Ve.from(r.headers);let i=r.data;return ge.forEach(e,(function(e){i=e.call(n,i,o.normalize(),t?t.status:void 0)})),o.normalize(),i}function Qe(e){return!(!e||!e.__CANCEL__)}function Ye(e,t,n){be.call(this,null==e?"canceled":e,be.ERR_CANCELED,t,n),this.name="CanceledError"}ge.inherits(Ye,be,{__CANCEL__:!0});const Ge=Ye,$e=Le.isStandardBrowserEnv?{write:function(e,t,n,r,o,i){const a=[];a.push(e+"="+encodeURIComponent(t)),ge.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),ge.isString(r)&&a.push("path="+r),ge.isString(o)&&a.push("domain="+o),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}};function Xe(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const Ke=Le.isStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=ge.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function Je(e,t){let n=0;const r=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o,i=0,a=0;return t=void 0!==t?t:1e3,function(l){const u=Date.now(),c=r[a];o||(o=u),n[i]=l,r[i]=u;let s=a,f=0;for(;s!==i;)f+=n[s++],s%=e;if(i=(i+1)%e,i===a&&(a=(a+1)%e),u-o<t)return;const d=c&&u-c;return d?Math.round(1e3*f/d):void 0}}(50,250);return o=>{const i=o.loaded,a=o.lengthComputable?o.total:void 0,l=i-n,u=r(l);n=i;const c={loaded:i,total:a,progress:a?i/a:void 0,bytes:l,rate:u||void 0,estimated:u&&a&&i<=a?(a-i)/u:void 0,event:o};c[t?"download":"upload"]=!0,e(c)}}const Ze={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let r=e.data;const o=Ve.from(e.headers).normalize(),i=e.responseType;let a;function l(){e.cancelToken&&e.cancelToken.unsubscribe(a),e.signal&&e.signal.removeEventListener("abort",a)}ge.isFormData(r)&&(Le.isStandardBrowserEnv||Le.isStandardBrowserWebWorkerEnv?o.setContentType(!1):o.setContentType("multipart/form-data;",!1));let u=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(t+":"+n))}const c=Xe(e.baseURL,e.url);function s(){if(!u)return;const r=Ve.from("getAllResponseHeaders"in u&&u.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new be("Request failed with status code "+n.status,[be.ERR_BAD_REQUEST,be.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),l()}),(function(e){n(e),l()}),{data:i&&"text"!==i&&"json"!==i?u.response:u.responseText,status:u.status,statusText:u.statusText,headers:r,config:e,request:u}),u=null}if(u.open(e.method.toUpperCase(),Fe(c,e.params,e.paramsSerializer),!0),u.timeout=e.timeout,"onloadend"in u?u.onloadend=s:u.onreadystatechange=function(){u&&4===u.readyState&&(0!==u.status||u.responseURL&&0===u.responseURL.indexOf("file:"))&&setTimeout(s)},u.onabort=function(){u&&(n(new be("Request aborted",be.ECONNABORTED,e,u)),u=null)},u.onerror=function(){n(new be("Network Error",be.ERR_NETWORK,e,u)),u=null},u.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||Te;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new be(t,r.clarifyTimeoutError?be.ETIMEDOUT:be.ECONNABORTED,e,u)),u=null},Le.isStandardBrowserEnv){const t=(e.withCredentials||Ke(c))&&e.xsrfCookieName&&$e.read(e.xsrfCookieName);t&&o.set(e.xsrfHeaderName,t)}void 0===r&&o.setContentType(null),"setRequestHeader"in u&&ge.forEach(o.toJSON(),(function(e,t){u.setRequestHeader(t,e)})),ge.isUndefined(e.withCredentials)||(u.withCredentials=!!e.withCredentials),i&&"json"!==i&&(u.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&u.addEventListener("progress",Je(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&u.upload&&u.upload.addEventListener("progress",Je(e.onUploadProgress)),(e.cancelToken||e.signal)&&(a=t=>{u&&(n(!t||t.type?new Ge(null,e,u):t),u.abort(),u=null)},e.cancelToken&&e.cancelToken.subscribe(a),e.signal&&(e.signal.aborted?a():e.signal.addEventListener("abort",a)));const f=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(c);f&&-1===Le.protocols.indexOf(f)?n(new be("Unsupported protocol "+f+":",be.ERR_BAD_REQUEST,e)):u.send(r||null)}))}};ge.forEach(Ze,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const et={getAdapter:e=>{e=ge.isArray(e)?e:[e];const{length:t}=e;let n,r;for(let o=0;o<t&&(n=e[o],!(r=ge.isString(n)?Ze[n.toLowerCase()]:n));o++);if(!r){if(!1===r)throw new be(`Adapter ${n} is not supported by the environment`,"ERR_NOT_SUPPORT");throw new Error(ge.hasOwnProp(Ze,n)?`Adapter '${n}' is not available in the build`:`Unknown adapter '${n}'`)}if(!ge.isFunction(r))throw new TypeError("adapter is not a function");return r},adapters:Ze};function tt(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Ge(null,e)}function nt(e){return tt(e),e.headers=Ve.from(e.headers),e.data=He.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),et.getAdapter(e.adapter||Re.adapter)(e).then((function(t){return tt(e),t.data=He.call(e,e.transformResponse,t),t.headers=Ve.from(t.headers),t}),(function(t){return Qe(t)||(tt(e),t&&t.response&&(t.response.data=He.call(e,e.transformResponse,t.response),t.response.headers=Ve.from(t.response.headers))),Promise.reject(t)}))}const rt=e=>e instanceof Ve?e.toJSON():e;function ot(e,t){t=t||{};const n={};function r(e,t,n){return ge.isPlainObject(e)&&ge.isPlainObject(t)?ge.merge.call({caseless:n},e,t):ge.isPlainObject(t)?ge.merge({},t):ge.isArray(t)?t.slice():t}function o(e,t,n){return ge.isUndefined(t)?ge.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function i(e,t){if(!ge.isUndefined(t))return r(void 0,t)}function a(e,t){return ge.isUndefined(t)?ge.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function l(n,o,i){return i in t?r(n,o):i in e?r(void 0,n):void 0}const u={url:i,method:i,data:i,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:l,headers:(e,t)=>o(rt(e),rt(t),!0)};return ge.forEach(Object.keys(Object.assign({},e,t)),(function(r){const i=u[r]||o,a=i(e[r],t[r],r);ge.isUndefined(a)&&i!==l||(n[r]=a)})),n}const it={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{it[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const at={};it.transitional=function(e,t,n){function r(e,t){return"[Axios v1.5.0] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,i)=>{if(!1===e)throw new be(r(o," has been removed"+(t?" in "+t:"")),be.ERR_DEPRECATED);return t&&!at[o]&&(at[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,i)}};const lt={assertOptions:function(e,t,n){if("object"!=typeof e)throw new be("options must be an object",be.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const i=r[o],a=t[i];if(a){const t=e[i],n=void 0===t||a(t,i,e);if(!0!==n)throw new be("option "+i+" must be "+n,be.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new be("Unknown option "+i,be.ERR_BAD_OPTION)}},validators:it},ut=lt.validators;class ct{constructor(e){this.defaults=e,this.interceptors={request:new _e,response:new _e}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=ot(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:o}=t;void 0!==n&&lt.assertOptions(n,{silentJSONParsing:ut.transitional(ut.boolean),forcedJSONParsing:ut.transitional(ut.boolean),clarifyTimeoutError:ut.transitional(ut.boolean)},!1),null!=r&&(ge.isFunction(r)?t.paramsSerializer={serialize:r}:lt.assertOptions(r,{encode:ut.function,serialize:ut.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let i=o&&ge.merge(o.common,o[t.method]);o&&ge.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=Ve.concat(i,o);const a=[];let l=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(l=l&&e.synchronous,a.unshift(e.fulfilled,e.rejected))}));const u=[];let c;this.interceptors.response.forEach((function(e){u.push(e.fulfilled,e.rejected)}));let s,f=0;if(!l){const e=[nt.bind(this),void 0];for(e.unshift.apply(e,a),e.push.apply(e,u),s=e.length,c=Promise.resolve(t);f<s;)c=c.then(e[f++],e[f++]);return c}s=a.length;let d=t;for(f=0;f<s;){const e=a[f++],t=a[f++];try{d=e(d)}catch(e){t.call(this,e);break}}try{c=nt.call(this,d)}catch(e){return Promise.reject(e)}for(f=0,s=u.length;f<s;)c=c.then(u[f++],u[f++]);return c}getUri(e){return Fe(Xe((e=ot(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}ge.forEach(["delete","get","head","options"],(function(e){ct.prototype[e]=function(t,n){return this.request(ot(n||{},{method:e,url:t,data:(n||{}).data}))}})),ge.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(ot(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}ct.prototype[e]=t(),ct.prototype[e+"Form"]=t(!0)}));const st=ct;class ft{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,o){n.reason||(n.reason=new Ge(e,r,o),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new ft((function(t){e=t})),cancel:e}}}const dt=ft,pt={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(pt).forEach((([e,t])=>{pt[t]=e}));const ht=pt,mt=function e(t){const n=new st(t),r=j(st.prototype.request,n);return ge.extend(r,st.prototype,n,{allOwnKeys:!0}),ge.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(ot(t,n))},r}(Re);mt.Axios=st,mt.CanceledError=Ge,mt.CancelToken=dt,mt.isCancel=Qe,mt.VERSION="1.5.0",mt.toFormData=ke,mt.AxiosError=be,mt.Cancel=mt.CanceledError,mt.all=function(e){return Promise.all(e)},mt.spread=function(e){return function(t){return e.apply(null,t)}},mt.isAxiosError=function(e){return ge.isObject(e)&&!0===e.isAxiosError},mt.mergeConfig=ot,mt.AxiosHeaders=Ve,mt.formToJSON=e=>Ne(ge.isHTMLForm(e)?new FormData(e):e),mt.getAdapter=et.getAdapter,mt.HttpStatusCode=ht,mt.default=mt;const gt=mt;function vt(e){return vt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},vt(e)}function yt(){yt=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var i=t&&t.prototype instanceof d?t:d,a=Object.create(i.prototype),l=new k(o||[]);return r(a,"_invoke",{value:w(e,n,l)}),a}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,i,(function(){return this}));var g=Object.getPrototypeOf,v=g&&g(g(S([])));v&&v!==t&&n.call(v,i)&&(m=v);var y=h.prototype=d.prototype=Object.create(m);function A(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function b(e,t){function o(r,i,a,l){var u=s(e[r],e,i);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==vt(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,a,l)}),(function(e){o("throw",e,a,l)})):t.resolve(f).then((function(e){c.value=e,a(c)}),(function(e){return o("throw",e,a,l)}))}l(u.arg)}var i;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return i=i?i.then(r,r):r()}})}function w(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var l=x(a,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function x(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,x(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function k(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function S(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:B}}function B(){return{value:void 0,done:!0}}return p.prototype=h,r(y,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},A(b.prototype),u(b.prototype,a,(function(){return this})),e.AsyncIterator=b,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new b(c(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},A(y),u(y,l,"Generator"),u(y,i,(function(){return this})),u(y,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=S,k.prototype={constructor:k,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var l=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(l&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function At(e,t,n,r,o,i,a){try{var l=e[i](a),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function bt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n(67312);const wt=function(){var e,t,n=(e=(0,i.useState)([]),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return bt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?bt(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=n[0],o=n[1],a=function(){var e,t=(e=yt().mark((function e(){var t;return yt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=3,gt.get("".concat("http://localhost:1337/api","/users?populate[role][fields][0]=type&filters[role][type][$eq]=wcr_committee_member&populate[profilePicture][fields][0]=url")).then(console.log(t)).catch((function(e){console.log(e)}));case 3:t=e.sent,o(t.data);case 5:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){At(i,r,o,a,l,"next",e)}function l(e){At(i,r,o,a,l,"throw",e)}a(void 0)}))});return function(){return t.apply(this,arguments)}}();(0,i.useEffect)((function(){a()}),[]);var l=function(){setTimeout((function(){window.scrollTo({top:0,behavior:"smooth"})}),50)};return i.createElement("div",{className:"CurrentComm-container"},r.sort((function(e,t){return e.orderOfDisplay>t.orderOfDisplay})).map((function(e){var t;return t=e.profilePicture?'url("http://localhost:1337'.concat(e.profilePicture.url,'")'):'linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)), url("'.concat(h,'")'),i.createElement("div",{key:e.id,className:"CurrentComm-single"},i.createElement(f.rU,{to:"/profile/".concat(e.username),onClick:l},i.createElement("div",{className:"CurrentComm-background",style:{backgroundImage:t}}," "),i.createElement("div",{className:"CurrentComm-about"},i.createElement("div",{className:"name"}," ",i.createElement("b",null,e.preferredName)," (",e.preferredPronoun,") "),i.createElement("div",{className:"post"}," ",e.wcrRole," "))))})))};function xt(e){return xt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xt(e)}function Et(){Et=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var i=t&&t.prototype instanceof d?t:d,a=Object.create(i.prototype),l=new k(o||[]);return r(a,"_invoke",{value:w(e,n,l)}),a}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,i,(function(){return this}));var g=Object.getPrototypeOf,v=g&&g(g(S([])));v&&v!==t&&n.call(v,i)&&(m=v);var y=h.prototype=d.prototype=Object.create(m);function A(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function b(e,t){function o(r,i,a,l){var u=s(e[r],e,i);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==xt(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,a,l)}),(function(e){o("throw",e,a,l)})):t.resolve(f).then((function(e){c.value=e,a(c)}),(function(e){return o("throw",e,a,l)}))}l(u.arg)}var i;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return i=i?i.then(r,r):r()}})}function w(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var l=x(a,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function x(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,x(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function k(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function S(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:B}}function B(){return{value:void 0,done:!0}}return p.prototype=h,r(y,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},A(b.prototype),u(b.prototype,a,(function(){return this})),e.AsyncIterator=b,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new b(c(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},A(y),u(y,l,"Generator"),u(y,i,(function(){return this})),u(y,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=S,k.prototype={constructor:k,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var l=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(l&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function Ct(e,t,n,r,o,i,a){try{var l=e[i](a),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function kt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n(41105);const St=function(){var e,t,n=(e=(0,i.useState)([]),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return kt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?kt(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=n[0],o=n[1],a=function(){var e,t=(e=Et().mark((function e(){var t;return Et().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=3,gt.get("".concat("http://localhost:1337/api","/users?populate[role][fields][0]=type&filters[role][type][$eq]=previous_wcr_committee_member&populate[profilePicture][fields][0]=url")).then(console.log(t)).catch((function(e){console.log(e)}));case 3:t=e.sent,o(t.data);case 5:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Ct(i,r,o,a,l,"next",e)}function l(e){Ct(i,r,o,a,l,"throw",e)}a(void 0)}))});return function(){return t.apply(this,arguments)}}();(0,i.useEffect)((function(){a()}),[]);var l=function(){setTimeout((function(){window.scrollTo({top:0,behavior:"smooth"})}),50)};return i.createElement("div",{className:"CurrentComm-container"},r.sort((function(e,t){return e.preferredName>t.preferredName})).map((function(e){var t;return t=e.profilePicture?'url("http://localhost:1337'.concat(e.profilePicture.url,'")'):'linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)), url("'.concat(h,'")'),i.createElement("div",{key:e.id,className:"CurrentComm-single"},i.createElement(f.rU,{to:"/profile/".concat(e.username),onClick:l},i.createElement("div",{className:"CurrentComm-background",style:{backgroundImage:t}}," "),i.createElement("div",{className:"CurrentComm-about"},i.createElement("div",{className:"name"}," ",i.createElement("b",null,e.preferredName)," (",e.preferredPronoun,") "))))})))},Bt=function(){return i.createElement(i.Fragment,null,i.createElement(O,{backgroundImage:N,title:"About",content:"Governance"}),i.createElement(w,{title:"Governance"},i.createElement("p",null,"The WCR is governed by a committee of graduate students, who pay their timeless efforts to serve, advocate for and represent the interests of the graduate student body within the College and the University. They also run exciting social events (including BOPs), providing welfare support and promoting environmental awareness. The WCR committee binds with the constitution, and is elected at the end of the Hilary (second) Term each year."),i.createElement(x,{display:[{key:1,isLocal:!1,des:"Click here to view the constitution",link:m}]})),i.createElement(w,{title:"Current Committee Members (2023/24)"},i.createElement(wt,null)),i.createElement(w,{title:"Past Committee Members"},i.createElement("p",null,"So that they aren't lost in the depths of time, and they can be remembered for all the work they've done..."),i.createElement(St,null)))};n(71437),n(50356);const It=function(e){var t=e.title,n=e.opacity,r=e.aspect,o=e.isBlack,a=e.src,l=e.des,u=e.suppressArrow,c=e.linkdes,s=e.isLocal,d=e.altText,p=255,h="black";return!0===o&&(p=0,h="white"),i.createElement("div",null,i.createElement("div",{style:{backgroundImage:"linear-gradient(rgba(".concat(p,", ").concat(p,", ").concat(p,", ").concat(1-n||0,"), \n          rgba(").concat(p,",").concat(p,",").concat(p,", ").concat(1-n||0,")), \n          url(").concat(a,")")},className:"image aspect-".concat(r||"default"),title:d},l?i.createElement(i.Fragment,null,s?i.createElement(f.rU,{to:c,style:{color:h},className:"Image-link",onClick:function(){window.scrollTo({top:0})}},i.createElement("h2",{className:"u-nomargin"}," ",t," ")):i.createElement("a",{href:c,style:{color:h},className:"Image-link"},i.createElement("h2",{className:"u-nomargin"}," ",t," "))," "):i.createElement("h2",{style:{color:h},className:"u-nomargin"}," ",t," ")),l?i.createElement("div",{className:"u-nomargin u-margin-top"},u?i.createElement(i.Fragment,null," "):i.createElement(i.Fragment,null,"▶ "),l," "):i.createElement(i.Fragment,null," "))},Ot=function(){return i.createElement(i.Fragment,null,i.createElement(O,{backgroundImage:T,title:"Welfare",content:"Welfare"}),i.createElement(w,{title:"We believe in welfare!"},i.createElement("p",null,"The WCR is committed to contribute to your welfare during your time at the University College. Managing your welfare means you are able to cope with all aspects of your life, and make the most of your potential to play a full parts in your community (WHO '18), hence also helping our graduate community to strive.")),i.createElement(w,{title:"What do we offer?"},i.createElement("p",null,"We believe that most problems are easier to manage at an earlier stage. Our long-standing partnerships with the college, university and Student Union (SU) enable us to proactively address your welfare concerns."),i.createElement("h2",null,"Who can I talk to?"),i.createElement("p",null,"Please do refer to our Welfare FAQ for specific concerns. In general, you are encouraged to reach out to your college advisors, as well as any college faculties/staff that are responsible to specific welfare issues. If you do not feel comfortable to directly contacting the college, then please contact any one of us below:"),i.createElement("div",{className:"u-gridPic-2"},i.createElement(It,{title:"WCR Welfare committee members",src:"",opacity:.5,isBlack:Boolean(!0),aspect:"16/9",suppressArrow:Boolean(!1),des:"The WCR welfare committee members, including the welfare officer and other representatives, could act as your first contact for your welfare concerns.",linkdes:"/governance",isLocal:Boolean(!0)}),i.createElement(It,{title:"Peer supporters",src:"",opacity:.5,isBlack:Boolean(!0),aspect:"16/9",suppressArrow:Boolean(!1),des:"They are well-trained students to address your specific welfare concerns.",linkdes:"#",isLocal:Boolean(!0)})),i.createElement(x,{display:[{key:1,isLocal:!0,des:"Welfare FAQ",link:"/welfareFAQ"},{key:2,isLocal:!1,des:"Official welfare booklet",link:"https://intranet.univ.ox.ac.uk/sites/default/files/Student%20Welfare%20Full%20Guide%2003%20Jan%202023.pdf"}]})),i.createElement(w,{title:"Welfare activities"},i.createElement("p",null,"The WCR regularly holds activities to help you to adopt your university life, as well as to relax whenever you feel stressed with academic/life concerns."),i.createElement("div",{className:"u-gridPic-3"},i.createElement(It,{title:"Welfare week",src:"",opacity:.5,isBlack:Boolean(!0),aspect:"16/9",suppressArrow:Boolean(!1),des:"They are the 5th weeks during every term, when students suffered the  so called mid-term/5th week blue due to the academic stresses. Therefore,  the WCR and the college organise different activities during the week to  help you relax.",linkdes:"/governance",isLocal:Boolean(!0)}),i.createElement(It,{title:"Yoga sessions",src:"",opacity:.5,isBlack:Boolean(!0),aspect:"16/9",suppressArrow:Boolean(!1),des:"We have the weekly Yoga sessions, guided by the professionals, to  help you relax by enjoying Yoga.",linkdes:"#",isLocal:Boolean(!0)}),i.createElement(It,{title:"Weekly socials",src:"",opacity:.5,isBlack:Boolean(!0),aspect:"16/9",suppressArrow:Boolean(!1),des:"The weekly social is an excellent opportunity for you to connect  with your graduates and enjoy some delicious wine and cheese.",linkdes:"#",isLocal:Boolean(!0)}))))};n(76622);const Pt=[{name:"General Emergency",description:i.createElement(i.Fragment,null,i.createElement("p",null,"You should inform the lodge any emergencies happening within the college, or the central security office if the emergency is happening in other areas of the university office. The porters/securities have been trained to provide initial assessments and could help with further reporting if necessary."),i.createElement("p",null,i.createElement("b",null,"The lodge is open from 7am to 11pm, but you can contact the head porter / central security office at any time."))),stageOne:[i.createElement(i.Fragment,null,"Visit the lodge in person (7am to 11pm, tel: (0)7775 764117 if the porters are away)"),i.createElement(i.Fragment,null,"Head porter (24 hr, tel: (0)1865 276602, extension: 76602, email: ",i.createElement("a",{href:"mailto:lodge@univ.ox.ac.uk"},"lodge@univ.ox.ac.uk"),")"),i.createElement(i.Fragment,null,"Junior Deans (Night)")],stageTwo:[i.createElement(i.Fragment,null,"Security office, tel: (0)1865 272944")],stageThree:[i.createElement(i.Fragment,null,"Thames Valley Police, tel: 999")]},{name:"Suicidal Thoughts",description:i.createElement(i.Fragment,null,"You are not alone! Our welfare team and other parties are here to provide confidential, non-judgmental supports. A vast majority of people who have felt suicidal go on to live fulfilling lives!"),stageOne:[i.createElement(i.Fragment,null,"Chaplain and Welfare Fellow: Rev. Dr. Andrew Gregory ",i.createElement("a",{href:"mailto:andrew.gregory@univ.ox.ac.uk"},"andrew.gregory@univ.ox.ac.uk")),i.createElement(i.Fragment,null,"WCR Welfare committee members")],stageTwo:[i.createElement(i.Fragment,null,"University counselling service"),i.createElement(i.Fragment,null,"Student Union")],stageThree:[i.createElement(i.Fragment,null,"Your general practice (GP)"),i.createElement(i.Fragment,null,"Oxford Nightline"),i.createElement(i.Fragment,null,"Samaritans"),i.createElement(i.Fragment,null,"Papyrus"),i.createElement(i.Fragment,null,"CALM")]},{name:"(Sexual) Harassment",description:i.createElement(i.Fragment,null,i.createElement("p",null,"The college takes any harassments seriously. Please make the college harassment officers as your first points of contact if you have experienced any harassment within the college, or would like to seek general advice. You can also talk to any other members of the welfare team / external parties if necessary. Please also refer to the ",i.createElement("a",{href:"http://bit.ly/univpolicy"},"college code")," for any general harassments."),i.createElement("p",null,i.createElement("b",null,"Should you wish to report your harassment to a police, please consider retaining evidence of harassments by following the following guidance."))),stageOne:[i.createElement(i.Fragment,null,i.createElement("div",null,"Harassment officers:"),i.createElement("ul",null,i.createElement("li",null,"Dr. Trevor Sharp ",i.createElement("a",{href:"mailto:Trevor.Sharp@univ.ox.ac.uk"},"Trevor.Sharp@univ.ox.ac.uk"),","),i.createElement("li",null,"Cameron Ott ",i.createElement("a",{href:"mailto:Cameron.Ott@univ.ox.ac.uk"},"Cameron.Ott@univ.ox.ac.uk"),","),i.createElement("li",null,"Prof. Sarah Harper ",i.createElement("a",{href:"mailto:Sarah.Harper@univ.ox.ac.uk"},"Sarah.Harper@univ.ox.ac.uk"))))],stageTwo:[i.createElement(i.Fragment,null,"University counselling service"),i.createElement(i.Fragment,null,"Student Union")],stageThree:[i.createElement(i.Fragment,null,"Your general practice"),i.createElement(i.Fragment,null,"Oxford Nightline"),i.createElement(i.Fragment,null,"Samaritans"),i.createElement(i.Fragment,null,"Papyrus"),i.createElement(i.Fragment,null,"CALM")]}];function Ft(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const _t=function(){var e,t,n=(e=(0,i.useState)("General Emergency"),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ft(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ft(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=n[0],o=n[1],a=Pt.find((function(e){return e.name==r}));return i.createElement(i.Fragment,null,i.createElement(O,{backgroundImage:T,title:"Welfare",content:"Welfare FAQ"}),i.createElement(w,{title:"Who can I get in touch?"},i.createElement("p",null,"We believe that most problems are easier to manage at an earlier stage. Our long-standing partnerships with the college, university and Student Union (SU) enable us to proactively address your welfare concerns. We classify the contacts into three categories:"),i.createElement("div",{className:"u-gridPic-3"},i.createElement("div",{className:"u-alert-green"},i.createElement("h3",null,"Stage 1: College level"),i.createElement("p",{className:"u-nomargin"},"The college faculties, staff and the common rooms form a strong supporting network to address your welfare concerns. The WCR Welfare committee members and the Peer Supporters could act as your first point of contact, if you do not wish to contact the college faculties/staff.")),i.createElement("div",{className:"u-alert-yellow"},i.createElement("h3",null,"Stage 2: University level"),i.createElement("p",{className:"u-nomargin"},"Both the University governance and the Student Union (SU) provide welfare supports, should the college fails to address your welfare concerns.")),i.createElement("div",{className:"u-alert-red"},i.createElement("h3",null,"Stage 3: Independent supports"),i.createElement("p",{className:"u-nomargin"},"This is when it is more appropriate for you to seek supports independent from the University.")))),i.createElement(w,{title:"Emergency Concerns"},i.createElement("p",null,"We are sorry to hear that you are experiencing emergency situation. It is important for you to act swiftly. Please click on one of the following tabs for contact information."),i.createElement("ul",{className:"welfarefaq-emergency-menu-container"},Pt.map((function(e,t){var n="#fbbd1a";return e.name!=r&&(n="#fff3cd"),i.createElement("li",{className:"welfarefaq-emergency-menu-item"},i.createElement("button",{style:{backgroundColor:n},onClick:function(){o(e.name)}},e.name))}))),i.createElement("div",{style:{marginTop:16}},a.description),i.createElement("div",{className:"u-gridPic-3"},i.createElement("div",{className:"u-alert-green"},i.createElement("h3",null,"Stage 1: College level"),i.createElement("ul",null,a.stageOne.map((function(e,t){return i.createElement("li",null,e)})))),i.createElement("div",{className:"u-alert-yellow"},i.createElement("h3",null,"Stage 2: University level"),i.createElement("ul",null,a.stageTwo.map((function(e,t){return i.createElement("li",null,e)})))),i.createElement("div",{className:"u-alert-red"},i.createElement("h3",null,"Stage 3: Independent supports"),i.createElement("ul",null,a.stageThree.map((function(e,t){return i.createElement("li",null,e)})))))),i.createElement(w,{title:"Non-emergency concerns"},i.createElement("p",null,"Please click on one of the following tabs for contact information.")))},Tt=function(){return i.createElement(i.Fragment,null,i.createElement(O,{backgroundImage:T,title:"Welfare",content:"Who's Who?"}),i.createElement(w,{title:"Content in progress"},i.createElement("p",null,"The WCR is committed to contribute to your welfare during your time at the University College. Managing your welfare means you are able to cope with all aspects of your life, and make the most of your potential to play a full parts in your community (WHO '18), hence also helping our graduate community to strive.")))};n(60977),n(30131);const Lt=function(e){var t=e.attributes;return i.createElement(i.Fragment,null,i.createElement("div",null,i.createElement("b",null,t.title," "),t.nature.data&&t.nature.data.map((function(e){var t=[{key:"Academic Related",bkgColor:"rgb(229,52,44)",textColor:"#FFF"},{key:"Chaplaincy",bkgColor:"#1a6f2b",textColor:"#FFF"},{key:"College Development",bkgColor:"rgb(122,178,221)",textColor:"rgb(0,59,121)"},{key:"Freshers",bkgColor:"rgb(251,189,26)",textColor:"rgb(0,59,121)"},{key:"Music",bkgColor:"rgb(255,87,51)",textColor:"#FFF"},{key:"Other",bkgColor:"rgb(69,69,69)",textColor:"#FFF"},{key:"Social",bkgColor:"rgb(148,18,118)",textColor:"#FFF"},{key:"Sports",bkgColor:"rgb(0,59,121)",textColor:"#FFF"},{key:"Welfare and Access",bkgColor:"#539728",textColor:"#FFF"}];return i.createElement("span",{key:e.id,className:"eventshortdes-nature",style:{backgroundColor:t.find((function(t){return t.key===e.attributes.name})).bkgColor,color:t.find((function(t){return t.key===e.attributes.name})).textColor}},e.attributes.name)}))),i.createElement("div",{style:{fontSize:"0.95rem"}},i.createElement("p",{className:"u-nomargin"},"Time: ",new Date(t.startDate).toLocaleDateString(void 0,{weekday:"short",year:"numeric",month:"short",day:"numeric",hour:"2-digit",hour12:!1,minute:"2-digit"})),t.secondVenue?i.createElement(i.Fragment,null,i.createElement("p",{className:"u-nomargin"},"First Venue: ",t.firstVenue),i.createElement("p",{className:"u-nomargin"},"Second Venue: ",t.secondVenue)):i.createElement("p",{className:"u-nomargin"},"Venue: ",t.firstVenue)))};function Nt(e){return Nt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Nt(e)}function jt(){jt=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var i=t&&t.prototype instanceof d?t:d,a=Object.create(i.prototype),l=new k(o||[]);return r(a,"_invoke",{value:w(e,n,l)}),a}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,i,(function(){return this}));var g=Object.getPrototypeOf,v=g&&g(g(S([])));v&&v!==t&&n.call(v,i)&&(m=v);var y=h.prototype=d.prototype=Object.create(m);function A(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function b(e,t){function o(r,i,a,l){var u=s(e[r],e,i);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==Nt(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,a,l)}),(function(e){o("throw",e,a,l)})):t.resolve(f).then((function(e){c.value=e,a(c)}),(function(e){return o("throw",e,a,l)}))}l(u.arg)}var i;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return i=i?i.then(r,r):r()}})}function w(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var l=x(a,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function x(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,x(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function k(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function S(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:B}}function B(){return{value:void 0,done:!0}}return p.prototype=h,r(y,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},A(b.prototype),u(b.prototype,a,(function(){return this})),e.AsyncIterator=b,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new b(c(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},A(y),u(y,l,"Generator"),u(y,i,(function(){return this})),u(y,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=S,k.prototype={constructor:k,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var l=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(l&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function Rt(e,t,n,r,o,i,a){try{var l=e[i](a),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Mt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const zt=function(){var e,t,n=(e=(0,i.useState)([]),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Mt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Mt(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=n[0],o=n[1],a=function(){var e,t=(e=jt().mark((function e(){var t;return jt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,gt.get("http://localhost:1337/api/events?sort=startDate&pagination[pageSize]=200&populate=banner&populate=mainContact&populate=nature");case 2:t=e.sent,o(t.data.data);case 4:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Rt(i,r,o,a,l,"next",e)}function l(e){Rt(i,r,o,a,l,"throw",e)}a(void 0)}))});return function(){return t.apply(this,arguments)}}();return(0,i.useEffect)((function(){a()}),[]),i.createElement(i.Fragment,null,i.createElement("div",{className:"u-block"},i.createElement("h1",{className:"u-section-title"},"Events"),i.createElement("p",null,"Please search below upcoming events happening in the college."),i.createElement("div",{className:"u-gridPic-3"},r.map((function(e){return i.createElement(It,{key:e.id,title:"",src:e.attributes.banner.data?"http://localhost:1337"+e.attributes.banner.data.attributes.url:"",opacity:e.attributes.banner.data?1:.5,isBlack:Boolean(!0),aspect:"16/9",suppressArrow:Boolean(!0),des:i.createElement(Lt,{attributes:e.attributes}),linkdes:"/whatson/".concat(e.id),isLocal:Boolean(!0),altText:e.attributes.banner.data?e.attributes.banner.data.attributes.alternativeText:""})})))))},Dt=/[ \t\n\f\r]/g;function Ut(e){return""===e.replace(Dt,"")}class Wt{constructor(e,t,n){this.property=e,this.normal=t,n&&(this.space=n)}}function qt(e,t){const n={},r={};let o=-1;for(;++o<e.length;)Object.assign(n,e[o].property),Object.assign(r,e[o].normal);return new Wt(n,r,t)}function Vt(e){return e.toLowerCase()}Wt.prototype.property={},Wt.prototype.normal={},Wt.prototype.space=null;class Ht{constructor(e,t){this.property=e,this.attribute=t}}Ht.prototype.space=null,Ht.prototype.boolean=!1,Ht.prototype.booleanish=!1,Ht.prototype.overloadedBoolean=!1,Ht.prototype.number=!1,Ht.prototype.commaSeparated=!1,Ht.prototype.spaceSeparated=!1,Ht.prototype.commaOrSpaceSeparated=!1,Ht.prototype.mustUseProperty=!1,Ht.prototype.defined=!1;let Qt=0;const Yt=en(),Gt=en(),$t=en(),Xt=en(),Kt=en(),Jt=en(),Zt=en();function en(){return 2**++Qt}const tn=Object.keys(r);class nn extends Ht{constructor(e,t,n,o){let i=-1;if(super(e,t),rn(this,"space",o),"number"==typeof n)for(;++i<tn.length;){const e=tn[i];rn(this,tn[i],(n&r[e])===r[e])}}}function rn(e,t,n){n&&(e[t]=n)}nn.prototype.defined=!0;const on={}.hasOwnProperty;function an(e){const t={},n={};let r;for(r in e.properties)if(on.call(e.properties,r)){const o=e.properties[r],i=new nn(r,e.transform(e.attributes||{},r),o,e.space);e.mustUseProperty&&e.mustUseProperty.includes(r)&&(i.mustUseProperty=!0),t[r]=i,n[Vt(r)]=r,n[Vt(i.attribute)]=r}return new Wt(t,n,e.space)}const ln=an({space:"xlink",transform:(e,t)=>"xlink:"+t.slice(5).toLowerCase(),properties:{xLinkActuate:null,xLinkArcRole:null,xLinkHref:null,xLinkRole:null,xLinkShow:null,xLinkTitle:null,xLinkType:null}}),un=an({space:"xml",transform:(e,t)=>"xml:"+t.slice(3).toLowerCase(),properties:{xmlLang:null,xmlBase:null,xmlSpace:null}});function cn(e,t){return t in e?e[t]:t}function sn(e,t){return cn(e,t.toLowerCase())}const fn=an({space:"xmlns",attributes:{xmlnsxlink:"xmlns:xlink"},transform:sn,properties:{xmlns:null,xmlnsXLink:null}}),dn=an({transform:(e,t)=>"role"===t?t:"aria-"+t.slice(4).toLowerCase(),properties:{ariaActiveDescendant:null,ariaAtomic:Gt,ariaAutoComplete:null,ariaBusy:Gt,ariaChecked:Gt,ariaColCount:Xt,ariaColIndex:Xt,ariaColSpan:Xt,ariaControls:Kt,ariaCurrent:null,ariaDescribedBy:Kt,ariaDetails:null,ariaDisabled:Gt,ariaDropEffect:Kt,ariaErrorMessage:null,ariaExpanded:Gt,ariaFlowTo:Kt,ariaGrabbed:Gt,ariaHasPopup:null,ariaHidden:Gt,ariaInvalid:null,ariaKeyShortcuts:null,ariaLabel:null,ariaLabelledBy:Kt,ariaLevel:Xt,ariaLive:null,ariaModal:Gt,ariaMultiLine:Gt,ariaMultiSelectable:Gt,ariaOrientation:null,ariaOwns:Kt,ariaPlaceholder:null,ariaPosInSet:Xt,ariaPressed:Gt,ariaReadOnly:Gt,ariaRelevant:null,ariaRequired:Gt,ariaRoleDescription:Kt,ariaRowCount:Xt,ariaRowIndex:Xt,ariaRowSpan:Xt,ariaSelected:Gt,ariaSetSize:Xt,ariaSort:null,ariaValueMax:Xt,ariaValueMin:Xt,ariaValueNow:Xt,ariaValueText:null,role:null}}),pn=an({space:"html",attributes:{acceptcharset:"accept-charset",classname:"class",htmlfor:"for",httpequiv:"http-equiv"},transform:sn,mustUseProperty:["checked","multiple","muted","selected"],properties:{abbr:null,accept:Jt,acceptCharset:Kt,accessKey:Kt,action:null,allow:null,allowFullScreen:Yt,allowPaymentRequest:Yt,allowUserMedia:Yt,alt:null,as:null,async:Yt,autoCapitalize:null,autoComplete:Kt,autoFocus:Yt,autoPlay:Yt,blocking:Kt,capture:Yt,charSet:null,checked:Yt,cite:null,className:Kt,cols:Xt,colSpan:null,content:null,contentEditable:Gt,controls:Yt,controlsList:Kt,coords:Xt|Jt,crossOrigin:null,data:null,dateTime:null,decoding:null,default:Yt,defer:Yt,dir:null,dirName:null,disabled:Yt,download:$t,draggable:Gt,encType:null,enterKeyHint:null,fetchPriority:null,form:null,formAction:null,formEncType:null,formMethod:null,formNoValidate:Yt,formTarget:null,headers:Kt,height:Xt,hidden:Yt,high:Xt,href:null,hrefLang:null,htmlFor:Kt,httpEquiv:Kt,id:null,imageSizes:null,imageSrcSet:null,inert:Yt,inputMode:null,integrity:null,is:null,isMap:Yt,itemId:null,itemProp:Kt,itemRef:Kt,itemScope:Yt,itemType:Kt,kind:null,label:null,lang:null,language:null,list:null,loading:null,loop:Yt,low:Xt,manifest:null,max:null,maxLength:Xt,media:null,method:null,min:null,minLength:Xt,multiple:Yt,muted:Yt,name:null,nonce:null,noModule:Yt,noValidate:Yt,onAbort:null,onAfterPrint:null,onAuxClick:null,onBeforeMatch:null,onBeforePrint:null,onBeforeUnload:null,onBlur:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onContextLost:null,onContextMenu:null,onContextRestored:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnded:null,onError:null,onFocus:null,onFormData:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLanguageChange:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadEnd:null,onLoadStart:null,onMessage:null,onMessageError:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRejectionHandled:null,onReset:null,onResize:null,onScroll:null,onScrollEnd:null,onSecurityPolicyViolation:null,onSeeked:null,onSeeking:null,onSelect:null,onSlotChange:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnhandledRejection:null,onUnload:null,onVolumeChange:null,onWaiting:null,onWheel:null,open:Yt,optimum:Xt,pattern:null,ping:Kt,placeholder:null,playsInline:Yt,popover:null,popoverTarget:null,popoverTargetAction:null,poster:null,preload:null,readOnly:Yt,referrerPolicy:null,rel:Kt,required:Yt,reversed:Yt,rows:Xt,rowSpan:Xt,sandbox:Kt,scope:null,scoped:Yt,seamless:Yt,selected:Yt,shape:null,size:Xt,sizes:null,slot:null,span:Xt,spellCheck:Gt,src:null,srcDoc:null,srcLang:null,srcSet:null,start:Xt,step:null,style:null,tabIndex:Xt,target:null,title:null,translate:null,type:null,typeMustMatch:Yt,useMap:null,value:Gt,width:Xt,wrap:null,align:null,aLink:null,archive:Kt,axis:null,background:null,bgColor:null,border:Xt,borderColor:null,bottomMargin:Xt,cellPadding:null,cellSpacing:null,char:null,charOff:null,classId:null,clear:null,code:null,codeBase:null,codeType:null,color:null,compact:Yt,declare:Yt,event:null,face:null,frame:null,frameBorder:null,hSpace:Xt,leftMargin:Xt,link:null,longDesc:null,lowSrc:null,marginHeight:Xt,marginWidth:Xt,noResize:Yt,noHref:Yt,noShade:Yt,noWrap:Yt,object:null,profile:null,prompt:null,rev:null,rightMargin:Xt,rules:null,scheme:null,scrolling:Gt,standby:null,summary:null,text:null,topMargin:Xt,valueType:null,version:null,vAlign:null,vLink:null,vSpace:Xt,allowTransparency:null,autoCorrect:null,autoSave:null,disablePictureInPicture:Yt,disableRemotePlayback:Yt,prefix:null,property:null,results:Xt,security:null,unselectable:null}}),hn=an({space:"svg",attributes:{accentHeight:"accent-height",alignmentBaseline:"alignment-baseline",arabicForm:"arabic-form",baselineShift:"baseline-shift",capHeight:"cap-height",className:"class",clipPath:"clip-path",clipRule:"clip-rule",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",crossOrigin:"crossorigin",dataType:"datatype",dominantBaseline:"dominant-baseline",enableBackground:"enable-background",fillOpacity:"fill-opacity",fillRule:"fill-rule",floodColor:"flood-color",floodOpacity:"flood-opacity",fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",hrefLang:"hreflang",horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",horizOriginY:"horiz-origin-y",imageRendering:"image-rendering",letterSpacing:"letter-spacing",lightingColor:"lighting-color",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",navDown:"nav-down",navDownLeft:"nav-down-left",navDownRight:"nav-down-right",navLeft:"nav-left",navNext:"nav-next",navPrev:"nav-prev",navRight:"nav-right",navUp:"nav-up",navUpLeft:"nav-up-left",navUpRight:"nav-up-right",onAbort:"onabort",onActivate:"onactivate",onAfterPrint:"onafterprint",onBeforePrint:"onbeforeprint",onBegin:"onbegin",onCancel:"oncancel",onCanPlay:"oncanplay",onCanPlayThrough:"oncanplaythrough",onChange:"onchange",onClick:"onclick",onClose:"onclose",onCopy:"oncopy",onCueChange:"oncuechange",onCut:"oncut",onDblClick:"ondblclick",onDrag:"ondrag",onDragEnd:"ondragend",onDragEnter:"ondragenter",onDragExit:"ondragexit",onDragLeave:"ondragleave",onDragOver:"ondragover",onDragStart:"ondragstart",onDrop:"ondrop",onDurationChange:"ondurationchange",onEmptied:"onemptied",onEnd:"onend",onEnded:"onended",onError:"onerror",onFocus:"onfocus",onFocusIn:"onfocusin",onFocusOut:"onfocusout",onHashChange:"onhashchange",onInput:"oninput",onInvalid:"oninvalid",onKeyDown:"onkeydown",onKeyPress:"onkeypress",onKeyUp:"onkeyup",onLoad:"onload",onLoadedData:"onloadeddata",onLoadedMetadata:"onloadedmetadata",onLoadStart:"onloadstart",onMessage:"onmessage",onMouseDown:"onmousedown",onMouseEnter:"onmouseenter",onMouseLeave:"onmouseleave",onMouseMove:"onmousemove",onMouseOut:"onmouseout",onMouseOver:"onmouseover",onMouseUp:"onmouseup",onMouseWheel:"onmousewheel",onOffline:"onoffline",onOnline:"ononline",onPageHide:"onpagehide",onPageShow:"onpageshow",onPaste:"onpaste",onPause:"onpause",onPlay:"onplay",onPlaying:"onplaying",onPopState:"onpopstate",onProgress:"onprogress",onRateChange:"onratechange",onRepeat:"onrepeat",onReset:"onreset",onResize:"onresize",onScroll:"onscroll",onSeeked:"onseeked",onSeeking:"onseeking",onSelect:"onselect",onShow:"onshow",onStalled:"onstalled",onStorage:"onstorage",onSubmit:"onsubmit",onSuspend:"onsuspend",onTimeUpdate:"ontimeupdate",onToggle:"ontoggle",onUnload:"onunload",onVolumeChange:"onvolumechange",onWaiting:"onwaiting",onZoom:"onzoom",overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pointerEvents:"pointer-events",referrerPolicy:"referrerpolicy",renderingIntent:"rendering-intent",shapeRendering:"shape-rendering",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",strokeDashArray:"stroke-dasharray",strokeDashOffset:"stroke-dashoffset",strokeLineCap:"stroke-linecap",strokeLineJoin:"stroke-linejoin",strokeMiterLimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",tabIndex:"tabindex",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",transformOrigin:"transform-origin",typeOf:"typeof",underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",vectorEffect:"vector-effect",vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",wordSpacing:"word-spacing",writingMode:"writing-mode",xHeight:"x-height",playbackOrder:"playbackorder",timelineBegin:"timelinebegin"},transform:cn,properties:{about:Zt,accentHeight:Xt,accumulate:null,additive:null,alignmentBaseline:null,alphabetic:Xt,amplitude:Xt,arabicForm:null,ascent:Xt,attributeName:null,attributeType:null,azimuth:Xt,bandwidth:null,baselineShift:null,baseFrequency:null,baseProfile:null,bbox:null,begin:null,bias:Xt,by:null,calcMode:null,capHeight:Xt,className:Kt,clip:null,clipPath:null,clipPathUnits:null,clipRule:null,color:null,colorInterpolation:null,colorInterpolationFilters:null,colorProfile:null,colorRendering:null,content:null,contentScriptType:null,contentStyleType:null,crossOrigin:null,cursor:null,cx:null,cy:null,d:null,dataType:null,defaultAction:null,descent:Xt,diffuseConstant:Xt,direction:null,display:null,dur:null,divisor:Xt,dominantBaseline:null,download:Yt,dx:null,dy:null,edgeMode:null,editable:null,elevation:Xt,enableBackground:null,end:null,event:null,exponent:Xt,externalResourcesRequired:null,fill:null,fillOpacity:Xt,fillRule:null,filter:null,filterRes:null,filterUnits:null,floodColor:null,floodOpacity:null,focusable:null,focusHighlight:null,fontFamily:null,fontSize:null,fontSizeAdjust:null,fontStretch:null,fontStyle:null,fontVariant:null,fontWeight:null,format:null,fr:null,from:null,fx:null,fy:null,g1:Jt,g2:Jt,glyphName:Jt,glyphOrientationHorizontal:null,glyphOrientationVertical:null,glyphRef:null,gradientTransform:null,gradientUnits:null,handler:null,hanging:Xt,hatchContentUnits:null,hatchUnits:null,height:null,href:null,hrefLang:null,horizAdvX:Xt,horizOriginX:Xt,horizOriginY:Xt,id:null,ideographic:Xt,imageRendering:null,initialVisibility:null,in:null,in2:null,intercept:Xt,k:Xt,k1:Xt,k2:Xt,k3:Xt,k4:Xt,kernelMatrix:Zt,kernelUnitLength:null,keyPoints:null,keySplines:null,keyTimes:null,kerning:null,lang:null,lengthAdjust:null,letterSpacing:null,lightingColor:null,limitingConeAngle:Xt,local:null,markerEnd:null,markerMid:null,markerStart:null,markerHeight:null,markerUnits:null,markerWidth:null,mask:null,maskContentUnits:null,maskUnits:null,mathematical:null,max:null,media:null,mediaCharacterEncoding:null,mediaContentEncodings:null,mediaSize:Xt,mediaTime:null,method:null,min:null,mode:null,name:null,navDown:null,navDownLeft:null,navDownRight:null,navLeft:null,navNext:null,navPrev:null,navRight:null,navUp:null,navUpLeft:null,navUpRight:null,numOctaves:null,observer:null,offset:null,onAbort:null,onActivate:null,onAfterPrint:null,onBeforePrint:null,onBegin:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnd:null,onEnded:null,onError:null,onFocus:null,onFocusIn:null,onFocusOut:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadStart:null,onMessage:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onMouseWheel:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRepeat:null,onReset:null,onResize:null,onScroll:null,onSeeked:null,onSeeking:null,onSelect:null,onShow:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnload:null,onVolumeChange:null,onWaiting:null,onZoom:null,opacity:null,operator:null,order:null,orient:null,orientation:null,origin:null,overflow:null,overlay:null,overlinePosition:Xt,overlineThickness:Xt,paintOrder:null,panose1:null,path:null,pathLength:Xt,patternContentUnits:null,patternTransform:null,patternUnits:null,phase:null,ping:Kt,pitch:null,playbackOrder:null,pointerEvents:null,points:null,pointsAtX:Xt,pointsAtY:Xt,pointsAtZ:Xt,preserveAlpha:null,preserveAspectRatio:null,primitiveUnits:null,propagate:null,property:Zt,r:null,radius:null,referrerPolicy:null,refX:null,refY:null,rel:Zt,rev:Zt,renderingIntent:null,repeatCount:null,repeatDur:null,requiredExtensions:Zt,requiredFeatures:Zt,requiredFonts:Zt,requiredFormats:Zt,resource:null,restart:null,result:null,rotate:null,rx:null,ry:null,scale:null,seed:null,shapeRendering:null,side:null,slope:null,snapshotTime:null,specularConstant:Xt,specularExponent:Xt,spreadMethod:null,spacing:null,startOffset:null,stdDeviation:null,stemh:null,stemv:null,stitchTiles:null,stopColor:null,stopOpacity:null,strikethroughPosition:Xt,strikethroughThickness:Xt,string:null,stroke:null,strokeDashArray:Zt,strokeDashOffset:null,strokeLineCap:null,strokeLineJoin:null,strokeMiterLimit:Xt,strokeOpacity:Xt,strokeWidth:null,style:null,surfaceScale:Xt,syncBehavior:null,syncBehaviorDefault:null,syncMaster:null,syncTolerance:null,syncToleranceDefault:null,systemLanguage:Zt,tabIndex:Xt,tableValues:null,target:null,targetX:Xt,targetY:Xt,textAnchor:null,textDecoration:null,textRendering:null,textLength:null,timelineBegin:null,title:null,transformBehavior:null,type:null,typeOf:Zt,to:null,transform:null,transformOrigin:null,u1:null,u2:null,underlinePosition:Xt,underlineThickness:Xt,unicode:null,unicodeBidi:null,unicodeRange:null,unitsPerEm:Xt,values:null,vAlphabetic:Xt,vMathematical:Xt,vectorEffect:null,vHanging:Xt,vIdeographic:Xt,version:null,vertAdvY:Xt,vertOriginX:Xt,vertOriginY:Xt,viewBox:null,viewTarget:null,visibility:null,width:null,widths:null,wordSpacing:null,writingMode:null,x:null,x1:null,x2:null,xChannelSelector:null,xHeight:Xt,y:null,y1:null,y2:null,yChannelSelector:null,z:null,zoomAndPan:null}}),mn=qt([un,ln,fn,dn,pn],"html"),gn=qt([un,ln,fn,dn,hn],"svg"),vn=/^data[-\w.:]+$/i,yn=/-[a-z]/g,An=/[A-Z]/g;function bn(e){return"-"+e.toLowerCase()}function wn(e){return e.charAt(1).toUpperCase()}const xn={classId:"classID",dataType:"datatype",itemId:"itemID",strokeDashArray:"strokeDasharray",strokeDashOffset:"strokeDashoffset",strokeLineCap:"strokeLinecap",strokeLineJoin:"strokeLinejoin",strokeMiterLimit:"strokeMiterlimit",typeOf:"typeof",xLinkActuate:"xlinkActuate",xLinkArcRole:"xlinkArcrole",xLinkHref:"xlinkHref",xLinkRole:"xlinkRole",xLinkShow:"xlinkShow",xLinkTitle:"xlinkTitle",xLinkType:"xlinkType",xmlnsXLink:"xmlnsXlink"},En=n(57848),Cn=Sn("end"),kn=Sn("start");function Sn(e){return function(t){const n=t&&t.position&&t.position[e]||{};if("number"==typeof n.line&&n.line>0&&"number"==typeof n.column&&n.column>0)return{line:n.line,column:n.column,offset:"number"==typeof n.offset&&n.offset>-1?n.offset:void 0}}}function Bn(e){return e&&"object"==typeof e?"position"in e||"type"in e?On(e.position):"start"in e||"end"in e?On(e):"line"in e||"column"in e?In(e):"":""}function In(e){return Pn(e&&e.line)+":"+Pn(e&&e.column)}function On(e){return In(e&&e.start)+"-"+In(e&&e.end)}function Pn(e){return e&&"number"==typeof e?e:1}class Fn extends Error{constructor(e,t,n){super(),"string"==typeof t&&(n=t,t=void 0);let r="",o={},i=!1;if(t&&(o="line"in t&&"column"in t||"start"in t&&"end"in t?{place:t}:"type"in t?{ancestors:[t],place:t.position}:{...t}),"string"==typeof e?r=e:!o.cause&&e&&(i=!0,r=e.message,o.cause=e),!o.ruleId&&!o.source&&"string"==typeof n){const e=n.indexOf(":");-1===e?o.ruleId=n:(o.source=n.slice(0,e),o.ruleId=n.slice(e+1))}if(!o.place&&o.ancestors&&o.ancestors){const e=o.ancestors[o.ancestors.length-1];e&&(o.place=e.position)}const a=o.place&&"start"in o.place?o.place.start:o.place;this.ancestors=o.ancestors||void 0,this.cause=o.cause||void 0,this.column=a?a.column:void 0,this.fatal=void 0,this.file,this.message=r,this.line=a?a.line:void 0,this.name=Bn(o.place)||"1:1",this.place=o.place||void 0,this.reason=this.message,this.ruleId=o.ruleId||void 0,this.source=o.source||void 0,this.stack=i&&o.cause&&"string"==typeof o.cause.stack?o.cause.stack:"",this.actual,this.expected,this.note,this.url}}Fn.prototype.file="",Fn.prototype.name="",Fn.prototype.reason="",Fn.prototype.message="",Fn.prototype.stack="",Fn.prototype.column=void 0,Fn.prototype.line=void 0,Fn.prototype.ancestors=void 0,Fn.prototype.cause=void 0,Fn.prototype.fatal=void 0,Fn.prototype.place=void 0,Fn.prototype.ruleId=void 0,Fn.prototype.source=void 0;const _n={}.hasOwnProperty,Tn=new Map,Ln=/[A-Z]/g,Nn=/-([a-z])/g,jn=new Set(["table","tbody","thead","tfoot","tr"]),Rn=new Set(["td","th"]);function Mn(e,t){if(!t||void 0===t.Fragment)throw new TypeError("Expected `Fragment` in options");const n=t.filePath||void 0;let r;if(t.development){if("function"!=typeof t.jsxDEV)throw new TypeError("Expected `jsxDEV` in options when `development: true`");r=function(e,t){return function(n,r,o,i){const a=Array.isArray(o.children),l=kn(n);return t(r,o,i,a,{columnNumber:l?l.column-1:void 0,fileName:e,lineNumber:l?l.line:void 0},void 0)}}(n,t.jsxDEV)}else{if("function"!=typeof t.jsx)throw new TypeError("Expected `jsx` in production options");if("function"!=typeof t.jsxs)throw new TypeError("Expected `jsxs` in production options");o=t.jsx,i=t.jsxs,r=function(e,t,n,r){const a=Array.isArray(n.children)?i:o;return r?a(t,n,r):a(t,n)}}var o,i;const a={Fragment:t.Fragment,ancestors:[],components:t.components||{},create:r,elementAttributeNameCase:t.elementAttributeNameCase||"react",filePath:n,ignoreInvalidStyle:t.ignoreInvalidStyle||!1,passKeys:!1!==t.passKeys,passNode:t.passNode||!1,schema:"svg"===t.space?gn:mn,stylePropertyNameCase:t.stylePropertyNameCase||"dom",tableCellAlignToStyle:!1!==t.tableCellAlignToStyle},l=zn(a,e,void 0);return l&&"string"!=typeof l?l:a.create(e,a.Fragment,{children:l||void 0},void 0)}function zn(e,t,n){if("element"===t.type||"root"===t.type){const r=e.schema;let o=r;"element"===t.type&&"svg"===t.tagName.toLowerCase()&&"html"===r.space&&(o=gn,e.schema=o),e.ancestors.push(t);let i=function(e,t){const n=[];let r=-1;const o=e.passKeys?new Map:Tn;for(;++r<t.children.length;){const i=t.children[r];let a;if(e.passKeys&&"element"===i.type){const e=o.get(i.tagName)||0;a=i.tagName+"-"+e,o.set(i.tagName,e+1)}const l=zn(e,i,a);void 0!==l&&n.push(l)}return n}(e,t);const a=function(e,t){const n=t[t.length-1],r={};let o;if("properties"in n&&n.properties){let i;for(o in n.properties)if("children"!==o&&_n.call(n.properties,o)){const a=Dn(e,t,o,n.properties[o]);if(a){const[t,o]=a;e.tableCellAlignToStyle&&"align"===t&&"string"==typeof o&&Rn.has(n.tagName)?i=o:r[t]=o}}i&&((r.style||(r.style={}))["css"===e.stylePropertyNameCase?"text-align":"textAlign"]=i)}return r}(e,e.ancestors);let l=e.Fragment;if(e.ancestors.pop(),"element"===t.type)if(i&&jn.has(t.tagName)&&(i=i.filter((function(e){return"string"!=typeof e||!("object"==typeof(t=e)?"text"===t.type&&Ut(t.value):Ut(t));var t}))),_n.call(e.components,t.tagName)){const n=t.tagName;l=e.components[n],"string"!=typeof l&&l!==e.Fragment&&e.passNode&&(a.node=t)}else l=t.tagName;if(i.length>0){const e=i.length>1?i:i[0];e&&(a.children=e)}return e.schema=r,e.create(t,l,a,n)}if("text"===t.type)return t.value}function Dn(e,t,n,r){const o=function(e,t){const n=Vt(t);let r=t,o=Ht;if(n in e.normal)return e.property[e.normal[n]];if(n.length>4&&"data"===n.slice(0,4)&&vn.test(t)){if("-"===t.charAt(4)){const e=t.slice(5).replace(yn,wn);r="data"+e.charAt(0).toUpperCase()+e.slice(1)}else{const e=t.slice(4);if(!yn.test(e)){let n=e.replace(An,bn);"-"!==n.charAt(0)&&(n="-"+n),t="data"+n}}o=nn}return new o(r,t)}(e.schema,n);if(!(null==r||"number"==typeof r&&Number.isNaN(r))){if(Array.isArray(r)&&(r=o.commaSeparated?function(e,t){const n={};return(""===e[e.length-1]?[...e,""]:e).join((n.padRight?" ":"")+","+(!1===n.padLeft?"":" ")).trim()}(r):r.join(" ").trim()),"style"===o.property){let n="object"==typeof r?r:function(e,t,n){const r={};try{En(n,(function(e,t){let n=e;"--"!==n.slice(0,2)&&("-ms-"===n.slice(0,4)&&(n="ms-"+n.slice(4)),n=n.replace(Nn,Wn)),r[n]=t}))}catch(n){if(!e.ignoreInvalidStyle){const r=new Fn("Cannot parse `style` attribute",{ancestors:t,cause:n,source:"hast-util-to-jsx-runtime",ruleId:"style"});throw r.file=e.filePath||void 0,r.url="https://github.com/syntax-tree/hast-util-to-jsx-runtime#cannot-parse-style-attribute",r}}return r}(e,t,String(r));return"css"===e.stylePropertyNameCase&&(n=function(e){const t={};let n;for(n in e)_n.call(e,n)&&(t[Un(n)]=e[n]);return t}(n)),["style",n]}return["react"===e.elementAttributeNameCase&&o.space?xn[o.property]||o.property:o.attribute,r]}}function Un(e){let t=e.replace(Ln,qn);return"ms-"===t.slice(0,3)&&(t="-"+t),t}function Wn(e,t){return t.toUpperCase()}function qn(e){return"-"+e.toLowerCase()}const Vn={action:["form"],cite:["blockquote","del","ins","q"],data:["object"],formAction:["button","input"],href:["a","area","base","link"],icon:["menuitem"],itemId:null,manifest:["html"],ping:["a","area"],poster:["video"],src:["audio","embed","iframe","img","input","script","source","track","video"]},Hn=rr(/\p{P}/u),Qn=rr(/[A-Za-z]/),Yn=rr(/[\dA-Za-z]/),Gn=rr(/[#-'*+\--9=?A-Z^-~]/);function $n(e){return null!==e&&(e<32||127===e)}const Xn=rr(/\d/),Kn=rr(/[\dA-Fa-f]/),Jn=rr(/[!-/:-@[-`{-~]/);function Zn(e){return null!==e&&e<-2}function er(e){return null!==e&&(e<0||32===e)}function tr(e){return-2===e||-1===e||32===e}const nr=rr(/\s/);function rr(e){return function(t){return null!==t&&t>-1&&e.test(String.fromCharCode(t))}}const or={'"':"quot","&":"amp","<":"lt",">":"gt"};function ir(e){const t=[];let n=-1,r=0,o=0;for(;++n<e.length;){const i=e.charCodeAt(n);let a="";if(37===i&&Yn(e.charCodeAt(n+1))&&Yn(e.charCodeAt(n+2)))o=2;else if(i<128)/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(i))||(a=String.fromCharCode(i));else if(i>55295&&i<57344){const t=e.charCodeAt(n+1);i<56320&&t>56319&&t<57344?(a=String.fromCharCode(i,t),o=1):a="�"}else a=String.fromCharCode(i);a&&(t.push(e.slice(r,n),encodeURIComponent(a)),r=n+o+1,a=""),o&&(n+=o,o=0)}return t.join("")+e.slice(r)}var ar=n(85893);const lr={};function ur(e,t,n){if(function(e){return Boolean(e&&"object"==typeof e)}(e)){if("value"in e)return"html"!==e.type||n?e.value:"";if(t&&"alt"in e&&e.alt)return e.alt;if("children"in e)return cr(e.children,t,n)}return Array.isArray(e)?cr(e,t,n):""}function cr(e,t,n){const r=[];let o=-1;for(;++o<e.length;)r[o]=ur(e[o],t,n);return r.join("")}function sr(e,t,n,r){const o=e.length;let i,a=0;if(t=t<0?-t>o?0:o+t:t>o?o:t,n=n>0?n:0,r.length<1e4)i=Array.from(r),i.unshift(t,n),e.splice(...i);else for(n&&e.splice(t,n);a<r.length;)i=r.slice(a,a+1e4),i.unshift(t,0),e.splice(...i),a+=1e4,t+=1e4}function fr(e,t){return e.length>0?(sr(e,e.length,0,t),e):t}function dr(e){const t={};let n,r,o,i,a,l,u,c=-1;for(;++c<e.length;){for(;c in t;)c=t[c];if(n=e[c],c&&"chunkFlow"===n[1].type&&"listItemPrefix"===e[c-1][1].type&&(l=n[1]._tokenizer.events,o=0,o<l.length&&"lineEndingBlank"===l[o][1].type&&(o+=2),o<l.length&&"content"===l[o][1].type))for(;++o<l.length&&"content"!==l[o][1].type;)"chunkText"===l[o][1].type&&(l[o][1]._isInFirstContentOfListItem=!0,o++);if("enter"===n[0])n[1].contentType&&(Object.assign(t,pr(e,c)),c=t[c],u=!0);else if(n[1]._container){for(o=c,r=void 0;o--&&(i=e[o],"lineEnding"===i[1].type||"lineEndingBlank"===i[1].type);)"enter"===i[0]&&(r&&(e[r][1].type="lineEndingBlank"),i[1].type="lineEnding",r=o);r&&(n[1].end=Object.assign({},e[r][1].start),a=e.slice(r,c),a.unshift(n),sr(e,r,c-r+1,a))}}return!u}function pr(e,t){const n=e[t][1],r=e[t][2];let o=t-1;const i=[],a=n._tokenizer||r.parser[n.contentType](n.start),l=a.events,u=[],c={};let s,f,d=-1,p=n,h=0,m=0;const g=[m];for(;p;){for(;e[++o][1]!==p;);i.push(o),p._tokenizer||(s=r.sliceStream(p),p.next||s.push(null),f&&a.defineSkip(p.start),p._isInFirstContentOfListItem&&(a._gfmTasklistFirstContentOfListItem=!0),a.write(s),p._isInFirstContentOfListItem&&(a._gfmTasklistFirstContentOfListItem=void 0)),f=p,p=p.next}for(p=n;++d<l.length;)"exit"===l[d][0]&&"enter"===l[d-1][0]&&l[d][1].type===l[d-1][1].type&&l[d][1].start.line!==l[d][1].end.line&&(m=d+1,g.push(m),p._tokenizer=void 0,p.previous=void 0,p=p.next);for(a.events=[],p?(p._tokenizer=void 0,p.previous=void 0):g.pop(),d=g.length;d--;){const t=l.slice(g[d],g[d+1]),n=i.pop();u.unshift([n,n+t.length-1]),sr(e,n,2,t)}for(d=-1;++d<u.length;)c[h+u[d][0]]=h+u[d][1],h+=u[d][1]-u[d][0]-1;return c}const hr={}.hasOwnProperty;function mr(e,t){let n;for(n in t){const r=(hr.call(e,n)?e[n]:void 0)||(e[n]={}),o=t[n];let i;if(o)for(i in o){hr.call(r,i)||(r[i]=[]);const e=o[i];gr(r[i],Array.isArray(e)?e:e?[e]:[])}}}function gr(e,t){let n=-1;const r=[];for(;++n<t.length;)("after"===t[n].add?e:r).push(t[n]);sr(e,0,0,r)}function vr(e,t,n,r){const o=r?r-1:Number.POSITIVE_INFINITY;let i=0;return function(r){return tr(r)?(e.enter(n),a(r)):t(r)};function a(r){return tr(r)&&i++<o?(e.consume(r),a):(e.exit(n),t(r))}}const yr={tokenize:function(e){const t=e.attempt(this.parser.constructs.contentInitial,(function(n){if(null!==n)return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),vr(e,t,"linePrefix");e.consume(n)}),(function(t){return e.enter("paragraph"),r(t)}));let n;return t;function r(t){const r=e.enter("chunkText",{contentType:"text",previous:n});return n&&(n.next=r),n=r,o(t)}function o(t){return null===t?(e.exit("chunkText"),e.exit("paragraph"),void e.consume(t)):Zn(t)?(e.consume(t),e.exit("chunkText"),r):(e.consume(t),o)}}},Ar={tokenize:function(e){const t=this,n=[];let r,o,i,a=0;return l;function l(r){if(a<n.length){const o=n[a];return t.containerState=o[1],e.attempt(o[0].continuation,u,c)(r)}return c(r)}function u(e){if(a++,t.containerState._closeFlow){t.containerState._closeFlow=void 0,r&&y();const n=t.events.length;let o,i=n;for(;i--;)if("exit"===t.events[i][0]&&"chunkFlow"===t.events[i][1].type){o=t.events[i][1].end;break}v(a);let l=n;for(;l<t.events.length;)t.events[l][1].end=Object.assign({},o),l++;return sr(t.events,i+1,0,t.events.slice(n)),t.events.length=l,c(e)}return l(e)}function c(o){if(a===n.length){if(!r)return d(o);if(r.currentConstruct&&r.currentConstruct.concrete)return h(o);t.interrupt=Boolean(r.currentConstruct&&!r._gfmTableDynamicInterruptHack)}return t.containerState={},e.check(br,s,f)(o)}function s(e){return r&&y(),v(a),d(e)}function f(e){return t.parser.lazy[t.now().line]=a!==n.length,i=t.now().offset,h(e)}function d(n){return t.containerState={},e.attempt(br,p,h)(n)}function p(e){return a++,n.push([t.currentConstruct,t.containerState]),d(e)}function h(n){return null===n?(r&&y(),v(0),void e.consume(n)):(r=r||t.parser.flow(t.now()),e.enter("chunkFlow",{contentType:"flow",previous:o,_tokenizer:r}),m(n))}function m(n){return null===n?(g(e.exit("chunkFlow"),!0),v(0),void e.consume(n)):Zn(n)?(e.consume(n),g(e.exit("chunkFlow")),a=0,t.interrupt=void 0,l):(e.consume(n),m)}function g(e,n){const l=t.sliceStream(e);if(n&&l.push(null),e.previous=o,o&&(o.next=e),o=e,r.defineSkip(e.start),r.write(l),t.parser.lazy[e.start.line]){let e=r.events.length;for(;e--;)if(r.events[e][1].start.offset<i&&(!r.events[e][1].end||r.events[e][1].end.offset>i))return;const n=t.events.length;let o,l,u=n;for(;u--;)if("exit"===t.events[u][0]&&"chunkFlow"===t.events[u][1].type){if(o){l=t.events[u][1].end;break}o=!0}for(v(a),e=n;e<t.events.length;)t.events[e][1].end=Object.assign({},l),e++;sr(t.events,u+1,0,t.events.slice(n)),t.events.length=e}}function v(r){let o=n.length;for(;o-- >r;){const r=n[o];t.containerState=r[1],r[0].exit.call(t,e)}n.length=r}function y(){r.write([null]),o=void 0,r=void 0,t.containerState._closeFlow=void 0}}},br={tokenize:function(e,t,n){return vr(e,e.attempt(this.parser.constructs.document,t,n),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}},wr={tokenize:function(e,t,n){return function(t){return tr(t)?vr(e,r,"linePrefix")(t):r(t)};function r(e){return null===e||Zn(e)?t(e):n(e)}},partial:!0},xr={tokenize:function(e,t){let n;return function(t){return e.enter("content"),n=e.enter("chunkContent",{contentType:"content"}),r(t)};function r(t){return null===t?o(t):Zn(t)?e.check(Er,i,o)(t):(e.consume(t),r)}function o(n){return e.exit("chunkContent"),e.exit("content"),t(n)}function i(t){return e.consume(t),e.exit("chunkContent"),n.next=e.enter("chunkContent",{contentType:"content",previous:n}),n=n.next,r}},resolve:function(e){return dr(e),e}},Er={tokenize:function(e,t,n){const r=this;return function(t){return e.exit("chunkContent"),e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),vr(e,o,"linePrefix")};function o(o){if(null===o||Zn(o))return n(o);const i=r.events[r.events.length-1];return!r.parser.constructs.disable.null.includes("codeIndented")&&i&&"linePrefix"===i[1].type&&i[2].sliceSerialize(i[1],!0).length>=4?t(o):e.interrupt(r.parser.constructs.flow,n,t)(o)}},partial:!0},Cr={tokenize:function(e){const t=this,n=e.attempt(wr,(function(r){if(null!==r)return e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),t.currentConstruct=void 0,n;e.consume(r)}),e.attempt(this.parser.constructs.flowInitial,r,vr(e,e.attempt(this.parser.constructs.flow,r,e.attempt(xr,r)),"linePrefix")));return n;function r(r){if(null!==r)return e.enter("lineEnding"),e.consume(r),e.exit("lineEnding"),t.currentConstruct=void 0,n;e.consume(r)}}},kr={resolveAll:Or()},Sr=Ir("string"),Br=Ir("text");function Ir(e){return{tokenize:function(t){const n=this,r=this.parser.constructs[e],o=t.attempt(r,i,a);return i;function i(e){return u(e)?o(e):a(e)}function a(e){if(null!==e)return t.enter("data"),t.consume(e),l;t.consume(e)}function l(e){return u(e)?(t.exit("data"),o(e)):(t.consume(e),l)}function u(e){if(null===e)return!0;const t=r[e];let o=-1;if(t)for(;++o<t.length;){const e=t[o];if(!e.previous||e.previous.call(n,n.previous))return!0}return!1}},resolveAll:Or("text"===e?Pr:void 0)}}function Or(e){return function(t,n){let r,o=-1;for(;++o<=t.length;)void 0===r?t[o]&&"data"===t[o][1].type&&(r=o,o++):t[o]&&"data"===t[o][1].type||(o!==r+2&&(t[r][1].end=t[o-1][1].end,t.splice(r+2,o-r-2),o=r+2),r=void 0);return e?e(t,n):t}}function Pr(e,t){let n=0;for(;++n<=e.length;)if((n===e.length||"lineEnding"===e[n][1].type)&&"data"===e[n-1][1].type){const r=e[n-1][1],o=t.sliceStream(r);let i,a=o.length,l=-1,u=0;for(;a--;){const e=o[a];if("string"==typeof e){for(l=e.length;32===e.charCodeAt(l-1);)u++,l--;if(l)break;l=-1}else if(-2===e)i=!0,u++;else if(-1!==e){a++;break}}if(u){const o={type:n===e.length||i||u<2?"lineSuffix":"hardBreakTrailing",start:{line:r.end.line,column:r.end.column-u,offset:r.end.offset-u,_index:r.start._index+a,_bufferIndex:a?l:r.start._bufferIndex+l},end:Object.assign({},r.end)};r.end=Object.assign({},o.start),r.start.offset===r.end.offset?Object.assign(r,o):(e.splice(n,0,["enter",o,t],["exit",o,t]),n+=2)}n++}return e}function Fr(e,t,n){const r=[];let o=-1;for(;++o<e.length;){const i=e[o].resolveAll;i&&!r.includes(i)&&(t=i(t,n),r.push(i))}return t}function _r(e,t,n){let r=Object.assign(n?Object.assign({},n):{line:1,column:1,offset:0},{_index:0,_bufferIndex:-1});const o={},i=[];let a=[],l=[],u=!0;const c={consume:function(e){Zn(e)?(r.line++,r.column=1,r.offset+=-3===e?2:1,A()):-1!==e&&(r.column++,r.offset++),r._bufferIndex<0?r._index++:(r._bufferIndex++,r._bufferIndex===a[r._index].length&&(r._bufferIndex=-1,r._index++)),s.previous=e,u=!0},enter:function(e,t){const n=t||{};return n.type=e,n.start=h(),s.events.push(["enter",n,s]),l.push(n),n},exit:function(e){const t=l.pop();return t.end=h(),s.events.push(["exit",t,s]),t},attempt:v((function(e,t){y(e,t.from)})),check:v(g),interrupt:v(g,{interrupt:!0})},s={previous:null,code:null,containerState:{},events:[],parser:e,sliceStream:p,sliceSerialize:function(e,t){return function(e,t){let n=-1;const r=[];let o;for(;++n<e.length;){const i=e[n];let a;if("string"==typeof i)a=i;else switch(i){case-5:a="\r";break;case-4:a="\n";break;case-3:a="\r\n";break;case-2:a=t?" ":"\t";break;case-1:if(!t&&o)continue;a=" ";break;default:a=String.fromCharCode(i)}o=-2===i,r.push(a)}return r.join("")}(p(e),t)},now:h,defineSkip:function(e){o[e.line]=e.column,A()},write:function(e){return a=fr(a,e),function(){let e;for(;r._index<a.length;){const t=a[r._index];if("string"==typeof t)for(e=r._index,r._bufferIndex<0&&(r._bufferIndex=0);r._index===e&&r._bufferIndex<t.length;)m(t.charCodeAt(r._bufferIndex));else m(t)}}(),null!==a[a.length-1]?[]:(y(t,0),s.events=Fr(i,s.events,s),s.events)}};let f,d=t.tokenize.call(s,c);return t.resolveAll&&i.push(t),s;function p(e){return function(e,t){const n=t.start._index,r=t.start._bufferIndex,o=t.end._index,i=t.end._bufferIndex;let a;if(n===o)a=[e[n].slice(r,i)];else{if(a=e.slice(n,o),r>-1){const e=a[0];"string"==typeof e?a[0]=e.slice(r):a.shift()}i>0&&a.push(e[o].slice(0,i))}return a}(a,e)}function h(){const{line:e,column:t,offset:n,_index:o,_bufferIndex:i}=r;return{line:e,column:t,offset:n,_index:o,_bufferIndex:i}}function m(e){u=void 0,f=e,d=d(e)}function g(e,t){t.restore()}function v(e,t){return function(n,o,i){let a,f,d,p;return Array.isArray(n)?g(n):"tokenize"in n?g([n]):(m=n,function(e){const t=null!==e&&m[e],n=null!==e&&m.null;return g([...Array.isArray(t)?t:t?[t]:[],...Array.isArray(n)?n:n?[n]:[]])(e)});var m;function g(e){return a=e,f=0,0===e.length?i:v(e[f])}function v(e){return function(n){return p=function(){const e=h(),t=s.previous,n=s.currentConstruct,o=s.events.length,i=Array.from(l);return{restore:function(){r=e,s.previous=t,s.currentConstruct=n,s.events.length=o,l=i,A()},from:o}}(),d=e,e.partial||(s.currentConstruct=e),e.name&&s.parser.constructs.disable.null.includes(e.name)?b():e.tokenize.call(t?Object.assign(Object.create(s),t):s,c,y,b)(n)}}function y(t){return u=!0,e(d,p),o}function b(e){return u=!0,p.restore(),++f<a.length?v(a[f]):i}}}function y(e,t){e.resolveAll&&!i.includes(e)&&i.push(e),e.resolve&&sr(s.events,t,s.events.length-t,e.resolve(s.events.slice(t),s)),e.resolveTo&&(s.events=e.resolveTo(s.events,s))}function A(){r.line in o&&r.column<2&&(r.column=o[r.line],r.offset+=o[r.line]-1)}}const Tr={name:"thematicBreak",tokenize:function(e,t,n){let r,o=0;return function(t){return e.enter("thematicBreak"),function(e){return r=e,i(e)}(t)};function i(i){return i===r?(e.enter("thematicBreakSequence"),a(i)):o>=3&&(null===i||Zn(i))?(e.exit("thematicBreak"),t(i)):n(i)}function a(t){return t===r?(e.consume(t),o++,a):(e.exit("thematicBreakSequence"),tr(t)?vr(e,i,"whitespace")(t):i(t))}}},Lr={name:"list",tokenize:function(e,t,n){const r=this,o=r.events[r.events.length-1];let i=o&&"linePrefix"===o[1].type?o[2].sliceSerialize(o[1],!0).length:0,a=0;return function(t){const o=r.containerState.type||(42===t||43===t||45===t?"listUnordered":"listOrdered");if("listUnordered"===o?!r.containerState.marker||t===r.containerState.marker:Xn(t)){if(r.containerState.type||(r.containerState.type=o,e.enter(o,{_container:!0})),"listUnordered"===o)return e.enter("listItemPrefix"),42===t||45===t?e.check(Tr,n,u)(t):u(t);if(!r.interrupt||49===t)return e.enter("listItemPrefix"),e.enter("listItemValue"),l(t)}return n(t)};function l(t){return Xn(t)&&++a<10?(e.consume(t),l):(!r.interrupt||a<2)&&(r.containerState.marker?t===r.containerState.marker:41===t||46===t)?(e.exit("listItemValue"),u(t)):n(t)}function u(t){return e.enter("listItemMarker"),e.consume(t),e.exit("listItemMarker"),r.containerState.marker=r.containerState.marker||t,e.check(wr,r.interrupt?n:c,e.attempt(Nr,f,s))}function c(e){return r.containerState.initialBlankLine=!0,i++,f(e)}function s(t){return tr(t)?(e.enter("listItemPrefixWhitespace"),e.consume(t),e.exit("listItemPrefixWhitespace"),f):n(t)}function f(n){return r.containerState.size=i+r.sliceSerialize(e.exit("listItemPrefix"),!0).length,t(n)}},continuation:{tokenize:function(e,t,n){const r=this;return r.containerState._closeFlow=void 0,e.check(wr,(function(n){return r.containerState.furtherBlankLines=r.containerState.furtherBlankLines||r.containerState.initialBlankLine,vr(e,t,"listItemIndent",r.containerState.size+1)(n)}),(function(n){return r.containerState.furtherBlankLines||!tr(n)?(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,o(n)):(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,e.attempt(jr,t,o)(n))}));function o(o){return r.containerState._closeFlow=!0,r.interrupt=void 0,vr(e,e.attempt(Lr,t,n),"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(o)}}},exit:function(e){e.exit(this.containerState.type)}},Nr={tokenize:function(e,t,n){const r=this;return vr(e,(function(e){const o=r.events[r.events.length-1];return!tr(e)&&o&&"listItemPrefixWhitespace"===o[1].type?t(e):n(e)}),"listItemPrefixWhitespace",r.parser.constructs.disable.null.includes("codeIndented")?void 0:5)},partial:!0},jr={tokenize:function(e,t,n){const r=this;return vr(e,(function(e){const o=r.events[r.events.length-1];return o&&"listItemIndent"===o[1].type&&o[2].sliceSerialize(o[1],!0).length===r.containerState.size?t(e):n(e)}),"listItemIndent",r.containerState.size+1)},partial:!0},Rr={name:"blockQuote",tokenize:function(e,t,n){const r=this;return function(t){if(62===t){const n=r.containerState;return n.open||(e.enter("blockQuote",{_container:!0}),n.open=!0),e.enter("blockQuotePrefix"),e.enter("blockQuoteMarker"),e.consume(t),e.exit("blockQuoteMarker"),o}return n(t)};function o(n){return tr(n)?(e.enter("blockQuotePrefixWhitespace"),e.consume(n),e.exit("blockQuotePrefixWhitespace"),e.exit("blockQuotePrefix"),t):(e.exit("blockQuotePrefix"),t(n))}},continuation:{tokenize:function(e,t,n){const r=this;return function(t){return tr(t)?vr(e,o,"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(t):o(t)};function o(r){return e.attempt(Rr,t,n)(r)}}},exit:function(e){e.exit("blockQuote")}};function Mr(e,t,n,r,o,i,a,l,u){const c=u||Number.POSITIVE_INFINITY;let s=0;return function(t){return 60===t?(e.enter(r),e.enter(o),e.enter(i),e.consume(t),e.exit(i),f):null===t||32===t||41===t||$n(t)?n(t):(e.enter(r),e.enter(a),e.enter(l),e.enter("chunkString",{contentType:"string"}),h(t))};function f(n){return 62===n?(e.enter(i),e.consume(n),e.exit(i),e.exit(o),e.exit(r),t):(e.enter(l),e.enter("chunkString",{contentType:"string"}),d(n))}function d(t){return 62===t?(e.exit("chunkString"),e.exit(l),f(t)):null===t||60===t||Zn(t)?n(t):(e.consume(t),92===t?p:d)}function p(t){return 60===t||62===t||92===t?(e.consume(t),d):d(t)}function h(o){return s||null!==o&&41!==o&&!er(o)?s<c&&40===o?(e.consume(o),s++,h):41===o?(e.consume(o),s--,h):null===o||32===o||40===o||$n(o)?n(o):(e.consume(o),92===o?m:h):(e.exit("chunkString"),e.exit(l),e.exit(a),e.exit(r),t(o))}function m(t){return 40===t||41===t||92===t?(e.consume(t),h):h(t)}}function zr(e,t,n,r,o,i){const a=this;let l,u=0;return function(t){return e.enter(r),e.enter(o),e.consume(t),e.exit(o),e.enter(i),c};function c(f){return u>999||null===f||91===f||93===f&&!l||94===f&&!u&&"_hiddenFootnoteSupport"in a.parser.constructs?n(f):93===f?(e.exit(i),e.enter(o),e.consume(f),e.exit(o),e.exit(r),t):Zn(f)?(e.enter("lineEnding"),e.consume(f),e.exit("lineEnding"),c):(e.enter("chunkString",{contentType:"string"}),s(f))}function s(t){return null===t||91===t||93===t||Zn(t)||u++>999?(e.exit("chunkString"),c(t)):(e.consume(t),l||(l=!tr(t)),92===t?f:s)}function f(t){return 91===t||92===t||93===t?(e.consume(t),u++,s):s(t)}}function Dr(e,t,n,r,o,i){let a;return function(t){return 34===t||39===t||40===t?(e.enter(r),e.enter(o),e.consume(t),e.exit(o),a=40===t?41:t,l):n(t)};function l(n){return n===a?(e.enter(o),e.consume(n),e.exit(o),e.exit(r),t):(e.enter(i),u(n))}function u(t){return t===a?(e.exit(i),l(a)):null===t?n(t):Zn(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),vr(e,u,"linePrefix")):(e.enter("chunkString",{contentType:"string"}),c(t))}function c(t){return t===a||null===t||Zn(t)?(e.exit("chunkString"),u(t)):(e.consume(t),92===t?s:c)}function s(t){return t===a||92===t?(e.consume(t),c):c(t)}}function Ur(e,t){let n;return function r(o){return Zn(o)?(e.enter("lineEnding"),e.consume(o),e.exit("lineEnding"),n=!0,r):tr(o)?vr(e,r,n?"linePrefix":"lineSuffix")(o):t(o)}}function Wr(e){return e.replace(/[\t\n\r ]+/g," ").replace(/^ | $/g,"").toLowerCase().toUpperCase()}const qr={name:"definition",tokenize:function(e,t,n){const r=this;let o;return function(t){return e.enter("definition"),function(t){return zr.call(r,e,i,n,"definitionLabel","definitionLabelMarker","definitionLabelString")(t)}(t)};function i(t){return o=Wr(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)),58===t?(e.enter("definitionMarker"),e.consume(t),e.exit("definitionMarker"),a):n(t)}function a(t){return er(t)?Ur(e,l)(t):l(t)}function l(t){return Mr(e,u,n,"definitionDestination","definitionDestinationLiteral","definitionDestinationLiteralMarker","definitionDestinationRaw","definitionDestinationString")(t)}function u(t){return e.attempt(Vr,c,c)(t)}function c(t){return tr(t)?vr(e,s,"whitespace")(t):s(t)}function s(i){return null===i||Zn(i)?(e.exit("definition"),r.parser.defined.push(o),t(i)):n(i)}}},Vr={tokenize:function(e,t,n){return function(t){return er(t)?Ur(e,r)(t):n(t)};function r(t){return Dr(e,o,n,"definitionTitle","definitionTitleMarker","definitionTitleString")(t)}function o(t){return tr(t)?vr(e,i,"whitespace")(t):i(t)}function i(e){return null===e||Zn(e)?t(e):n(e)}},partial:!0},Hr={name:"codeIndented",tokenize:function(e,t,n){const r=this;return function(t){return e.enter("codeIndented"),vr(e,o,"linePrefix",5)(t)};function o(e){const t=r.events[r.events.length-1];return t&&"linePrefix"===t[1].type&&t[2].sliceSerialize(t[1],!0).length>=4?i(e):n(e)}function i(t){return null===t?l(t):Zn(t)?e.attempt(Qr,i,l)(t):(e.enter("codeFlowValue"),a(t))}function a(t){return null===t||Zn(t)?(e.exit("codeFlowValue"),i(t)):(e.consume(t),a)}function l(n){return e.exit("codeIndented"),t(n)}}},Qr={tokenize:function(e,t,n){const r=this;return o;function o(t){return r.parser.lazy[r.now().line]?n(t):Zn(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),o):vr(e,i,"linePrefix",5)(t)}function i(e){const i=r.events[r.events.length-1];return i&&"linePrefix"===i[1].type&&i[2].sliceSerialize(i[1],!0).length>=4?t(e):Zn(e)?o(e):n(e)}},partial:!0},Yr={name:"headingAtx",tokenize:function(e,t,n){let r=0;return function(t){return e.enter("atxHeading"),function(t){return e.enter("atxHeadingSequence"),o(t)}(t)};function o(t){return 35===t&&r++<6?(e.consume(t),o):null===t||er(t)?(e.exit("atxHeadingSequence"),i(t)):n(t)}function i(n){return 35===n?(e.enter("atxHeadingSequence"),a(n)):null===n||Zn(n)?(e.exit("atxHeading"),t(n)):tr(n)?vr(e,i,"whitespace")(n):(e.enter("atxHeadingText"),l(n))}function a(t){return 35===t?(e.consume(t),a):(e.exit("atxHeadingSequence"),i(t))}function l(t){return null===t||35===t||er(t)?(e.exit("atxHeadingText"),i(t)):(e.consume(t),l)}},resolve:function(e,t){let n,r,o=e.length-2,i=3;return"whitespace"===e[i][1].type&&(i+=2),o-2>i&&"whitespace"===e[o][1].type&&(o-=2),"atxHeadingSequence"===e[o][1].type&&(i===o-1||o-4>i&&"whitespace"===e[o-2][1].type)&&(o-=i+1===o?2:4),o>i&&(n={type:"atxHeadingText",start:e[i][1].start,end:e[o][1].end},r={type:"chunkText",start:e[i][1].start,end:e[o][1].end,contentType:"text"},sr(e,i,o-i+1,[["enter",n,t],["enter",r,t],["exit",r,t],["exit",n,t]])),e}},Gr={name:"setextUnderline",tokenize:function(e,t,n){const r=this;let o;return function(t){let a,l=r.events.length;for(;l--;)if("lineEnding"!==r.events[l][1].type&&"linePrefix"!==r.events[l][1].type&&"content"!==r.events[l][1].type){a="paragraph"===r.events[l][1].type;break}return r.parser.lazy[r.now().line]||!r.interrupt&&!a?n(t):(e.enter("setextHeadingLine"),o=t,function(t){return e.enter("setextHeadingLineSequence"),i(t)}(t))};function i(t){return t===o?(e.consume(t),i):(e.exit("setextHeadingLineSequence"),tr(t)?vr(e,a,"lineSuffix")(t):a(t))}function a(r){return null===r||Zn(r)?(e.exit("setextHeadingLine"),t(r)):n(r)}},resolveTo:function(e,t){let n,r,o,i=e.length;for(;i--;)if("enter"===e[i][0]){if("content"===e[i][1].type){n=i;break}"paragraph"===e[i][1].type&&(r=i)}else"content"===e[i][1].type&&e.splice(i,1),o||"definition"!==e[i][1].type||(o=i);const a={type:"setextHeading",start:Object.assign({},e[r][1].start),end:Object.assign({},e[e.length-1][1].end)};return e[r][1].type="setextHeadingText",o?(e.splice(r,0,["enter",a,t]),e.splice(o+1,0,["exit",e[n][1],t]),e[n][1].end=Object.assign({},e[o][1].end)):e[n][1]=a,e.push(["exit",a,t]),e}},$r=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","nav","noframes","ol","optgroup","option","p","param","search","section","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"],Xr=["pre","script","style","textarea"],Kr={name:"htmlFlow",tokenize:function(e,t,n){const r=this;let o,i,a,l,u;return function(t){return function(t){return e.enter("htmlFlow"),e.enter("htmlFlowData"),e.consume(t),c}(t)};function c(l){return 33===l?(e.consume(l),s):47===l?(e.consume(l),i=!0,p):63===l?(e.consume(l),o=3,r.interrupt?t:L):Qn(l)?(e.consume(l),a=String.fromCharCode(l),h):n(l)}function s(i){return 45===i?(e.consume(i),o=2,f):91===i?(e.consume(i),o=5,l=0,d):Qn(i)?(e.consume(i),o=4,r.interrupt?t:L):n(i)}function f(o){return 45===o?(e.consume(o),r.interrupt?t:L):n(o)}function d(o){return o==="CDATA[".charCodeAt(l++)?(e.consume(o),6===l?r.interrupt?t:S:d):n(o)}function p(t){return Qn(t)?(e.consume(t),a=String.fromCharCode(t),h):n(t)}function h(l){if(null===l||47===l||62===l||er(l)){const u=47===l,c=a.toLowerCase();return u||i||!Xr.includes(c)?$r.includes(a.toLowerCase())?(o=6,u?(e.consume(l),m):r.interrupt?t(l):S(l)):(o=7,r.interrupt&&!r.parser.lazy[r.now().line]?n(l):i?g(l):v(l)):(o=1,r.interrupt?t(l):S(l))}return 45===l||Yn(l)?(e.consume(l),a+=String.fromCharCode(l),h):n(l)}function m(o){return 62===o?(e.consume(o),r.interrupt?t:S):n(o)}function g(t){return tr(t)?(e.consume(t),g):C(t)}function v(t){return 47===t?(e.consume(t),C):58===t||95===t||Qn(t)?(e.consume(t),y):tr(t)?(e.consume(t),v):C(t)}function y(t){return 45===t||46===t||58===t||95===t||Yn(t)?(e.consume(t),y):A(t)}function A(t){return 61===t?(e.consume(t),b):tr(t)?(e.consume(t),A):v(t)}function b(t){return null===t||60===t||61===t||62===t||96===t?n(t):34===t||39===t?(e.consume(t),u=t,w):tr(t)?(e.consume(t),b):x(t)}function w(t){return t===u?(e.consume(t),u=null,E):null===t||Zn(t)?n(t):(e.consume(t),w)}function x(t){return null===t||34===t||39===t||47===t||60===t||61===t||62===t||96===t||er(t)?A(t):(e.consume(t),x)}function E(e){return 47===e||62===e||tr(e)?v(e):n(e)}function C(t){return 62===t?(e.consume(t),k):n(t)}function k(t){return null===t||Zn(t)?S(t):tr(t)?(e.consume(t),k):n(t)}function S(t){return 45===t&&2===o?(e.consume(t),P):60===t&&1===o?(e.consume(t),F):62===t&&4===o?(e.consume(t),N):63===t&&3===o?(e.consume(t),L):93===t&&5===o?(e.consume(t),T):!Zn(t)||6!==o&&7!==o?null===t||Zn(t)?(e.exit("htmlFlowData"),B(t)):(e.consume(t),S):(e.exit("htmlFlowData"),e.check(Jr,j,B)(t))}function B(t){return e.check(Zr,I,j)(t)}function I(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),O}function O(t){return null===t||Zn(t)?B(t):(e.enter("htmlFlowData"),S(t))}function P(t){return 45===t?(e.consume(t),L):S(t)}function F(t){return 47===t?(e.consume(t),a="",_):S(t)}function _(t){if(62===t){const n=a.toLowerCase();return Xr.includes(n)?(e.consume(t),N):S(t)}return Qn(t)&&a.length<8?(e.consume(t),a+=String.fromCharCode(t),_):S(t)}function T(t){return 93===t?(e.consume(t),L):S(t)}function L(t){return 62===t?(e.consume(t),N):45===t&&2===o?(e.consume(t),L):S(t)}function N(t){return null===t||Zn(t)?(e.exit("htmlFlowData"),j(t)):(e.consume(t),N)}function j(n){return e.exit("htmlFlow"),t(n)}},resolveTo:function(e){let t=e.length;for(;t--&&("enter"!==e[t][0]||"htmlFlow"!==e[t][1].type););return t>1&&"linePrefix"===e[t-2][1].type&&(e[t][1].start=e[t-2][1].start,e[t+1][1].start=e[t-2][1].start,e.splice(t-2,2)),e},concrete:!0},Jr={tokenize:function(e,t,n){return function(r){return e.enter("lineEnding"),e.consume(r),e.exit("lineEnding"),e.attempt(wr,t,n)}},partial:!0},Zr={tokenize:function(e,t,n){const r=this;return function(t){return Zn(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),o):n(t)};function o(e){return r.parser.lazy[r.now().line]?n(e):t(e)}},partial:!0},eo={tokenize:function(e,t,n){const r=this;return function(t){return null===t?n(t):(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),o)};function o(e){return r.parser.lazy[r.now().line]?n(e):t(e)}},partial:!0},to={name:"codeFenced",tokenize:function(e,t,n){const r=this,o={tokenize:function(e,t,n){let o=0;return function(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),a};function a(t){return e.enter("codeFencedFence"),tr(t)?vr(e,u,"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(t):u(t)}function u(t){return t===i?(e.enter("codeFencedFenceSequence"),c(t)):n(t)}function c(t){return t===i?(o++,e.consume(t),c):o>=l?(e.exit("codeFencedFenceSequence"),tr(t)?vr(e,s,"whitespace")(t):s(t)):n(t)}function s(r){return null===r||Zn(r)?(e.exit("codeFencedFence"),t(r)):n(r)}},partial:!0};let i,a=0,l=0;return function(t){return function(t){const n=r.events[r.events.length-1];return a=n&&"linePrefix"===n[1].type?n[2].sliceSerialize(n[1],!0).length:0,i=t,e.enter("codeFenced"),e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),u(t)}(t)};function u(t){return t===i?(l++,e.consume(t),u):l<3?n(t):(e.exit("codeFencedFenceSequence"),tr(t)?vr(e,c,"whitespace")(t):c(t))}function c(n){return null===n||Zn(n)?(e.exit("codeFencedFence"),r.interrupt?t(n):e.check(eo,p,y)(n)):(e.enter("codeFencedFenceInfo"),e.enter("chunkString",{contentType:"string"}),s(n))}function s(t){return null===t||Zn(t)?(e.exit("chunkString"),e.exit("codeFencedFenceInfo"),c(t)):tr(t)?(e.exit("chunkString"),e.exit("codeFencedFenceInfo"),vr(e,f,"whitespace")(t)):96===t&&t===i?n(t):(e.consume(t),s)}function f(t){return null===t||Zn(t)?c(t):(e.enter("codeFencedFenceMeta"),e.enter("chunkString",{contentType:"string"}),d(t))}function d(t){return null===t||Zn(t)?(e.exit("chunkString"),e.exit("codeFencedFenceMeta"),c(t)):96===t&&t===i?n(t):(e.consume(t),d)}function p(t){return e.attempt(o,y,h)(t)}function h(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),m}function m(t){return a>0&&tr(t)?vr(e,g,"linePrefix",a+1)(t):g(t)}function g(t){return null===t||Zn(t)?e.check(eo,p,y)(t):(e.enter("codeFlowValue"),v(t))}function v(t){return null===t||Zn(t)?(e.exit("codeFlowValue"),g(t)):(e.consume(t),v)}function y(n){return e.exit("codeFenced"),t(n)}},concrete:!0},no=document.createElement("i");function ro(e){const t="&"+e+";";no.innerHTML=t;const n=no.textContent;return(59!==n.charCodeAt(n.length-1)||"semi"===e)&&n!==t&&n}const oo={name:"characterReference",tokenize:function(e,t,n){const r=this;let o,i,a=0;return function(t){return e.enter("characterReference"),e.enter("characterReferenceMarker"),e.consume(t),e.exit("characterReferenceMarker"),l};function l(t){return 35===t?(e.enter("characterReferenceMarkerNumeric"),e.consume(t),e.exit("characterReferenceMarkerNumeric"),u):(e.enter("characterReferenceValue"),o=31,i=Yn,c(t))}function u(t){return 88===t||120===t?(e.enter("characterReferenceMarkerHexadecimal"),e.consume(t),e.exit("characterReferenceMarkerHexadecimal"),e.enter("characterReferenceValue"),o=6,i=Kn,c):(e.enter("characterReferenceValue"),o=7,i=Xn,c(t))}function c(l){if(59===l&&a){const o=e.exit("characterReferenceValue");return i!==Yn||ro(r.sliceSerialize(o))?(e.enter("characterReferenceMarker"),e.consume(l),e.exit("characterReferenceMarker"),e.exit("characterReference"),t):n(l)}return i(l)&&a++<o?(e.consume(l),c):n(l)}}},io={name:"characterEscape",tokenize:function(e,t,n){return function(t){return e.enter("characterEscape"),e.enter("escapeMarker"),e.consume(t),e.exit("escapeMarker"),r};function r(r){return Jn(r)?(e.enter("characterEscapeValue"),e.consume(r),e.exit("characterEscapeValue"),e.exit("characterEscape"),t):n(r)}}},ao={name:"lineEnding",tokenize:function(e,t){return function(n){return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),vr(e,t,"linePrefix")}}},lo={name:"labelEnd",tokenize:function(e,t,n){const r=this;let o,i,a=r.events.length;for(;a--;)if(("labelImage"===r.events[a][1].type||"labelLink"===r.events[a][1].type)&&!r.events[a][1]._balanced){o=r.events[a][1];break}return function(t){return o?o._inactive?s(t):(i=r.parser.defined.includes(Wr(r.sliceSerialize({start:o.end,end:r.now()}))),e.enter("labelEnd"),e.enter("labelMarker"),e.consume(t),e.exit("labelMarker"),e.exit("labelEnd"),l):n(t)};function l(t){return 40===t?e.attempt(uo,c,i?c:s)(t):91===t?e.attempt(co,c,i?u:s)(t):i?c(t):s(t)}function u(t){return e.attempt(so,c,s)(t)}function c(e){return t(e)}function s(e){return o._balanced=!0,n(e)}},resolveTo:function(e,t){let n,r,o,i,a=e.length,l=0;for(;a--;)if(n=e[a][1],r){if("link"===n.type||"labelLink"===n.type&&n._inactive)break;"enter"===e[a][0]&&"labelLink"===n.type&&(n._inactive=!0)}else if(o){if("enter"===e[a][0]&&("labelImage"===n.type||"labelLink"===n.type)&&!n._balanced&&(r=a,"labelLink"!==n.type)){l=2;break}}else"labelEnd"===n.type&&(o=a);const u={type:"labelLink"===e[r][1].type?"link":"image",start:Object.assign({},e[r][1].start),end:Object.assign({},e[e.length-1][1].end)},c={type:"label",start:Object.assign({},e[r][1].start),end:Object.assign({},e[o][1].end)},s={type:"labelText",start:Object.assign({},e[r+l+2][1].end),end:Object.assign({},e[o-2][1].start)};return i=[["enter",u,t],["enter",c,t]],i=fr(i,e.slice(r+1,r+l+3)),i=fr(i,[["enter",s,t]]),i=fr(i,Fr(t.parser.constructs.insideSpan.null,e.slice(r+l+4,o-3),t)),i=fr(i,[["exit",s,t],e[o-2],e[o-1],["exit",c,t]]),i=fr(i,e.slice(o+1)),i=fr(i,[["exit",u,t]]),sr(e,r,e.length,i),e},resolveAll:function(e){let t=-1;for(;++t<e.length;){const n=e[t][1];"labelImage"!==n.type&&"labelLink"!==n.type&&"labelEnd"!==n.type||(e.splice(t+1,"labelImage"===n.type?4:2),n.type="data",t++)}return e}},uo={tokenize:function(e,t,n){return function(t){return e.enter("resource"),e.enter("resourceMarker"),e.consume(t),e.exit("resourceMarker"),r};function r(t){return er(t)?Ur(e,o)(t):o(t)}function o(t){return 41===t?c(t):Mr(e,i,a,"resourceDestination","resourceDestinationLiteral","resourceDestinationLiteralMarker","resourceDestinationRaw","resourceDestinationString",32)(t)}function i(t){return er(t)?Ur(e,l)(t):c(t)}function a(e){return n(e)}function l(t){return 34===t||39===t||40===t?Dr(e,u,n,"resourceTitle","resourceTitleMarker","resourceTitleString")(t):c(t)}function u(t){return er(t)?Ur(e,c)(t):c(t)}function c(r){return 41===r?(e.enter("resourceMarker"),e.consume(r),e.exit("resourceMarker"),e.exit("resource"),t):n(r)}}},co={tokenize:function(e,t,n){const r=this;return function(t){return zr.call(r,e,o,i,"reference","referenceMarker","referenceString")(t)};function o(e){return r.parser.defined.includes(Wr(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)))?t(e):n(e)}function i(e){return n(e)}}},so={tokenize:function(e,t,n){return function(t){return e.enter("reference"),e.enter("referenceMarker"),e.consume(t),e.exit("referenceMarker"),r};function r(r){return 93===r?(e.enter("referenceMarker"),e.consume(r),e.exit("referenceMarker"),e.exit("reference"),t):n(r)}}};function fo(e){return null===e||er(e)||nr(e)?1:function(e){return Jn(e)||Hn(e)}(e)?2:void 0}const po={name:"attention",tokenize:function(e,t){const n=this.parser.constructs.attentionMarkers.null,r=this.previous,o=fo(r);let i;return function(t){return i=t,e.enter("attentionSequence"),a(t)};function a(l){if(l===i)return e.consume(l),a;const u=e.exit("attentionSequence"),c=fo(l),s=!c||2===c&&o||n.includes(l),f=!o||2===o&&c||n.includes(r);return u._open=Boolean(42===i?s:s&&(o||!f)),u._close=Boolean(42===i?f:f&&(c||!s)),t(l)}},resolveAll:function(e,t){let n,r,o,i,a,l,u,c,s=-1;for(;++s<e.length;)if("enter"===e[s][0]&&"attentionSequence"===e[s][1].type&&e[s][1]._close)for(n=s;n--;)if("exit"===e[n][0]&&"attentionSequence"===e[n][1].type&&e[n][1]._open&&t.sliceSerialize(e[n][1]).charCodeAt(0)===t.sliceSerialize(e[s][1]).charCodeAt(0)){if((e[n][1]._close||e[s][1]._open)&&(e[s][1].end.offset-e[s][1].start.offset)%3&&!((e[n][1].end.offset-e[n][1].start.offset+e[s][1].end.offset-e[s][1].start.offset)%3))continue;l=e[n][1].end.offset-e[n][1].start.offset>1&&e[s][1].end.offset-e[s][1].start.offset>1?2:1;const f=Object.assign({},e[n][1].end),d=Object.assign({},e[s][1].start);ho(f,-l),ho(d,l),i={type:l>1?"strongSequence":"emphasisSequence",start:f,end:Object.assign({},e[n][1].end)},a={type:l>1?"strongSequence":"emphasisSequence",start:Object.assign({},e[s][1].start),end:d},o={type:l>1?"strongText":"emphasisText",start:Object.assign({},e[n][1].end),end:Object.assign({},e[s][1].start)},r={type:l>1?"strong":"emphasis",start:Object.assign({},i.start),end:Object.assign({},a.end)},e[n][1].end=Object.assign({},i.start),e[s][1].start=Object.assign({},a.end),u=[],e[n][1].end.offset-e[n][1].start.offset&&(u=fr(u,[["enter",e[n][1],t],["exit",e[n][1],t]])),u=fr(u,[["enter",r,t],["enter",i,t],["exit",i,t],["enter",o,t]]),u=fr(u,Fr(t.parser.constructs.insideSpan.null,e.slice(n+1,s),t)),u=fr(u,[["exit",o,t],["enter",a,t],["exit",a,t],["exit",r,t]]),e[s][1].end.offset-e[s][1].start.offset?(c=2,u=fr(u,[["enter",e[s][1],t],["exit",e[s][1],t]])):c=0,sr(e,n-1,s-n+3,u),s=n+u.length-c-2;break}for(s=-1;++s<e.length;)"attentionSequence"===e[s][1].type&&(e[s][1].type="data");return e}};function ho(e,t){e.column+=t,e.offset+=t,e._bufferIndex+=t}const mo={name:"htmlText",tokenize:function(e,t,n){const r=this;let o,i,a;return function(t){return e.enter("htmlText"),e.enter("htmlTextData"),e.consume(t),l};function l(t){return 33===t?(e.consume(t),u):47===t?(e.consume(t),b):63===t?(e.consume(t),y):Qn(t)?(e.consume(t),E):n(t)}function u(t){return 45===t?(e.consume(t),c):91===t?(e.consume(t),i=0,p):Qn(t)?(e.consume(t),v):n(t)}function c(t){return 45===t?(e.consume(t),d):n(t)}function s(t){return null===t?n(t):45===t?(e.consume(t),f):Zn(t)?(a=s,_(t)):(e.consume(t),s)}function f(t){return 45===t?(e.consume(t),d):s(t)}function d(e){return 62===e?F(e):45===e?f(e):s(e)}function p(t){return t==="CDATA[".charCodeAt(i++)?(e.consume(t),6===i?h:p):n(t)}function h(t){return null===t?n(t):93===t?(e.consume(t),m):Zn(t)?(a=h,_(t)):(e.consume(t),h)}function m(t){return 93===t?(e.consume(t),g):h(t)}function g(t){return 62===t?F(t):93===t?(e.consume(t),g):h(t)}function v(t){return null===t||62===t?F(t):Zn(t)?(a=v,_(t)):(e.consume(t),v)}function y(t){return null===t?n(t):63===t?(e.consume(t),A):Zn(t)?(a=y,_(t)):(e.consume(t),y)}function A(e){return 62===e?F(e):y(e)}function b(t){return Qn(t)?(e.consume(t),w):n(t)}function w(t){return 45===t||Yn(t)?(e.consume(t),w):x(t)}function x(t){return Zn(t)?(a=x,_(t)):tr(t)?(e.consume(t),x):F(t)}function E(t){return 45===t||Yn(t)?(e.consume(t),E):47===t||62===t||er(t)?C(t):n(t)}function C(t){return 47===t?(e.consume(t),F):58===t||95===t||Qn(t)?(e.consume(t),k):Zn(t)?(a=C,_(t)):tr(t)?(e.consume(t),C):F(t)}function k(t){return 45===t||46===t||58===t||95===t||Yn(t)?(e.consume(t),k):S(t)}function S(t){return 61===t?(e.consume(t),B):Zn(t)?(a=S,_(t)):tr(t)?(e.consume(t),S):C(t)}function B(t){return null===t||60===t||61===t||62===t||96===t?n(t):34===t||39===t?(e.consume(t),o=t,I):Zn(t)?(a=B,_(t)):tr(t)?(e.consume(t),B):(e.consume(t),O)}function I(t){return t===o?(e.consume(t),o=void 0,P):null===t?n(t):Zn(t)?(a=I,_(t)):(e.consume(t),I)}function O(t){return null===t||34===t||39===t||60===t||61===t||96===t?n(t):47===t||62===t||er(t)?C(t):(e.consume(t),O)}function P(e){return 47===e||62===e||er(e)?C(e):n(e)}function F(r){return 62===r?(e.consume(r),e.exit("htmlTextData"),e.exit("htmlText"),t):n(r)}function _(t){return e.exit("htmlTextData"),e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),T}function T(t){return tr(t)?vr(e,L,"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(t):L(t)}function L(t){return e.enter("htmlTextData"),a(t)}}},go={name:"codeText",tokenize:function(e,t,n){let r,o,i=0;return function(t){return e.enter("codeText"),e.enter("codeTextSequence"),a(t)};function a(t){return 96===t?(e.consume(t),i++,a):(e.exit("codeTextSequence"),l(t))}function l(t){return null===t?n(t):32===t?(e.enter("space"),e.consume(t),e.exit("space"),l):96===t?(o=e.enter("codeTextSequence"),r=0,c(t)):Zn(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),l):(e.enter("codeTextData"),u(t))}function u(t){return null===t||32===t||96===t||Zn(t)?(e.exit("codeTextData"),l(t)):(e.consume(t),u)}function c(n){return 96===n?(e.consume(n),r++,c):r===i?(e.exit("codeTextSequence"),e.exit("codeText"),t(n)):(o.type="codeTextData",u(n))}},resolve:function(e){let t,n,r=e.length-4,o=3;if(!("lineEnding"!==e[o][1].type&&"space"!==e[o][1].type||"lineEnding"!==e[r][1].type&&"space"!==e[r][1].type))for(t=o;++t<r;)if("codeTextData"===e[t][1].type){e[o][1].type="codeTextPadding",e[r][1].type="codeTextPadding",o+=2,r-=2;break}for(t=o-1,r++;++t<=r;)void 0===n?t!==r&&"lineEnding"!==e[t][1].type&&(n=t):t!==r&&"lineEnding"!==e[t][1].type||(e[n][1].type="codeTextData",t!==n+2&&(e[n][1].end=e[t-1][1].end,e.splice(n+2,t-n-2),r-=t-n-2,t=n+2),n=void 0);return e},previous:function(e){return 96!==e||"characterEscape"===this.events[this.events.length-1][1].type}},vo={42:Lr,43:Lr,45:Lr,48:Lr,49:Lr,50:Lr,51:Lr,52:Lr,53:Lr,54:Lr,55:Lr,56:Lr,57:Lr,62:Rr},yo={91:qr},Ao={[-2]:Hr,[-1]:Hr,32:Hr},bo={35:Yr,42:Tr,45:[Gr,Tr],60:Kr,61:Gr,95:Tr,96:to,126:to},wo={38:oo,92:io},xo={[-5]:ao,[-4]:ao,[-3]:ao,33:{name:"labelStartImage",tokenize:function(e,t,n){const r=this;return function(t){return e.enter("labelImage"),e.enter("labelImageMarker"),e.consume(t),e.exit("labelImageMarker"),o};function o(t){return 91===t?(e.enter("labelMarker"),e.consume(t),e.exit("labelMarker"),e.exit("labelImage"),i):n(t)}function i(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?n(e):t(e)}},resolveAll:lo.resolveAll},38:oo,42:po,60:[{name:"autolink",tokenize:function(e,t,n){let r=0;return function(t){return e.enter("autolink"),e.enter("autolinkMarker"),e.consume(t),e.exit("autolinkMarker"),e.enter("autolinkProtocol"),o};function o(t){return Qn(t)?(e.consume(t),i):u(t)}function i(e){return 43===e||45===e||46===e||Yn(e)?(r=1,a(e)):u(e)}function a(t){return 58===t?(e.consume(t),r=0,l):(43===t||45===t||46===t||Yn(t))&&r++<32?(e.consume(t),a):(r=0,u(t))}function l(r){return 62===r?(e.exit("autolinkProtocol"),e.enter("autolinkMarker"),e.consume(r),e.exit("autolinkMarker"),e.exit("autolink"),t):null===r||32===r||60===r||$n(r)?n(r):(e.consume(r),l)}function u(t){return 64===t?(e.consume(t),c):Gn(t)?(e.consume(t),u):n(t)}function c(e){return Yn(e)?s(e):n(e)}function s(n){return 46===n?(e.consume(n),r=0,c):62===n?(e.exit("autolinkProtocol").type="autolinkEmail",e.enter("autolinkMarker"),e.consume(n),e.exit("autolinkMarker"),e.exit("autolink"),t):f(n)}function f(t){if((45===t||Yn(t))&&r++<63){const n=45===t?f:s;return e.consume(t),n}return n(t)}}},mo],91:{name:"labelStartLink",tokenize:function(e,t,n){const r=this;return function(t){return e.enter("labelLink"),e.enter("labelMarker"),e.consume(t),e.exit("labelMarker"),e.exit("labelLink"),o};function o(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?n(e):t(e)}},resolveAll:lo.resolveAll},92:[{name:"hardBreakEscape",tokenize:function(e,t,n){return function(t){return e.enter("hardBreakEscape"),e.consume(t),r};function r(r){return Zn(r)?(e.exit("hardBreakEscape"),t(r)):n(r)}}},io],93:lo,95:po,96:go},Eo={null:[po,kr]},Co={null:[42,95]},ko={null:[]};const So=/[\0\t\n\r]/g;function Bo(e,t){const n=Number.parseInt(e,t);return n<9||11===n||n>13&&n<32||n>126&&n<160||n>55295&&n<57344||n>64975&&n<65008||65535==(65535&n)||65534==(65535&n)||n>1114111?"�":String.fromCharCode(n)}const Io=/\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;function Oo(e,t,n){if(t)return t;if(35===n.charCodeAt(0)){const e=n.charCodeAt(1),t=120===e||88===e;return Bo(n.slice(t?2:1),t?16:10)}return ro(n)||e}const Po={}.hasOwnProperty;function Fo(e,t,n){return"string"!=typeof t&&(n=t,t=void 0),function(e){const t={transforms:[],canContainEols:["emphasis","fragment","heading","paragraph","strong"],enter:{autolink:o(y),autolinkProtocol:s,autolinkEmail:s,atxHeading:o(m),blockQuote:o((function(){return{type:"blockquote",children:[]}})),characterEscape:s,characterReference:s,codeFenced:o(h),codeFencedFenceInfo:i,codeFencedFenceMeta:i,codeIndented:o(h,i),codeText:o((function(){return{type:"inlineCode",value:""}}),i),codeTextData:s,data:s,codeFlowValue:s,definition:o((function(){return{type:"definition",identifier:"",label:null,title:null,url:""}})),definitionDestinationString:i,definitionLabelString:i,definitionTitleString:i,emphasis:o((function(){return{type:"emphasis",children:[]}})),hardBreakEscape:o(g),hardBreakTrailing:o(g),htmlFlow:o(v,i),htmlFlowData:s,htmlText:o(v,i),htmlTextData:s,image:o((function(){return{type:"image",title:null,url:"",alt:null}})),label:i,link:o(y),listItem:o((function(e){return{type:"listItem",spread:e._spread,checked:null,children:[]}})),listItemValue:function(e){this.data.expectingFirstListItemValue&&(this.stack[this.stack.length-2].start=Number.parseInt(this.sliceSerialize(e),10),this.data.expectingFirstListItemValue=void 0)},listOrdered:o(A,(function(){this.data.expectingFirstListItemValue=!0})),listUnordered:o(A),paragraph:o((function(){return{type:"paragraph",children:[]}})),reference:function(){this.data.referenceType="collapsed"},referenceString:i,resourceDestinationString:i,resourceTitleString:i,setextHeading:o(m),strong:o((function(){return{type:"strong",children:[]}})),thematicBreak:o((function(){return{type:"thematicBreak"}}))},exit:{atxHeading:l(),atxHeadingSequence:function(e){const t=this.stack[this.stack.length-1];if(!t.depth){const n=this.sliceSerialize(e).length;t.depth=n}},autolink:l(),autolinkEmail:function(e){f.call(this,e),this.stack[this.stack.length-1].url="mailto:"+this.sliceSerialize(e)},autolinkProtocol:function(e){f.call(this,e),this.stack[this.stack.length-1].url=this.sliceSerialize(e)},blockQuote:l(),characterEscapeValue:f,characterReferenceMarkerHexadecimal:p,characterReferenceMarkerNumeric:p,characterReferenceValue:function(e){const t=this.sliceSerialize(e),n=this.data.characterReferenceType;let r;n?(r=Bo(t,"characterReferenceMarkerNumeric"===n?10:16),this.data.characterReferenceType=void 0):r=ro(t);const o=this.stack.pop();o.value+=r,o.position.end=_o(e.end)},codeFenced:l((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g,""),this.data.flowCodeInside=void 0})),codeFencedFence:function(){this.data.flowCodeInside||(this.buffer(),this.data.flowCodeInside=!0)},codeFencedFenceInfo:function(){const e=this.resume();this.stack[this.stack.length-1].lang=e},codeFencedFenceMeta:function(){const e=this.resume();this.stack[this.stack.length-1].meta=e},codeFlowValue:f,codeIndented:l((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/(\r?\n|\r)$/g,"")})),codeText:l((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),codeTextData:f,data:f,definition:l(),definitionDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},definitionLabelString:function(e){const t=this.resume(),n=this.stack[this.stack.length-1];n.label=t,n.identifier=Wr(this.sliceSerialize(e)).toLowerCase()},definitionTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},emphasis:l(),hardBreakEscape:l(d),hardBreakTrailing:l(d),htmlFlow:l((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlFlowData:f,htmlText:l((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlTextData:f,image:l((function(){const e=this.stack[this.stack.length-1];if(this.data.inReference){const t=this.data.referenceType||"shortcut";e.type+="Reference",e.referenceType=t,delete e.url,delete e.title}else delete e.identifier,delete e.label;this.data.referenceType=void 0})),label:function(){const e=this.stack[this.stack.length-1],t=this.resume(),n=this.stack[this.stack.length-1];if(this.data.inReference=!0,"link"===n.type){const t=e.children;n.children=t}else n.alt=t},labelText:function(e){const t=this.sliceSerialize(e),n=this.stack[this.stack.length-2];n.label=function(e){return e.replace(Io,Oo)}(t),n.identifier=Wr(t).toLowerCase()},lineEnding:function(e){const n=this.stack[this.stack.length-1];if(this.data.atHardBreak)return n.children[n.children.length-1].position.end=_o(e.end),void(this.data.atHardBreak=void 0);!this.data.setextHeadingSlurpLineEnding&&t.canContainEols.includes(n.type)&&(s.call(this,e),f.call(this,e))},link:l((function(){const e=this.stack[this.stack.length-1];if(this.data.inReference){const t=this.data.referenceType||"shortcut";e.type+="Reference",e.referenceType=t,delete e.url,delete e.title}else delete e.identifier,delete e.label;this.data.referenceType=void 0})),listItem:l(),listOrdered:l(),listUnordered:l(),paragraph:l(),referenceString:function(e){const t=this.resume(),n=this.stack[this.stack.length-1];n.label=t,n.identifier=Wr(this.sliceSerialize(e)).toLowerCase(),this.data.referenceType="full"},resourceDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},resourceTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},resource:function(){this.data.inReference=void 0},setextHeading:l((function(){this.data.setextHeadingSlurpLineEnding=void 0})),setextHeadingLineSequence:function(e){this.stack[this.stack.length-1].depth=61===this.sliceSerialize(e).codePointAt(0)?1:2},setextHeadingText:function(){this.data.setextHeadingSlurpLineEnding=!0},strong:l(),thematicBreak:l()}};To(t,(e||{}).mdastExtensions||[]);const n={};return function(e){let o={type:"root",children:[]};const l={stack:[o],tokenStack:[],config:t,enter:a,exit:u,buffer:i,resume:c,data:n},s=[];let f=-1;for(;++f<e.length;)"listOrdered"!==e[f][1].type&&"listUnordered"!==e[f][1].type||("enter"===e[f][0]?s.push(f):f=r(e,s.pop(),f));for(f=-1;++f<e.length;){const n=t[e[f][0]];Po.call(n,e[f][1].type)&&n[e[f][1].type].call(Object.assign({sliceSerialize:e[f][2].sliceSerialize},l),e[f][1])}if(l.tokenStack.length>0){const e=l.tokenStack[l.tokenStack.length-1];(e[1]||No).call(l,void 0,e[0])}for(o.position={start:_o(e.length>0?e[0][1].start:{line:1,column:1,offset:0}),end:_o(e.length>0?e[e.length-2][1].end:{line:1,column:1,offset:0})},f=-1;++f<t.transforms.length;)o=t.transforms[f](o)||o;return o};function r(e,t,n){let r,o,i,a,l=t-1,u=-1,c=!1;for(;++l<=n;){const t=e[l];switch(t[1].type){case"listUnordered":case"listOrdered":case"blockQuote":"enter"===t[0]?u++:u--,a=void 0;break;case"lineEndingBlank":"enter"===t[0]&&(!r||a||u||i||(i=l),a=void 0);break;case"linePrefix":case"listItemValue":case"listItemMarker":case"listItemPrefix":case"listItemPrefixWhitespace":break;default:a=void 0}if(!u&&"enter"===t[0]&&"listItemPrefix"===t[1].type||-1===u&&"exit"===t[0]&&("listUnordered"===t[1].type||"listOrdered"===t[1].type)){if(r){let a=l;for(o=void 0;a--;){const t=e[a];if("lineEnding"===t[1].type||"lineEndingBlank"===t[1].type){if("exit"===t[0])continue;o&&(e[o][1].type="lineEndingBlank",c=!0),t[1].type="lineEnding",o=a}else if("linePrefix"!==t[1].type&&"blockQuotePrefix"!==t[1].type&&"blockQuotePrefixWhitespace"!==t[1].type&&"blockQuoteMarker"!==t[1].type&&"listItemIndent"!==t[1].type)break}i&&(!o||i<o)&&(r._spread=!0),r.end=Object.assign({},o?e[o][1].start:t[1].end),e.splice(o||l,0,["exit",r,t[2]]),l++,n++}if("listItemPrefix"===t[1].type){const o={type:"listItem",_spread:!1,start:Object.assign({},t[1].start),end:void 0};r=o,e.splice(l,0,["enter",o,t[2]]),l++,n++,i=void 0,a=!0}}}return e[t][1]._spread=c,n}function o(e,t){return function(n){a.call(this,e(n),n),t&&t.call(this,n)}}function i(){this.stack.push({type:"fragment",children:[]})}function a(e,t,n){this.stack[this.stack.length-1].children.push(e),this.stack.push(e),this.tokenStack.push([t,n]),e.position={start:_o(t.start),end:void 0}}function l(e){return function(t){e&&e.call(this,t),u.call(this,t)}}function u(e,t){const n=this.stack.pop(),r=this.tokenStack.pop();if(!r)throw new Error("Cannot close `"+e.type+"` ("+Bn({start:e.start,end:e.end})+"): it’s not open");r[0].type!==e.type&&(t?t.call(this,e,r[0]):(r[1]||No).call(this,e,r[0])),n.position.end=_o(e.end)}function c(){return function(e,t){const n=lr;return ur(e,"boolean"!=typeof n.includeImageAlt||n.includeImageAlt,"boolean"!=typeof n.includeHtml||n.includeHtml)}(this.stack.pop())}function s(e){const t=this.stack[this.stack.length-1].children;let n=t[t.length-1];n&&"text"===n.type||(n={type:"text",value:""},n.position={start:_o(e.start),end:void 0},t.push(n)),this.stack.push(n)}function f(e){const t=this.stack.pop();t.value+=this.sliceSerialize(e),t.position.end=_o(e.end)}function d(){this.data.atHardBreak=!0}function p(e){this.data.characterReferenceType=e.type}function h(){return{type:"code",lang:null,meta:null,value:""}}function m(){return{type:"heading",depth:0,children:[]}}function g(){return{type:"break"}}function v(){return{type:"html",value:""}}function y(){return{type:"link",title:null,url:"",children:[]}}function A(e){return{type:"list",ordered:"listOrdered"===e.type,start:null,spread:e._spread,children:[]}}}(n)(function(e){for(;!dr(e););return e}(function(e){const t=function(e){const t={};let n=-1;for(;++n<e.length;)mr(t,e[n]);return t}([o,...(e||{}).extensions||[]]),n={defined:[],lazy:{},constructs:t,content:r(yr),document:r(Ar),flow:r(Cr),string:r(Sr),text:r(Br)};return n;function r(e){return function(t){return _r(n,e,t)}}}(n).document().write(function(){let e,t=1,n="",r=!0;return function(o,i,a){const l=[];let u,c,s,f,d;for(o=n+("string"==typeof o?o.toString():new TextDecoder(i||void 0).decode(o)),s=0,n="",r&&(65279===o.charCodeAt(0)&&s++,r=void 0);s<o.length;){if(So.lastIndex=s,u=So.exec(o),f=u&&void 0!==u.index?u.index:o.length,d=o.charCodeAt(f),!u){n=o.slice(s);break}if(10===d&&s===f&&e)l.push(-3),e=void 0;else switch(e&&(l.push(-5),e=void 0),s<f&&(l.push(o.slice(s,f)),t+=f-s),d){case 0:l.push(65533),t++;break;case 9:for(c=4*Math.ceil(t/4),l.push(-2);t++<c;)l.push(-1);break;case 10:l.push(-4),t=1;break;default:e=!0,t=1}s=f+1}return a&&(e&&l.push(-5),n&&l.push(n),l.push(null)),l}}()(e,t,!0))))}function _o(e){return{line:e.line,column:e.column,offset:e.offset}}function To(e,t){let n=-1;for(;++n<t.length;){const r=t[n];Array.isArray(r)?To(e,r):Lo(e,r)}}function Lo(e,t){let n;for(n in t)if(Po.call(t,n))switch(n){case"canContainEols":{const r=t[n];r&&e[n].push(...r);break}case"transforms":{const r=t[n];r&&e[n].push(...r);break}case"enter":case"exit":{const r=t[n];r&&Object.assign(e[n],r);break}}}function No(e,t){throw e?new Error("Cannot close `"+e.type+"` ("+Bn({start:e.start,end:e.end})+"): a different token (`"+t.type+"`, "+Bn({start:t.start,end:t.end})+") is open"):new Error("Cannot close document, a token (`"+t.type+"`, "+Bn({start:t.start,end:t.end})+") is still open")}function jo(e){const t=this;t.parser=function(n){return Fo(n,{...t.data("settings"),...e,extensions:t.data("micromarkExtensions")||[],mdastExtensions:t.data("fromMarkdownExtensions")||[]})}}const Ro="object"==typeof self?self:globalThis,Mo=e=>((e,t)=>{const n=(t,n)=>(e.set(n,t),t),r=o=>{if(e.has(o))return e.get(o);const[i,a]=t[o];switch(i){case 0:case-1:return n(a,o);case 1:{const e=n([],o);for(const t of a)e.push(r(t));return e}case 2:{const e=n({},o);for(const[t,n]of a)e[r(t)]=r(n);return e}case 3:return n(new Date(a),o);case 4:{const{source:e,flags:t}=a;return n(new RegExp(e,t),o)}case 5:{const e=n(new Map,o);for(const[t,n]of a)e.set(r(t),r(n));return e}case 6:{const e=n(new Set,o);for(const t of a)e.add(r(t));return e}case 7:{const{name:e,message:t}=a;return n(new Ro[e](t),o)}case 8:return n(BigInt(a),o);case"BigInt":return n(Object(BigInt(a)),o)}return n(new Ro[i](a),o)};return r})(new Map,e)(0),zo="",{toString:Do}={},{keys:Uo}=Object,Wo=e=>{const t=typeof e;if("object"!==t||!e)return[0,t];const n=Do.call(e).slice(8,-1);switch(n){case"Array":return[1,zo];case"Object":return[2,zo];case"Date":return[3,zo];case"RegExp":return[4,zo];case"Map":return[5,zo];case"Set":return[6,zo]}return n.includes("Array")?[1,n]:n.includes("Error")?[7,n]:[2,n]},qo=([e,t])=>0===e&&("function"===t||"symbol"===t),Vo=(e,{json:t,lossy:n}={})=>{const r=[];return((e,t,n,r)=>{const o=(e,t)=>{const o=r.push(e)-1;return n.set(t,o),o},i=r=>{if(n.has(r))return n.get(r);let[a,l]=Wo(r);switch(a){case 0:{let t=r;switch(l){case"bigint":a=8,t=r.toString();break;case"function":case"symbol":if(e)throw new TypeError("unable to serialize "+l);t=null;break;case"undefined":return o([-1],r)}return o([a,t],r)}case 1:{if(l)return o([l,[...r]],r);const e=[],t=o([a,e],r);for(const t of r)e.push(i(t));return t}case 2:{if(l)switch(l){case"BigInt":return o([l,r.toString()],r);case"Boolean":case"Number":case"String":return o([l,r.valueOf()],r)}if(t&&"toJSON"in r)return i(r.toJSON());const n=[],u=o([a,n],r);for(const t of Uo(r))!e&&qo(Wo(r[t]))||n.push([i(t),i(r[t])]);return u}case 3:return o([a,r.toISOString()],r);case 4:{const{source:e,flags:t}=r;return o([a,{source:e,flags:t}],r)}case 5:{const t=[],n=o([a,t],r);for(const[n,o]of r)(e||!qo(Wo(n))&&!qo(Wo(o)))&&t.push([i(n),i(o)]);return n}case 6:{const t=[],n=o([a,t],r);for(const n of r)!e&&qo(Wo(n))||t.push(i(n));return n}}const{message:u}=r;return o([a,{name:l,message:u}],r)};return i})(!(t||n),!!t,new Map,r)(e),r},Ho="function"==typeof structuredClone?(e,t)=>t&&("json"in t||"lossy"in t)?Mo(Vo(e,t)):structuredClone(e):(e,t)=>Mo(Vo(e,t));function Qo(e,t){const n=[{type:"text",value:"↩"}];return t>1&&n.push({type:"element",tagName:"sup",properties:{},children:[{type:"text",value:String(t)}]}),n}function Yo(e,t){return"Back to reference "+(e+1)+(t>1?"-"+t:"")}const Go=function(e){if(null==e)return Xo;if("function"==typeof e)return $o(e);if("object"==typeof e)return Array.isArray(e)?function(e){const t=[];let n=-1;for(;++n<e.length;)t[n]=Go(e[n]);return $o((function(...e){let n=-1;for(;++n<t.length;)if(t[n].apply(this,e))return!0;return!1}))}(e):function(e){const t=e;return $o((function(n){const r=n;let o;for(o in e)if(r[o]!==t[o])return!1;return!0}))}(e);if("string"==typeof e)return t=e,$o((function(e){return e&&e.type===t}));var t;throw new Error("Expected function, string, or object as test")};function $o(e){return function(t,n,r){return Boolean(function(e){return null!==e&&"object"==typeof e&&"type"in e}(t)&&e.call(this,t,"number"==typeof n?n:void 0,r||void 0))}}function Xo(){return!0}const Ko=[],Jo=!0,Zo=!1,ei="skip";function ti(e,t,n,r){let o,i,a;"function"==typeof t&&"function"!=typeof n?(i=void 0,a=t,o=n):(i=t,a=n,o=r),function(e,t,n,r){let o;"function"==typeof t&&"function"!=typeof n?(r=n,n=t):o=t;const i=Go(o),a=r?-1:1;!function e(o,l,u){const c=o&&"object"==typeof o?o:{};if("string"==typeof c.type){const e="string"==typeof c.tagName?c.tagName:"string"==typeof c.name?c.name:void 0;Object.defineProperty(s,"name",{value:"node ("+o.type+(e?"<"+e+">":"")+")"})}return s;function s(){let c,s,f,d=Ko;if((!t||i(o,l,u[u.length-1]||void 0))&&(d=function(e){return Array.isArray(e)?e:"number"==typeof e?[Jo,e]:null==e?Ko:[e]}(n(o,u)),d[0]===Zo))return d;if("children"in o&&o.children){const t=o;if(t.children&&d[0]!==ei)for(s=(r?t.children.length:-1)+a,f=u.concat(t);s>-1&&s<t.children.length;){const n=t.children[s];if(c=e(n,s,f)(),c[0]===Zo)return c;s="number"==typeof c[1]?c[1]:s+a}}return d}}(e,void 0,[])()}(e,i,(function(e,t){const n=t[t.length-1],r=n?n.children.indexOf(e):void 0;return a(e,r,n)}),o)}function ni(e,t){const n=t.referenceType;let r="]";if("collapsed"===n?r+="[]":"full"===n&&(r+="["+(t.label||t.identifier)+"]"),"imageReference"===t.type)return[{type:"text",value:"!["+t.alt+r}];const o=e.all(t),i=o[0];i&&"text"===i.type?i.value="["+i.value:o.unshift({type:"text",value:"["});const a=o[o.length-1];return a&&"text"===a.type?a.value+=r:o.push({type:"text",value:r}),o}function ri(e){const t=e.spread;return null==t?e.children.length>1:t}const oi=9,ii=32;function ai(e){const t=String(e),n=/\r?\n|\r/g;let r=n.exec(t),o=0;const i=[];for(;r;)i.push(li(t.slice(o,r.index),o>0,!0),r[0]),o=r.index+r[0].length,r=n.exec(t);return i.push(li(t.slice(o),o>0,!1)),i.join("")}function li(e,t,n){let r=0,o=e.length;if(t){let t=e.codePointAt(r);for(;t===oi||t===ii;)r++,t=e.codePointAt(r)}if(n){let t=e.codePointAt(o-1);for(;t===oi||t===ii;)o--,t=e.codePointAt(o-1)}return o>r?e.slice(r,o):""}const ui={blockquote:function(e,t){const n={type:"element",tagName:"blockquote",properties:{},children:e.wrap(e.all(t),!0)};return e.patch(t,n),e.applyData(t,n)},break:function(e,t){const n={type:"element",tagName:"br",properties:{},children:[]};return e.patch(t,n),[e.applyData(t,n),{type:"text",value:"\n"}]},code:function(e,t){const n=t.value?t.value+"\n":"",r={};t.lang&&(r.className=["language-"+t.lang]);let o={type:"element",tagName:"code",properties:r,children:[{type:"text",value:n}]};return t.meta&&(o.data={meta:t.meta}),e.patch(t,o),o=e.applyData(t,o),o={type:"element",tagName:"pre",properties:{},children:[o]},e.patch(t,o),o},delete:function(e,t){const n={type:"element",tagName:"del",properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},emphasis:function(e,t){const n={type:"element",tagName:"em",properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},footnoteReference:function(e,t){const n="string"==typeof e.options.clobberPrefix?e.options.clobberPrefix:"user-content-",r=String(t.identifier).toUpperCase(),o=ir(r.toLowerCase()),i=e.footnoteOrder.indexOf(r);let a,l=e.footnoteCounts.get(r);void 0===l?(l=0,e.footnoteOrder.push(r),a=e.footnoteOrder.length):a=i+1,l+=1,e.footnoteCounts.set(r,l);const u={type:"element",tagName:"a",properties:{href:"#"+n+"fn-"+o,id:n+"fnref-"+o+(l>1?"-"+l:""),dataFootnoteRef:!0,ariaDescribedBy:["footnote-label"]},children:[{type:"text",value:String(a)}]};e.patch(t,u);const c={type:"element",tagName:"sup",properties:{},children:[u]};return e.patch(t,c),e.applyData(t,c)},heading:function(e,t){const n={type:"element",tagName:"h"+t.depth,properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},html:function(e,t){if(e.options.allowDangerousHtml){const n={type:"raw",value:t.value};return e.patch(t,n),e.applyData(t,n)}},imageReference:function(e,t){const n=String(t.identifier).toUpperCase(),r=e.definitionById.get(n);if(!r)return ni(e,t);const o={src:ir(r.url||""),alt:t.alt};null!==r.title&&void 0!==r.title&&(o.title=r.title);const i={type:"element",tagName:"img",properties:o,children:[]};return e.patch(t,i),e.applyData(t,i)},image:function(e,t){const n={src:ir(t.url)};null!==t.alt&&void 0!==t.alt&&(n.alt=t.alt),null!==t.title&&void 0!==t.title&&(n.title=t.title);const r={type:"element",tagName:"img",properties:n,children:[]};return e.patch(t,r),e.applyData(t,r)},inlineCode:function(e,t){const n={type:"text",value:t.value.replace(/\r?\n|\r/g," ")};e.patch(t,n);const r={type:"element",tagName:"code",properties:{},children:[n]};return e.patch(t,r),e.applyData(t,r)},linkReference:function(e,t){const n=String(t.identifier).toUpperCase(),r=e.definitionById.get(n);if(!r)return ni(e,t);const o={href:ir(r.url||"")};null!==r.title&&void 0!==r.title&&(o.title=r.title);const i={type:"element",tagName:"a",properties:o,children:e.all(t)};return e.patch(t,i),e.applyData(t,i)},link:function(e,t){const n={href:ir(t.url)};null!==t.title&&void 0!==t.title&&(n.title=t.title);const r={type:"element",tagName:"a",properties:n,children:e.all(t)};return e.patch(t,r),e.applyData(t,r)},listItem:function(e,t,n){const r=e.all(t),o=n?function(e){let t=!1;if("list"===e.type){t=e.spread||!1;const n=e.children;let r=-1;for(;!t&&++r<n.length;)t=ri(n[r])}return t}(n):ri(t),i={},a=[];if("boolean"==typeof t.checked){const e=r[0];let n;e&&"element"===e.type&&"p"===e.tagName?n=e:(n={type:"element",tagName:"p",properties:{},children:[]},r.unshift(n)),n.children.length>0&&n.children.unshift({type:"text",value:" "}),n.children.unshift({type:"element",tagName:"input",properties:{type:"checkbox",checked:t.checked,disabled:!0},children:[]}),i.className=["task-list-item"]}let l=-1;for(;++l<r.length;){const e=r[l];(o||0!==l||"element"!==e.type||"p"!==e.tagName)&&a.push({type:"text",value:"\n"}),"element"!==e.type||"p"!==e.tagName||o?a.push(e):a.push(...e.children)}const u=r[r.length-1];u&&(o||"element"!==u.type||"p"!==u.tagName)&&a.push({type:"text",value:"\n"});const c={type:"element",tagName:"li",properties:i,children:a};return e.patch(t,c),e.applyData(t,c)},list:function(e,t){const n={},r=e.all(t);let o=-1;for("number"==typeof t.start&&1!==t.start&&(n.start=t.start);++o<r.length;){const e=r[o];if("element"===e.type&&"li"===e.tagName&&e.properties&&Array.isArray(e.properties.className)&&e.properties.className.includes("task-list-item")){n.className=["contains-task-list"];break}}const i={type:"element",tagName:t.ordered?"ol":"ul",properties:n,children:e.wrap(r,!0)};return e.patch(t,i),e.applyData(t,i)},paragraph:function(e,t){const n={type:"element",tagName:"p",properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},root:function(e,t){const n={type:"root",children:e.wrap(e.all(t))};return e.patch(t,n),e.applyData(t,n)},strong:function(e,t){const n={type:"element",tagName:"strong",properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},table:function(e,t){const n=e.all(t),r=n.shift(),o=[];if(r){const n={type:"element",tagName:"thead",properties:{},children:e.wrap([r],!0)};e.patch(t.children[0],n),o.push(n)}if(n.length>0){const r={type:"element",tagName:"tbody",properties:{},children:e.wrap(n,!0)},i=kn(t.children[1]),a=Cn(t.children[t.children.length-1]);i&&a&&(r.position={start:i,end:a}),o.push(r)}const i={type:"element",tagName:"table",properties:{},children:e.wrap(o,!0)};return e.patch(t,i),e.applyData(t,i)},tableCell:function(e,t){const n={type:"element",tagName:"td",properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},tableRow:function(e,t,n){const r=n?n.children:void 0,o=0===(r?r.indexOf(t):1)?"th":"td",i=n&&"table"===n.type?n.align:void 0,a=i?i.length:t.children.length;let l=-1;const u=[];for(;++l<a;){const n=t.children[l],r={},a=i?i[l]:void 0;a&&(r.align=a);let c={type:"element",tagName:o,properties:r,children:[]};n&&(c.children=e.all(n),e.patch(n,c),c=e.applyData(n,c)),u.push(c)}const c={type:"element",tagName:"tr",properties:{},children:e.wrap(u,!0)};return e.patch(t,c),e.applyData(t,c)},text:function(e,t){const n={type:"text",value:ai(String(t.value))};return e.patch(t,n),e.applyData(t,n)},thematicBreak:function(e,t){const n={type:"element",tagName:"hr",properties:{},children:[]};return e.patch(t,n),e.applyData(t,n)},toml:ci,yaml:ci,definition:ci,footnoteDefinition:ci};function ci(){}const si={}.hasOwnProperty,fi={};function di(e,t){e.position&&(t.position=function(e){const t=kn(e),n=Cn(e);if(t&&n)return{start:t,end:n}}(e))}function pi(e,t){let n=t;if(e&&e.data){const t=e.data.hName,r=e.data.hChildren,o=e.data.hProperties;"string"==typeof t&&("element"===n.type?n.tagName=t:n={type:"element",tagName:t,properties:{},children:"children"in n?n.children:[n]}),"element"===n.type&&o&&Object.assign(n.properties,Ho(o)),"children"in n&&n.children&&null!=r&&(n.children=r)}return n}function hi(e,t){const n=t.data||{},r=!("value"in t)||si.call(n,"hProperties")||si.call(n,"hChildren")?{type:"element",tagName:"div",properties:{},children:e.all(t)}:{type:"text",value:t.value};return e.patch(t,r),e.applyData(t,r)}function mi(e,t){const n=[];let r=-1;for(t&&n.push({type:"text",value:"\n"});++r<e.length;)r&&n.push({type:"text",value:"\n"}),n.push(e[r]);return t&&e.length>0&&n.push({type:"text",value:"\n"}),n}function gi(e){let t=0,n=e.charCodeAt(t);for(;9===n||32===n;)t++,n=e.charCodeAt(t);return e.slice(t)}function vi(e,t){const n=function(e,t){const n=t||fi,r=new Map,o=new Map,i=new Map,a={...ui,...n.handlers},l={all:function(e){const t=[];if("children"in e){const n=e.children;let r=-1;for(;++r<n.length;){const o=l.one(n[r],e);if(o){if(r&&"break"===n[r-1].type&&(Array.isArray(o)||"text"!==o.type||(o.value=gi(o.value)),!Array.isArray(o)&&"element"===o.type)){const e=o.children[0];e&&"text"===e.type&&(e.value=gi(e.value))}Array.isArray(o)?t.push(...o):t.push(o)}}}return t},applyData:pi,definitionById:r,footnoteById:o,footnoteCounts:i,footnoteOrder:[],handlers:a,one:function(e,t){const n=e.type,r=l.handlers[n];if(si.call(l.handlers,n)&&r)return r(l,e,t);if(l.options.passThrough&&l.options.passThrough.includes(n)){if("children"in e){const{children:t,...n}=e,r=Ho(n);return r.children=l.all(e),r}return Ho(e)}return(l.options.unknownHandler||hi)(l,e,t)},options:n,patch:di,wrap:mi};return ti(e,(function(e){if("definition"===e.type||"footnoteDefinition"===e.type){const t="definition"===e.type?r:o,n=String(e.identifier).toUpperCase();t.has(n)||t.set(n,e)}})),l}(e,t),r=n.one(e,void 0),o=function(e){const t="string"==typeof e.options.clobberPrefix?e.options.clobberPrefix:"user-content-",n=e.options.footnoteBackContent||Qo,r=e.options.footnoteBackLabel||Yo,o=e.options.footnoteLabel||"Footnotes",i=e.options.footnoteLabelTagName||"h2",a=e.options.footnoteLabelProperties||{className:["sr-only"]},l=[];let u=-1;for(;++u<e.footnoteOrder.length;){const o=e.footnoteById.get(e.footnoteOrder[u]);if(!o)continue;const i=e.all(o),a=String(o.identifier).toUpperCase(),c=ir(a.toLowerCase());let s=0;const f=[],d=e.footnoteCounts.get(a);for(;void 0!==d&&++s<=d;){f.length>0&&f.push({type:"text",value:" "});let e="string"==typeof n?n:n(u,s);"string"==typeof e&&(e={type:"text",value:e}),f.push({type:"element",tagName:"a",properties:{href:"#"+t+"fnref-"+c+(s>1?"-"+s:""),dataFootnoteBackref:"",ariaLabel:"string"==typeof r?r:r(u,s),className:["data-footnote-backref"]},children:Array.isArray(e)?e:[e]})}const p=i[i.length-1];if(p&&"element"===p.type&&"p"===p.tagName){const e=p.children[p.children.length-1];e&&"text"===e.type?e.value+=" ":p.children.push({type:"text",value:" "}),p.children.push(...f)}else i.push(...f);const h={type:"element",tagName:"li",properties:{id:t+"fn-"+c},children:e.wrap(i,!0)};e.patch(o,h),l.push(h)}if(0!==l.length)return{type:"element",tagName:"section",properties:{dataFootnotes:!0,className:["footnotes"]},children:[{type:"element",tagName:i,properties:{...Ho(a),id:"footnote-label"},children:[{type:"text",value:o}]},{type:"text",value:"\n"},{type:"element",tagName:"ol",properties:{},children:e.wrap(l,!0)},{type:"text",value:"\n"}]}}(n),i=Array.isArray(r)?{type:"root",children:r}:r||{type:"root",children:[]};return o&&i.children.push({type:"text",value:"\n"},o),i}function yi(e,t){return e&&"run"in e?async function(n,r){const o=vi(n,t);await e.run(o,r)}:function(n){return vi(n,t||e)}}function Ai(e){if(e)throw e}var bi=n(94470);function wi(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}const xi={basename:function(e,t){if(void 0!==t&&"string"!=typeof t)throw new TypeError('"ext" argument must be a string');Ei(e);let n,r=0,o=-1,i=e.length;if(void 0===t||0===t.length||t.length>e.length){for(;i--;)if(47===e.codePointAt(i)){if(n){r=i+1;break}}else o<0&&(n=!0,o=i+1);return o<0?"":e.slice(r,o)}if(t===e)return"";let a=-1,l=t.length-1;for(;i--;)if(47===e.codePointAt(i)){if(n){r=i+1;break}}else a<0&&(n=!0,a=i+1),l>-1&&(e.codePointAt(i)===t.codePointAt(l--)?l<0&&(o=i):(l=-1,o=a));return r===o?o=a:o<0&&(o=e.length),e.slice(r,o)},dirname:function(e){if(Ei(e),0===e.length)return".";let t,n=-1,r=e.length;for(;--r;)if(47===e.codePointAt(r)){if(t){n=r;break}}else t||(t=!0);return n<0?47===e.codePointAt(0)?"/":".":1===n&&47===e.codePointAt(0)?"//":e.slice(0,n)},extname:function(e){Ei(e);let t,n=e.length,r=-1,o=0,i=-1,a=0;for(;n--;){const l=e.codePointAt(n);if(47!==l)r<0&&(t=!0,r=n+1),46===l?i<0?i=n:1!==a&&(a=1):i>-1&&(a=-1);else if(t){o=n+1;break}}return i<0||r<0||0===a||1===a&&i===r-1&&i===o+1?"":e.slice(i,r)},join:function(...e){let t,n=-1;for(;++n<e.length;)Ei(e[n]),e[n]&&(t=void 0===t?e[n]:t+"/"+e[n]);return void 0===t?".":function(e){Ei(e);const t=47===e.codePointAt(0);let n=function(e,t){let n,r,o="",i=0,a=-1,l=0,u=-1;for(;++u<=e.length;){if(u<e.length)n=e.codePointAt(u);else{if(47===n)break;n=47}if(47===n){if(a===u-1||1===l);else if(a!==u-1&&2===l){if(o.length<2||2!==i||46!==o.codePointAt(o.length-1)||46!==o.codePointAt(o.length-2))if(o.length>2){if(r=o.lastIndexOf("/"),r!==o.length-1){r<0?(o="",i=0):(o=o.slice(0,r),i=o.length-1-o.lastIndexOf("/")),a=u,l=0;continue}}else if(o.length>0){o="",i=0,a=u,l=0;continue}t&&(o=o.length>0?o+"/..":"..",i=2)}else o.length>0?o+="/"+e.slice(a+1,u):o=e.slice(a+1,u),i=u-a-1;a=u,l=0}else 46===n&&l>-1?l++:l=-1}return o}(e,!t);return 0!==n.length||t||(n="."),n.length>0&&47===e.codePointAt(e.length-1)&&(n+="/"),t?"/"+n:n}(t)},sep:"/"};function Ei(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}const Ci=function(){return"/"};function ki(e){return Boolean(null!==e&&"object"==typeof e&&"href"in e&&e.href&&"protocol"in e&&e.protocol&&void 0===e.auth)}const Si=["history","path","basename","stem","extname","dirname"];class Bi{constructor(e){let t;t=e?ki(e)?{path:e}:"string"==typeof e||function(e){return Boolean(e&&"object"==typeof e&&"byteLength"in e&&"byteOffset"in e)}(e)?{value:e}:e:{},this.cwd=Ci(),this.data={},this.history=[],this.messages=[],this.value,this.map,this.result,this.stored;let n,r=-1;for(;++r<Si.length;){const e=Si[r];e in t&&void 0!==t[e]&&null!==t[e]&&(this[e]="history"===e?[...t[e]]:t[e])}for(n in t)Si.includes(n)||(this[n]=t[n])}get basename(){return"string"==typeof this.path?xi.basename(this.path):void 0}set basename(e){Oi(e,"basename"),Ii(e,"basename"),this.path=xi.join(this.dirname||"",e)}get dirname(){return"string"==typeof this.path?xi.dirname(this.path):void 0}set dirname(e){Pi(this.basename,"dirname"),this.path=xi.join(e||"",this.basename)}get extname(){return"string"==typeof this.path?xi.extname(this.path):void 0}set extname(e){if(Ii(e,"extname"),Pi(this.dirname,"extname"),e){if(46!==e.codePointAt(0))throw new Error("`extname` must start with `.`");if(e.includes(".",1))throw new Error("`extname` cannot contain multiple dots")}this.path=xi.join(this.dirname,this.stem+(e||""))}get path(){return this.history[this.history.length-1]}set path(e){ki(e)&&(e=function(e){if("string"==typeof e)e=new URL(e);else if(!ki(e)){const t=new TypeError('The "path" argument must be of type string or an instance of URL. Received `'+e+"`");throw t.code="ERR_INVALID_ARG_TYPE",t}if("file:"!==e.protocol){const e=new TypeError("The URL must be of scheme file");throw e.code="ERR_INVALID_URL_SCHEME",e}return function(e){if(""!==e.hostname){const e=new TypeError('File URL host must be "localhost" or empty on darwin');throw e.code="ERR_INVALID_FILE_URL_HOST",e}const t=e.pathname;let n=-1;for(;++n<t.length;)if(37===t.codePointAt(n)&&50===t.codePointAt(n+1)){const e=t.codePointAt(n+2);if(70===e||102===e){const e=new TypeError("File URL path must not include encoded / characters");throw e.code="ERR_INVALID_FILE_URL_PATH",e}}return decodeURIComponent(t)}(e)}(e)),Oi(e,"path"),this.path!==e&&this.history.push(e)}get stem(){return"string"==typeof this.path?xi.basename(this.path,this.extname):void 0}set stem(e){Oi(e,"stem"),Ii(e,"stem"),this.path=xi.join(this.dirname||"",e+(this.extname||""))}fail(e,t,n){const r=this.message(e,t,n);throw r.fatal=!0,r}info(e,t,n){const r=this.message(e,t,n);return r.fatal=void 0,r}message(e,t,n){const r=new Fn(e,t,n);return this.path&&(r.name=this.path+":"+r.name,r.file=this.path),r.fatal=!1,this.messages.push(r),r}toString(e){return void 0===this.value?"":"string"==typeof this.value?this.value:new TextDecoder(e||void 0).decode(this.value)}}function Ii(e,t){if(e&&e.includes(xi.sep))throw new Error("`"+t+"` cannot be a path: did not expect `"+xi.sep+"`")}function Oi(e,t){if(!e)throw new Error("`"+t+"` cannot be empty")}function Pi(e,t){if(!e)throw new Error("Setting `"+t+"` requires `path` to be set too")}const Fi=function(e){const t=this.constructor.prototype,n=t[e],r=function(){return n.apply(r,arguments)};Object.setPrototypeOf(r,t);const o=Object.getOwnPropertyNames(n);for(const e of o){const t=Object.getOwnPropertyDescriptor(n,e);t&&Object.defineProperty(r,e,t)}return r},_i={}.hasOwnProperty;class Ti extends Fi{constructor(){super("copy"),this.Compiler=void 0,this.Parser=void 0,this.attachers=[],this.compiler=void 0,this.freezeIndex=-1,this.frozen=void 0,this.namespace={},this.parser=void 0,this.transformers=function(){const e=[],t={run:function(...t){let n=-1;const r=t.pop();if("function"!=typeof r)throw new TypeError("Expected function as last argument, not "+r);!function o(i,...a){const l=e[++n];let u=-1;if(i)r(i);else{for(;++u<t.length;)null!==a[u]&&void 0!==a[u]||(a[u]=t[u]);t=a,l?function(e,t){let n;return function(...t){const i=e.length>t.length;let a;i&&t.push(r);try{a=e.apply(this,t)}catch(e){if(i&&n)throw e;return r(e)}i||(a instanceof Promise?a.then(o,r):a instanceof Error?r(a):o(a))};function r(e,...r){n||(n=!0,t(e,...r))}function o(e){r(null,e)}}(l,o)(...a):r(null,...a)}}(null,...t)},use:function(n){if("function"!=typeof n)throw new TypeError("Expected `middelware` to be a function, not "+n);return e.push(n),t}};return t}()}copy(){const e=new Ti;let t=-1;for(;++t<this.attachers.length;){const n=this.attachers[t];e.use(...n)}return e.data(bi(!0,{},this.namespace)),e}data(e,t){return"string"==typeof e?2===arguments.length?(Ri("data",this.frozen),this.namespace[e]=t,this):_i.call(this.namespace,e)&&this.namespace[e]||void 0:e?(Ri("data",this.frozen),this.namespace=e,this):this.namespace}freeze(){if(this.frozen)return this;const e=this;for(;++this.freezeIndex<this.attachers.length;){const[t,...n]=this.attachers[this.freezeIndex];if(!1===n[0])continue;!0===n[0]&&(n[0]=void 0);const r=t.call(e,...n);"function"==typeof r&&this.transformers.use(r)}return this.frozen=!0,this.freezeIndex=Number.POSITIVE_INFINITY,this}parse(e){this.freeze();const t=Di(e),n=this.parser||this.Parser;return Ni("parse",n),n(String(t),t)}process(e,t){const n=this;return this.freeze(),Ni("process",this.parser||this.Parser),ji("process",this.compiler||this.Compiler),t?r(void 0,t):new Promise(r);function r(r,o){const i=Di(e),a=n.parse(i);function l(e,n){e||!n?o(e):r?r(n):t(void 0,n)}n.run(a,i,(function(e,t,r){if(e||!t||!r)return l(e);const o=t,i=n.stringify(o,r);var a;"string"==typeof(a=i)||function(e){return Boolean(e&&"object"==typeof e&&"byteLength"in e&&"byteOffset"in e)}(a)?r.value=i:r.result=i,l(e,r)}))}}processSync(e){let t,n=!1;return this.freeze(),Ni("processSync",this.parser||this.Parser),ji("processSync",this.compiler||this.Compiler),this.process(e,(function(e,r){n=!0,Ai(e),t=r})),zi("processSync","process",n),t}run(e,t,n){Mi(e),this.freeze();const r=this.transformers;return n||"function"!=typeof t||(n=t,t=void 0),n?o(void 0,n):new Promise(o);function o(o,i){const a=Di(t);r.run(e,a,(function(t,r,a){const l=r||e;t?i(t):o?o(l):n(void 0,l,a)}))}}runSync(e,t){let n,r=!1;return this.run(e,t,(function(e,t){Ai(e),n=t,r=!0})),zi("runSync","run",r),n}stringify(e,t){this.freeze();const n=Di(t),r=this.compiler||this.Compiler;return ji("stringify",r),Mi(e),r(e,n)}use(e,...t){const n=this.attachers,r=this.namespace;if(Ri("use",this.frozen),null==e);else if("function"==typeof e)l(e,t);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");Array.isArray(e)?a(e):i(e)}return this;function o(e){if("function"==typeof e)l(e,[]);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");if(Array.isArray(e)){const[t,...n]=e;l(t,n)}else i(e)}}function i(e){if(!("plugins"in e)&&!("settings"in e))throw new Error("Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither");a(e.plugins),e.settings&&(r.settings=bi(!0,r.settings,e.settings))}function a(e){let t=-1;if(null==e);else{if(!Array.isArray(e))throw new TypeError("Expected a list of plugins, not `"+e+"`");for(;++t<e.length;)o(e[t])}}function l(e,t){let r=-1,o=-1;for(;++r<n.length;)if(n[r][0]===e){o=r;break}if(-1===o)n.push([e,...t]);else if(t.length>0){let[r,...i]=t;const a=n[o][1];wi(a)&&wi(r)&&(r=bi(!0,a,r)),n[o]=[e,r,...i]}}}}const Li=(new Ti).freeze();function Ni(e,t){if("function"!=typeof t)throw new TypeError("Cannot `"+e+"` without `parser`")}function ji(e,t){if("function"!=typeof t)throw new TypeError("Cannot `"+e+"` without `compiler`")}function Ri(e,t){if(t)throw new Error("Cannot call `"+e+"` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.")}function Mi(e){if(!wi(e)||"string"!=typeof e.type)throw new TypeError("Expected node, got `"+e+"`")}function zi(e,t,n){if(!n)throw new Error("`"+e+"` finished async. Use `"+t+"` instead")}function Di(e){return function(e){return Boolean(e&&"object"==typeof e&&"message"in e&&"messages"in e)}(e)?e:new Bi(e)}const Ui={}.hasOwnProperty,Wi=[],qi={allowDangerousHtml:!0},Vi=/^(https?|ircs?|mailto|xmpp)$/i,Hi=[{from:"astPlugins",id:"remove-buggy-html-in-markdown-parser"},{from:"allowDangerousHtml",id:"remove-buggy-html-in-markdown-parser"},{from:"allowNode",id:"replace-allownode-allowedtypes-and-disallowedtypes",to:"allowElement"},{from:"allowedTypes",id:"replace-allownode-allowedtypes-and-disallowedtypes",to:"allowedElements"},{from:"disallowedTypes",id:"replace-allownode-allowedtypes-and-disallowedtypes",to:"disallowedElements"},{from:"escapeHtml",id:"remove-buggy-html-in-markdown-parser"},{from:"includeElementIndex",id:"#remove-includeelementindex"},{from:"includeNodeIndex",id:"change-includenodeindex-to-includeelementindex"},{from:"linkTarget",id:"remove-linktarget"},{from:"plugins",id:"change-plugins-to-remarkplugins",to:"remarkPlugins"},{from:"rawSourcePos",id:"#remove-rawsourcepos"},{from:"renderers",id:"change-renderers-to-components",to:"components"},{from:"source",id:"change-source-to-children",to:"children"},{from:"sourcePos",id:"#remove-sourcepos"},{from:"transformImageUri",id:"#add-urltransform",to:"urlTransform"},{from:"transformLinkUri",id:"#add-urltransform",to:"urlTransform"}];function Qi(e){const t=e.allowedElements,n=e.allowElement,r=e.children||"",o=e.className,i=e.components,a=e.disallowedElements,l=e.rehypePlugins||Wi,u=e.remarkPlugins||Wi,c=e.remarkRehypeOptions?{...e.remarkRehypeOptions,...qi}:qi,s=e.skipHtml,f=e.unwrapDisallowed,d=e.urlTransform||Yi,p=Li().use(jo).use(u).use(yi,c).use(l),h=new Bi;"string"==typeof r&&(h.value=r);for(const t of Hi)Object.hasOwn(e,t.from)&&(t.from,t.to&&t.to,t.id);const m=p.parse(h);let g=p.runSync(m,h);return o&&(g={type:"element",tagName:"div",properties:{className:o},children:"root"===g.type?g.children:[g]}),ti(g,(function(e,r,o){if("raw"===e.type&&o&&"number"==typeof r)return s?o.children.splice(r,1):o.children[r]={type:"text",value:e.value},r;if("element"===e.type){let t;for(t in Vn)if(Ui.call(Vn,t)&&Ui.call(e.properties,t)){const n=e.properties[t],r=Vn[t];(null===r||r.includes(e.tagName))&&(e.properties[t]=d(String(n||""),t,e))}}if("element"===e.type){let i=t?!t.includes(e.tagName):!!a&&a.includes(e.tagName);if(!i&&n&&"number"==typeof r&&(i=!n(e,r,o)),i&&o&&"number"==typeof r)return f&&e.children?o.children.splice(r,1,...e.children):o.children.splice(r,1),r}})),Mn(g,{Fragment:ar.Fragment,components:i,ignoreInvalidStyle:!0,jsx:ar.jsx,jsxs:ar.jsxs,passKeys:!0,passNode:!0})}function Yi(e){return function(e,t){const n=function(e){return e.replace(/["&<>]/g,(function(e){return"&"+or[e]+";"}))}(ir(e||""));if(!t)return n;const r=n.indexOf(":"),o=n.indexOf("?"),i=n.indexOf("#"),a=n.indexOf("/");return r<0||a>-1&&r>a||o>-1&&r>o||i>-1&&r>i||t.test(n.slice(0,r))?n:""}(e,Vi)}n(30380);var Gi=[{key:"College Official",bkgColor:"251,189,26",textColor:"rgb(0,59,121)"},{key:"Common Room",bkgColor:"0,59,121",textColor:"#FFF"},{key:"Student Society",bkgColor:"255,87,51",textColor:"#FFF"},{key:"Other",bkgColor:"69,69,69",textColor:"#FFF"}];const $i=function(e){var t=e.eventObj,n=t.category||"Other",r=Gi.find((function(e){return e.key===n})).bkgColor,o=Gi.find((function(e){return e.key===n})).textColor,a={};try{a={backgroundImage:"linear-gradient(rgba(".concat(r,",0.8), \n      rgba(").concat(r,",0.8)), \n      url(http://localhost:1337").concat(t.banner.data.attributes.url,")")}}catch(e){a={backgroundColor:"rgb(".concat(r,")")}}return i.createElement(i.Fragment,null,i.createElement("div",{className:"eventbanner",style:a},i.createElement("div",{className:"eventbanner-bodycontainer"},i.createElement("div",{className:"eventbanner-left"},i.createElement("h3",{className:"eventbanner-title",style:{color:o}},"Event"),i.createElement("h1",{className:"eventbanner-content",style:{color:o}},i.createElement("span",{className:"eventbanner-line",style:{color:o}}),t.title)),i.createElement("div",{className:"eventbanner-right"},i.createElement("p",{className:"u-nomargin"},t.category," event"),i.createElement("p",{className:"u-nomargin"},i.createElement("b",null,new Date(t.startDate).toLocaleDateString(void 0,{weekday:"short",year:"numeric",month:"short",day:"numeric",hour:"2-digit",hour12:!1,minute:"2-digit"}))),i.createElement(i.Fragment,null,t.secondVenue?i.createElement(i.Fragment,null,i.createElement("p",{className:"u-nomargin"},i.createElement("b",null,t.firstVenue),", then"),i.createElement("p",{className:"u-nomargin"},i.createElement("b",null,t.secondVenue))):i.createElement("p",{className:"u-nomargin"},i.createElement("b",null,t.firstVenue))),i.createElement("p",null,t.nature&&t.nature.data.map((function(e){var t=[{key:"Academic Related",bkgColor:"rgb(229,52,44)",textColor:"#FFF"},{key:"Chaplaincy",bkgColor:"#1a6f2b",textColor:"#FFF"},{key:"College Development",bkgColor:"rgb(122,178,221)",textColor:"rgb(0,59,121)"},{key:"Freshers",bkgColor:"rgb(251,189,26)",textColor:"rgb(0,59,121)"},{key:"Music",bkgColor:"rgb(255,87,51)",textColor:"#FFF"},{key:"Other",bkgColor:"rgb(69,69,69)",textColor:"#FFF"},{key:"Social",bkgColor:"rgb(148,18,118)",textColor:"#FFF"},{key:"Sports",bkgColor:"rgb(0,59,121)",textColor:"#FFF"},{key:"Welfare and Access",bkgColor:"#539728",textColor:"#FFF"}];return i.createElement("span",{key:e.id,className:"eventbanner-nature",style:{backgroundColor:t.find((function(t){return t.key===e.attributes.name})).bkgColor,color:t.find((function(t){return t.key===e.attributes.name})).textColor}},e.attributes.name)}))),t.promotionLink&&i.createElement("a",{style:{textDecoration:"none"},href:t.promotionLink},i.createElement("button",{className:"eventbanner-register"},"Information / Register Here")),t.eventLink&&i.createElement("a",{style:{textDecoration:"none"},href:t.eventLink},i.createElement("button",{className:"eventbanner-eventlink"},"Join here!"))))))};function Xi(e){return Xi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Xi(e)}function Ki(){Ki=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var i=t&&t.prototype instanceof d?t:d,a=Object.create(i.prototype),l=new k(o||[]);return r(a,"_invoke",{value:w(e,n,l)}),a}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,i,(function(){return this}));var g=Object.getPrototypeOf,v=g&&g(g(S([])));v&&v!==t&&n.call(v,i)&&(m=v);var y=h.prototype=d.prototype=Object.create(m);function A(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function b(e,t){function o(r,i,a,l){var u=s(e[r],e,i);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==Xi(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,a,l)}),(function(e){o("throw",e,a,l)})):t.resolve(f).then((function(e){c.value=e,a(c)}),(function(e){return o("throw",e,a,l)}))}l(u.arg)}var i;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return i=i?i.then(r,r):r()}})}function w(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var l=x(a,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function x(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,x(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function k(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function S(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:B}}function B(){return{value:void 0,done:!0}}return p.prototype=h,r(y,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},A(b.prototype),u(b.prototype,a,(function(){return this})),e.AsyncIterator=b,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new b(c(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},A(y),u(y,l,"Generator"),u(y,i,(function(){return this})),u(y,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=S,k.prototype={constructor:k,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var l=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(l&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function Ji(e,t,n,r,o,i,a){try{var l=e[i](a),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Zi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n(87058);const ea=function(){var e,t,n,r=(0,a.UO)().eventId,o=(t=(0,i.useState)({}),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(t,n)||function(e,t){if(e){if("string"==typeof e)return Zi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Zi(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=o[0],u=o[1],c=function(){var e,t=(e=Ki().mark((function e(){var t;return Ki().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,gt.get("http://localhost:1337/api/events/".concat(r,"?populate=banner&populate=mainContact&populate=nature")).then().catch((function(e){return console.log(e)}));case 2:t=e.sent,console.log(t.data.data.attributes),u(t.data.data.attributes);case 5:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Ji(i,r,o,a,l,"next",e)}function l(e){Ji(i,r,o,a,l,"throw",e)}a(void 0)}))});return function(){return t.apply(this,arguments)}}();(0,i.useEffect)((function(){c()}),[]);try{e=l.mainContact.data}catch(t){e=[]}return i.createElement(i.Fragment,null,i.createElement($i,{eventObj:l}),i.createElement(w,{title:"Description"},i.createElement(Qi,null,l.description)),i.createElement(w,{title:"Contacts"},i.createElement("ul",null,e&&e.map((function(e){return i.createElement("li",{key:e.attributes.username},i.createElement(f.rU,{to:"/profile/".concat(e.attributes.username)},e.attributes.preferredName))})),l.otherContact&&i.createElement("li",null,l.otherContact))))};n(32357);const ta=function(e){var t=e.societyObj,n=t.nature||"Other";console.log(n);var r={};try{r={backgroundImage:"linear-gradient(rgba(0,0,0,0.5), \n      rgba(0,0,0,0.5)), \n      url(http://localhost:1337".concat(t.banner.data.attributes.url,")")}}catch(e){r={backgroundColor:"black"}}var o=[{key:"Academic Related",bkgColor:"rgb(229,52,44)",textColor:"#FFF"},{key:"Chaplaincy",bkgColor:"#1a6f2b",textColor:"#FFF"},{key:"College Development",bkgColor:"rgb(122,178,221)",textColor:"rgb(0,59,121)"},{key:"Freshers",bkgColor:"rgb(251,189,26)",textColor:"rgb(0,59,121)"},{key:"Music",bkgColor:"rgb(255,87,51)",textColor:"#FFF"},{key:"Other",bkgColor:"rgb(69,69,69)",textColor:"#FFF"},{key:"Social",bkgColor:"rgb(148,18,118)",textColor:"#FFF"},{key:"Sports",bkgColor:"rgb(0,59,121)",textColor:"#FFF"},{key:"Welfare and Access",bkgColor:"#539728",textColor:"#FFF"}];return i.createElement(i.Fragment,null,i.createElement("div",{className:"societybanner",style:r},i.createElement("div",{className:"societybanner-bodycontainer"},i.createElement("div",{className:"societybanner-left"},i.createElement("h3",{className:"societybanner-title",style:{color:"white"}},"Societies"),i.createElement("h1",{className:"societybanner-content",style:{color:"white"}},i.createElement("span",{className:"societybanner-line",style:{color:"white"}}),t.title)),i.createElement("div",{className:"societybanner-right"},i.createElement("p",null,i.createElement("span",{className:"societybanner-nature",style:{backgroundColor:o.find((function(e){return e.key===n})).bkgColor,color:o.find((function(e){return e.key===n})).textColor}},t.nature)),i.createElement("div",null,t.email&&i.createElement("a",{href:"mailto:".concat(t.email)},i.createElement("i",{className:"fa-solid fa-envelope fa-3x"})," "),t.websiteLink&&i.createElement("a",{href:t.websiteLink},i.createElement("i",{className:"fa-solid fa-globe fa-3x"})," "),t.facebookLink&&i.createElement("a",{href:t.facebookLink},i.createElement("i",{className:"fa-brands fa-facebook fa-3x"})," "),t.twitterLink&&i.createElement("a",{href:t.twitterLink},i.createElement("i",{className:"fa-brands fa-twitter fa-3x"})," "),t.instagramLink&&i.createElement("a",{href:t.instagramLink},i.createElement("i",{className:"fa-brands fa-instagram fa-3x"})," "))))))};function na(e){return na="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},na(e)}function ra(){ra=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var i=t&&t.prototype instanceof d?t:d,a=Object.create(i.prototype),l=new k(o||[]);return r(a,"_invoke",{value:w(e,n,l)}),a}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,i,(function(){return this}));var g=Object.getPrototypeOf,v=g&&g(g(S([])));v&&v!==t&&n.call(v,i)&&(m=v);var y=h.prototype=d.prototype=Object.create(m);function A(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function b(e,t){function o(r,i,a,l){var u=s(e[r],e,i);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==na(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,a,l)}),(function(e){o("throw",e,a,l)})):t.resolve(f).then((function(e){c.value=e,a(c)}),(function(e){return o("throw",e,a,l)}))}l(u.arg)}var i;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return i=i?i.then(r,r):r()}})}function w(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var l=x(a,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function x(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,x(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function k(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function S(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:B}}function B(){return{value:void 0,done:!0}}return p.prototype=h,r(y,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},A(b.prototype),u(b.prototype,a,(function(){return this})),e.AsyncIterator=b,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new b(c(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},A(y),u(y,l,"Generator"),u(y,i,(function(){return this})),u(y,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=S,k.prototype={constructor:k,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var l=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(l&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function oa(e,t,n,r,o,i,a){try{var l=e[i](a),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function ia(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n(10073);const aa=function(){var e,t,n=(0,a.UO)().abbreviation,r=(e=(0,i.useState)({}),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ia(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ia(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],l=r[1],u=function(){var e,t=(e=ra().mark((function e(){var t;return ra().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=3,gt.get("".concat("http://localhost:1337/api","/societies?filters[abbreviation][$eq]=").concat(n,"&populate=banner")).then().catch((function(e){return console.log(e)}));case 3:t=e.sent,console.log(t),l(t.data.data[0].attributes);case 6:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){oa(i,r,o,a,l,"next",e)}function l(e){oa(i,r,o,a,l,"throw",e)}a(void 0)}))});return function(){return t.apply(this,arguments)}}();return(0,i.useEffect)((function(){u()}),[]),i.createElement(i.Fragment,null,i.createElement(ta,{societyObj:o}),i.createElement(w,{title:"Description"},i.createElement(Qi,null,o.description)),i.createElement(w,{title:"Meeting schedule for this term"},i.createElement(Qi,null,o.regularSchedule)))};n(45171);const la=n.p+"pinkSlip.pdf";function ua(e){return ua="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ua(e)}function ca(){ca=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var i=t&&t.prototype instanceof d?t:d,a=Object.create(i.prototype),l=new k(o||[]);return r(a,"_invoke",{value:w(e,n,l)}),a}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,i,(function(){return this}));var g=Object.getPrototypeOf,v=g&&g(g(S([])));v&&v!==t&&n.call(v,i)&&(m=v);var y=h.prototype=d.prototype=Object.create(m);function A(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function b(e,t){function o(r,i,a,l){var u=s(e[r],e,i);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==ua(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,a,l)}),(function(e){o("throw",e,a,l)})):t.resolve(f).then((function(e){c.value=e,a(c)}),(function(e){return o("throw",e,a,l)}))}l(u.arg)}var i;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return i=i?i.then(r,r):r()}})}function w(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var l=x(a,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function x(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,x(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function k(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function S(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:B}}function B(){return{value:void 0,done:!0}}return p.prototype=h,r(y,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},A(b.prototype),u(b.prototype,a,(function(){return this})),e.AsyncIterator=b,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new b(c(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},A(y),u(y,l,"Generator"),u(y,i,(function(){return this})),u(y,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=S,k.prototype={constructor:k,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var l=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(l&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function sa(e,t,n,r,o,i,a){try{var l=e[i](a),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function fa(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n(11238);const da=function(){var e,t,n=(e=(0,i.useState)([]),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return fa(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?fa(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=n[0],o=n[1],a=function(){var e,t=(e=ca().mark((function e(){var t;return ca().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=3,gt.get("".concat("http://localhost:1337/api","/societies?populate=banner")).then().catch((function(e){console.log(e)}));case 3:t=e.sent,o(t.data.data);case 5:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){sa(i,r,o,a,l,"next",e)}function l(e){sa(i,r,o,a,l,"throw",e)}a(void 0)}))});return function(){return t.apply(this,arguments)}}();(0,i.useEffect)((function(){a()}),[]);var l=function(){setTimeout((function(){window.scrollTo({top:0,behavior:"smooth"})}),50)};return console.log(r),i.createElement("div",{className:"CurrentComm-container"},r.sort((function(e,t){return e.attributes.title>t.attributes.title})).map((function(e){var t;t=e.attributes.banner?'url("http://localhost:1337'.concat(e.attributes.banner.data.attributes.url,'")'):'linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)), url("'.concat(h,'")');var n=[{key:"Academic Related",bkgColor:"rgb(229,52,44)",textColor:"#FFF"},{key:"Chaplaincy",bkgColor:"#1a6f2b",textColor:"#FFF"},{key:"College Development",bkgColor:"rgb(122,178,221)",textColor:"rgb(0,59,121)"},{key:"Freshers",bkgColor:"rgb(251,189,26)",textColor:"rgb(0,59,121)"},{key:"Music",bkgColor:"rgb(255,87,51)",textColor:"#FFF"},{key:"Other",bkgColor:"rgb(69,69,69)",textColor:"#FFF"},{key:"Social",bkgColor:"rgb(148,18,118)",textColor:"#FFF"},{key:"Sports",bkgColor:"rgb(0,59,121)",textColor:"#FFF"},{key:"Welfare and Access",bkgColor:"#539728",textColor:"#FFF"}],r=e.attributes.nature||"Other";return i.createElement("div",{key:e.id,className:"CurrentComm-single"},i.createElement(f.rU,{to:"/societies/".concat(e.attributes.abbreviation),onClick:l},i.createElement("div",{className:"CurrentComm-background",style:{backgroundImage:t}}," "),i.createElement("div",{className:"CurrentComm-about"},i.createElement("div",{className:"name"},i.createElement("b",null,e.attributes.title," "),i.createElement("span",{className:"societybanner-nature",style:{backgroundColor:n.find((function(e){return e.key===r})).bkgColor,color:n.find((function(e){return e.key===r})).textColor}},r)))))})))},pa=function(){return i.createElement(i.Fragment,null,i.createElement(O,{title:"What's On",content:"Societies"}),i.createElement(w,{title:"Societies"},i.createElement("p",null,"At Univ, there are many student college societies run for members of the college to fulfil many different potential interests. The societies are sometimes run soley by WCR members, or jointly with JCR. If you have an interest in joining any of these societies, you can get in touch with the listed contact for the society of interest and find out how you can get involved. You can also join other university societies as well."),i.createElement(x,{display:[{key:1,isLocal:!0,des:"Create a college society!",link:"/societies/supports"},{key:2,isLocal:!1,des:"Info for hosting college events",link:la}]})),i.createElement(w,{title:"Societies A to Z"},i.createElement("p",null,"Please browse below the list of college societies available for postgraduates. The list is incomplete, and does not include undergraduate societies. See above for registering your societies in our listings."),i.createElement(da,null)))},ha=function(){return i.createElement(i.Fragment,null,i.createElement(O,{title:"What's On",content:"Supports for college societies"}),i.createElement(w,{title:"Introduction"},i.createElement("p",null,"Thank you for your interests in setting up a new society for Univ. Your initative would make our community more vibrant and diverse!"),i.createElement("p",null,"Societies are not required to register to college or any common rooms. However, the WCR is here to support you in various ways together with the college.")),i.createElement(w,{title:"IMPORTANT: Room Booking Regulation"},i.createElement("p",null,"Make sure to abide with the room booking regulations if you wish to host event within the college. In particular, you should first contact the domestic bursary at ",i.createElement("a",{href:"mailto:hospitality@univ.ox.ac.uk"},"hospitality@univ.ox.ac.uk"),' to check availability of college premises, or your fellow housemates if you want to host your event in accommodations. You should then complete the "pink slip" at the ',i.createElement("a",{href:"intranet.univ.ox.ac.uk"},"college intranet"),", abiding the following deadlines: (last updated: Michaelmas 2023)"),i.createElement("ul",null,i.createElement("li",null,"10 full working days for events held in college bars"),i.createElement("li",null,"3 full working days for events held in college meeting rooms"),i.createElement("li",null,"48 hours for events held in accommodations")),i.createElement("p",null,i.createElement("b",null,"You should also include details of external speaker in your application.")," The college reserves right to terminate any events that do not comply with the above regulations. Organising or participating events without a pink slip may lead to disciplinary actions."),i.createElement("p",null,i.createElement("b",null,"University clubs are not allowed to host events in the college unless booked by a college member who is the president of the society. Event of such could not be advertised to general public.")),i.createElement(x,{display:[{key:1,isLocal:!1,des:"Click here for latest room booking information",link:la}]})),i.createElement(w,{title:"Promotion on the WCR Website"},i.createElement("p",null,"Any societies that are led by WCR members, or having sufficient involvement in WCR could create a page in this WCR website for promotion. Please contact the ",i.createElement(f.rU,{to:"/profile/Samuel-CHLam"},"external affairs officer")," or email ",i.createElement("a",{href:"mailto:wcr.externalaffairs@univ.ox.ac.uk"},"wcr.externalaffairs@univ.ox.ac.uk")," if you wish to do so. Please include the following details:"),i.createElement("ul",null,i.createElement("li",null,"Name of your society"),i.createElement("li",null,"A logo/picture representing your society (ideally of the dimension 16:9)"),i.createElement("li",null,"Points of contact (one of them must be a Univ member, ideally from WCR)"),i.createElement("li",null,"Description of your society"),i.createElement("li",null,"Schedule of regular meetings (if any)"),i.createElement("li",null,"Nature of society: academic, music, sports, social, other"),i.createElement("li",null,"Links of promotion: website, Facebook, Instagram, Twitter, WhatsApp group")),i.createElement("p",null,"The JCR also has an independent listing of the website. You can enquire by contacting the ",i.createElement(f.rU,{to:"/profile/Samuel-CHLam"},"external affairs officer")," or email ",i.createElement("a",{href:"mailto:wcr.externalaffairs@univ.ox.ac.uk"},"wcr.externalaffairs@univ.ox.ac.uk")," for more information.")),i.createElement(w,{title:"WCR Funding"},i.createElement("p",null,"Any societies that are led by WCR members, or having sufficient involvement in WCR could apply funding from WCR. Please contact the ",i.createElement(f.rU,{to:"/profile/Lovisa-Reiche"},"Treasurer")," ",i.createElement("b",null,"separately")," for information. Applications of funding will be discussed during a WCR committee meeting.")))};n(78738),n(85759);const ma=function(e){var t=e.userObj;return i.createElement("div",null,i.createElement("div",{style:{backgroundImage:"url(http://localhost:1337".concat(t.profilePicture.url,")")},className:"u-image u-aspect-43",title:t.profilePicture.alternativeText}," "),i.createElement("div",{className:"profilebasicinfo-basic"},i.createElement("p",null,"Current Role ",i.createElement("br",null)," ",i.createElement("b",null,t.wcrRole)),i.createElement("p",null,"Subject ",i.createElement("br",null)," ",i.createElement("b",null,t.subject)),i.createElement("p",null,"Joined Univ Since ",i.createElement("br",null),i.createElement("b",null,t.joinedUnivSince)),i.createElement("p",null,i.createElement("a",{href:"mailto:".concat(t.email)},i.createElement("i",{className:"fa-solid fa-envelope fa-3x"})),t.univIntroLink&&i.createElement("a",{href:t.univIntroLink},i.createElement("img",{src:h,style:{width:40,margin:0,padding:0}})),t.websiteLink&&i.createElement("a",{href:t.websiteLink},i.createElement("i",{className:"fa-solid fa-globe fa-3x"})),t.facebookLink&&i.createElement("a",{href:t.facebookLink},i.createElement("i",{className:"fa-brands fa-facebook fa-3x"})),t.twitterLink&&i.createElement("a",{href:t.twitterLink},i.createElement("i",{className:"fa-brands fa-twitter fa-3x"})),t.linkedInLink&&i.createElement("a",{href:t.linkedInLink},i.createElement("i",{className:"fa-brands fa-linkedin fa-3x"})))))};n(93945);var ga=[{key:"primary",bgColor:[0,59,121],textColor:"secondary",defaultOpacity:.85},{key:"secondary",bgColor:[251,189,26],textColor:"primary",defaultOpacity:.85},{key:"blue",bgColor:[122,178,221],textColor:"primary",defaultOpacity:.95},{key:"violet",bgColor:[148,18,118],textColor:"secondary",defaultOpacity:.9},{key:"black",bgColor:[0,0,0],textColor:"white",defaultOpacity:.7}];const va=function(e){var t=e.backgroundImage,n=e.bgColorKey,r=e.opacityLeft,o=e.opacityRight,a=e.textColor,l=e.userObj,u=n||"black",c=ga.find((function(e){return e.key==u})).bgColor,s=a||ga.find((function(e){return e.key==u})).textColor,f={backgroundColor:"rgb(".concat(c[0],", ").concat(c[1],", ").concat(c[2],")")};if(t){var d=r||ga.find((function(e){return e.key==u})).defaultOpacity,p=o||ga.find((function(e){return e.key==u})).defaultOpacity;f={backgroundImage:"linear-gradient(rgba(".concat(c[0],", ").concat(c[1],", ").concat(c[2],", ").concat(d,"), \n      rgba(").concat(c[0],", ").concat(c[1],", ").concat(c[2],", ").concat(p,")), \n      url(").concat(t,")")}}return i.createElement(i.Fragment,null,i.createElement("div",{className:"profilebanner",style:f},i.createElement("div",{className:"profilebanner-bodycontainer"},i.createElement("div",{className:"profilebanner-left"},i.createElement("h3",{className:"profilebanner-title",style:{color:"var(--".concat(s,")")}},"Profile"),i.createElement("h1",{className:"profilebanner-content",style:{color:"var(--".concat(s,")")}},i.createElement("span",{className:"profilebanner-line",style:{color:"var(--".concat(s,")")}}),l.preferredName," (",l.preferredPronoun,")")),i.createElement("div",{className:"profilebanner-right"}))),i.createElement("div",{className:"profilebanner-basicinfo"},i.createElement(ma,{userObj:l})))};function ya(e){return ya="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ya(e)}function Aa(){Aa=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var i=t&&t.prototype instanceof d?t:d,a=Object.create(i.prototype),l=new k(o||[]);return r(a,"_invoke",{value:w(e,n,l)}),a}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,i,(function(){return this}));var g=Object.getPrototypeOf,v=g&&g(g(S([])));v&&v!==t&&n.call(v,i)&&(m=v);var y=h.prototype=d.prototype=Object.create(m);function A(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function b(e,t){function o(r,i,a,l){var u=s(e[r],e,i);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==ya(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,a,l)}),(function(e){o("throw",e,a,l)})):t.resolve(f).then((function(e){c.value=e,a(c)}),(function(e){return o("throw",e,a,l)}))}l(u.arg)}var i;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return i=i?i.then(r,r):r()}})}function w(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var l=x(a,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function x(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,x(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function k(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function S(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:B}}function B(){return{value:void 0,done:!0}}return p.prototype=h,r(y,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},A(b.prototype),u(b.prototype,a,(function(){return this})),e.AsyncIterator=b,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new b(c(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},A(y),u(y,l,"Generator"),u(y,i,(function(){return this})),u(y,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=S,k.prototype={constructor:k,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var l=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(l&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function ba(e,t,n,r,o,i,a){try{var l=e[i](a),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function wa(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return xa(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?xa(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function xa(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ea=function(){var e=(0,a.UO)().userName,t=wa((0,i.useState)({}),2),n=t[0],r=t[1],o=wa((0,i.useState)({}),2),l=o[0],u=o[1],c=function(){var t,n=(t=Aa().mark((function t(){var n,o,i;return Aa().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="http://localhost:1337/api",t.next=3,gt.get("".concat(n,"/users?filters[username][$eq]=").concat(e,"&populate=profilePicture")).then().catch((function(e){console.log(e)}));case 3:return o=t.sent,t.next=6,gt.get("".concat(n,"/univ-engagements?populate[user][fields][0]=username&filters[user][username][$eq]=").concat(e)).then().catch((function(e){return console.log(e)}));case 6:i=t.sent,r(o.data[0]),u(i.data.data);case 9:case"end":return t.stop()}}),t)})),function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(e){ba(i,r,o,a,l,"next",e)}function l(e){ba(i,r,o,a,l,"throw",e)}a(void 0)}))});return function(){return n.apply(this,arguments)}}();(0,i.useEffect)((function(){c()}),[]);try{return i.createElement(i.Fragment,null,i.createElement(va,{title:"Profile",userObj:n,bgColorKey:"secondary"}),i.createElement(w,{title:"Univ Engagement"},i.createElement("div",{className:"profile-engagement-container"},l.sort((function(e,t){return t.attributes.startDate>e.attributes.startDate})).map((function(e){var t=new Date(e.attributes.startDate),n=e.attributes.endDate?new Date(e.attributes.endDate):"";return i.createElement("div",{className:"profile-engagement"},e.attributes.Name,", ",e.attributes.Organisation," ",t.getFullYear(),"-",n?i.createElement(i.Fragment,null,n.getFullYear()):i.createElement(i.Fragment,null))})))),i.createElement(w,{title:"Personal introduction"},i.createElement(Qi,null,n.personalIntro)))}catch(e){return console.log(e),i.createElement(i.Fragment,null,i.createElement(O,{title:"",content:"This profile does not exist."}),i.createElement("div",{className:"u-block"},"Please contact us for further assistance."))}};function Ca(e){if(!e.ok)throw"API request failed with response status ".concat(e.status," and text: ").concat(e.statusText);return e.clone().json().catch((function(t){return e.text().then((function(e){throw"API request's result could not be converted to a JSON object: \n".concat(e)}))}))}function ka(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return fetch(e,{method:"post",headers:{"Content-type":"application/json"},body:JSON.stringify(t)}).then(Ca).catch((function(t){throw"POST request to ".concat(e," failed with error:\n").concat(t)}))}function Sa(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ba(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ba(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ba(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n(69600),n(47941);const Ia=function(){var e=Sa((0,i.useState)(void 0),2),t=e[0],n=e[1],r=Sa((0,i.useState)(void 0),2);return r[0],r[1],(0,i.useEffect)((function(){(function(e){var t,n=e+"?"+(t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},Object.keys(t).map((function(e){return e+"="+encodeURIComponent(t[e])})).join("&"));return fetch(n).then(Ca).catch((function(e){throw"GET request to ".concat(n," failed with error:\n").concat(e)}))})("/api/whoami").then((function(e){e._id&&(n(e.googleid),console.log("You are currently logged in as ".concat(e.name)))}))}),[]),i.createElement(i.Fragment,null,i.createElement(y,{handleLogin:function(e){var t=e.credential,r=function(e,t){if("string"!=typeof e)throw new s("Invalid token specified");var n=!0===(t=t||{}).header?0:1;try{return JSON.parse(c(e.split(".")[n]))}catch(e){throw new s("Invalid token specified: "+e.message)}}(t);console.log("Logged in as ".concat(r.name)),ka("/api/login",{token:t}).then((function(e){n(e.googleid)}))},handleLogout:function(){n(void 0),ka("/api/logout")},userId:t}),i.createElement(a.Z5,null,i.createElement(a.AW,{path:"/",element:i.createElement(_,null)}),i.createElement(a.AW,{path:"/about",element:i.createElement(L,null)}),i.createElement(a.AW,{path:"/governance",element:i.createElement(Bt,null)}),i.createElement(a.AW,{path:"/profile/:userName",element:i.createElement(Ea,null)}),i.createElement(a.AW,{path:"/welfare",element:i.createElement(Ot,null)}),i.createElement(a.AW,{path:"/welfare/welfarefaq",element:i.createElement(_t,null)}),i.createElement(a.AW,{path:"/welfare/whoswho",element:i.createElement(Tt,null)}),i.createElement(a.AW,{exact:!0,path:"/societies/supports",element:i.createElement(ha,null)}),i.createElement(a.AW,{path:"/societies/:abbreviation",element:i.createElement(aa,null)}),i.createElement(a.AW,{path:"/societies",element:i.createElement(pa,null)}),i.createElement(a.AW,{path:"/whatson/:eventId",element:i.createElement(ea,null)}),i.createElement(a.AW,{path:"/whatson",element:i.createElement(zt,null)}),i.createElement(a.AW,{path:"/privacyaccessibility",element:i.createElement(P,null)}),i.createElement(a.AW,{path:"*",element:i.createElement(B,null)})),i.createElement(S,null))}},13644:(e,t,n)=>{"use strict";var r=n(67294),o=n(20745),i=n(79655),a=n(86426),l=n(81613),u=document.getElementById("root");(0,o.s)(u).render(r.createElement(a.rg,{clientId:"898758163126-h7cjk1no80teslljkae2h86nrgoh57qr.apps.googleusercontent.com"},r.createElement(i.VK,null,r.createElement(l.Z,null)))),e.hot.accept()},19662:(e,t,n)=>{var r=n(60614),o=n(66330),i=TypeError;e.exports=function(e){if(r(e))return e;throw i(o(e)+" is not a function")}},39483:(e,t,n)=>{var r=n(4411),o=n(66330),i=TypeError;e.exports=function(e){if(r(e))return e;throw i(o(e)+" is not a constructor")}},96077:(e,t,n)=>{var r=n(60614),o=String,i=TypeError;e.exports=function(e){if("object"==typeof e||r(e))return e;throw i("Can't set "+o(e)+" as a prototype")}},51223:(e,t,n)=>{var r=n(5112),o=n(70030),i=n(3070).f,a=r("unscopables"),l=Array.prototype;null==l[a]&&i(l,a,{configurable:!0,value:o(null)}),e.exports=function(e){l[a][e]=!0}},25787:(e,t,n)=>{var r=n(47976),o=TypeError;e.exports=function(e,t){if(r(t,e))return e;throw o("Incorrect invocation")}},19670:(e,t,n)=>{var r=n(70111),o=String,i=TypeError;e.exports=function(e){if(r(e))return e;throw i(o(e)+" is not an object")}},18533:(e,t,n)=>{"use strict";var r=n(42092).forEach,o=n(9341)("forEach");e.exports=o?[].forEach:function(e){return r(this,e,arguments.length>1?arguments[1]:void 0)}},48457:(e,t,n)=>{"use strict";var r=n(49974),o=n(46916),i=n(47908),a=n(53411),l=n(97659),u=n(4411),c=n(26244),s=n(86135),f=n(18554),d=n(71246),p=Array;e.exports=function(e){var t=i(e),n=u(this),h=arguments.length,m=h>1?arguments[1]:void 0,g=void 0!==m;g&&(m=r(m,h>2?arguments[2]:void 0));var v,y,A,b,w,x,E=d(t),C=0;if(!E||this===p&&l(E))for(v=c(t),y=n?new this(v):p(v);v>C;C++)x=g?m(t[C],C):t[C],s(y,C,x);else for(w=(b=f(t,E)).next,y=n?new this:[];!(A=o(w,b)).done;C++)x=g?a(b,m,[A.value,C],!0):A.value,s(y,C,x);return y.length=C,y}},41318:(e,t,n)=>{var r=n(45656),o=n(51400),i=n(26244),a=function(e){return function(t,n,a){var l,u=r(t),c=i(u),s=o(a,c);if(e&&n!=n){for(;c>s;)if((l=u[s++])!=l)return!0}else for(;c>s;s++)if((e||s in u)&&u[s]===n)return e||s||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},42092:(e,t,n)=>{var r=n(49974),o=n(1702),i=n(68361),a=n(47908),l=n(26244),u=n(65417),c=o([].push),s=function(e){var t=1==e,n=2==e,o=3==e,s=4==e,f=6==e,d=7==e,p=5==e||f;return function(h,m,g,v){for(var y,A,b=a(h),w=i(b),x=r(m,g),E=l(w),C=0,k=v||u,S=t?k(h,E):n||d?k(h,0):void 0;E>C;C++)if((p||C in w)&&(A=x(y=w[C],C,b),e))if(t)S[C]=A;else if(A)switch(e){case 3:return!0;case 5:return y;case 6:return C;case 2:c(S,y)}else switch(e){case 4:return!1;case 7:c(S,y)}return f?-1:o||s?s:S}};e.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6),filterReject:s(7)}},81194:(e,t,n)=>{var r=n(47293),o=n(5112),i=n(7392),a=o("species");e.exports=function(e){return i>=51||!r((function(){var t=[];return(t.constructor={})[a]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},9341:(e,t,n)=>{"use strict";var r=n(47293);e.exports=function(e,t){var n=[][e];return!!n&&r((function(){n.call(null,t||function(){return 1},1)}))}},41589:(e,t,n)=>{var r=n(51400),o=n(26244),i=n(86135),a=Array,l=Math.max;e.exports=function(e,t,n){for(var u=o(e),c=r(t,u),s=r(void 0===n?u:n,u),f=a(l(s-c,0)),d=0;c<s;c++,d++)i(f,d,e[c]);return f.length=d,f}},50206:(e,t,n)=>{var r=n(1702);e.exports=r([].slice)},94362:(e,t,n)=>{var r=n(41589),o=Math.floor,i=function(e,t){var n=e.length,u=o(n/2);return n<8?a(e,t):l(e,i(r(e,0,u),t),i(r(e,u),t),t)},a=function(e,t){for(var n,r,o=e.length,i=1;i<o;){for(r=i,n=e[i];r&&t(e[r-1],n)>0;)e[r]=e[--r];r!==i++&&(e[r]=n)}return e},l=function(e,t,n,r){for(var o=t.length,i=n.length,a=0,l=0;a<o||l<i;)e[a+l]=a<o&&l<i?r(t[a],n[l])<=0?t[a++]:n[l++]:a<o?t[a++]:n[l++];return e};e.exports=i},77475:(e,t,n)=>{var r=n(43157),o=n(4411),i=n(70111),a=n(5112)("species"),l=Array;e.exports=function(e){var t;return r(e)&&(t=e.constructor,(o(t)&&(t===l||r(t.prototype))||i(t)&&null===(t=t[a]))&&(t=void 0)),void 0===t?l:t}},65417:(e,t,n)=>{var r=n(77475);e.exports=function(e,t){return new(r(e))(0===t?0:t)}},53411:(e,t,n)=>{var r=n(19670),o=n(99212);e.exports=function(e,t,n,i){try{return i?t(r(n)[0],n[1]):t(n)}catch(t){o(e,"throw",t)}}},17072:(e,t,n)=>{var r=n(5112)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},e(i)}catch(e){}return n}},84326:(e,t,n)=>{var r=n(1702),o=r({}.toString),i=r("".slice);e.exports=function(e){return i(o(e),8,-1)}},70648:(e,t,n)=>{var r=n(51694),o=n(60614),i=n(84326),a=n(5112)("toStringTag"),l=Object,u="Arguments"==i(function(){return arguments}());e.exports=r?i:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=l(e),a))?n:u?i(t):"Object"==(r=i(t))&&o(t.callee)?"Arguments":r}},99920:(e,t,n)=>{var r=n(92597),o=n(53887),i=n(31236),a=n(3070);e.exports=function(e,t,n){for(var l=o(t),u=a.f,c=i.f,s=0;s<l.length;s++){var f=l[s];r(e,f)||n&&r(n,f)||u(e,f,c(t,f))}}},49920:(e,t,n)=>{var r=n(47293);e.exports=!r((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},4879:(e,t,n)=>{var r=n(1702),o=n(84488),i=n(41340),a=/"/g,l=r("".replace);e.exports=function(e,t,n,r){var u=i(o(e)),c="<"+t;return""!==n&&(c+=" "+n+'="'+l(i(r),a,"&quot;")+'"'),c+">"+u+"</"+t+">"}},76178:e=>{e.exports=function(e,t){return{value:e,done:t}}},68880:(e,t,n)=>{var r=n(19781),o=n(3070),i=n(79114);e.exports=r?function(e,t,n){return o.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},79114:e=>{e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},86135:(e,t,n)=>{"use strict";var r=n(34948),o=n(3070),i=n(79114);e.exports=function(e,t,n){var a=r(t);a in e?o.f(e,a,i(0,n)):e[a]=n}},47045:(e,t,n)=>{var r=n(56339),o=n(3070);e.exports=function(e,t,n){return n.get&&r(n.get,t,{getter:!0}),n.set&&r(n.set,t,{setter:!0}),o.f(e,t,n)}},98052:(e,t,n)=>{var r=n(60614),o=n(3070),i=n(56339),a=n(13072);e.exports=function(e,t,n,l){l||(l={});var u=l.enumerable,c=void 0!==l.name?l.name:t;if(r(n)&&i(n,c,l),l.global)u?e[t]=n:a(t,n);else{try{l.unsafe?e[t]&&(u=!0):delete e[t]}catch(e){}u?e[t]=n:o.f(e,t,{value:n,enumerable:!1,configurable:!l.nonConfigurable,writable:!l.nonWritable})}return e}},13072:(e,t,n)=>{var r=n(17854),o=Object.defineProperty;e.exports=function(e,t){try{o(r,e,{value:t,configurable:!0,writable:!0})}catch(n){r[e]=t}return t}},85117:(e,t,n)=>{"use strict";var r=n(66330),o=TypeError;e.exports=function(e,t){if(!delete e[t])throw o("Cannot delete property "+r(t)+" of "+r(e))}},19781:(e,t,n)=>{var r=n(47293);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},4154:e=>{var t="object"==typeof document&&document.all,n=void 0===t&&void 0!==t;e.exports={all:t,IS_HTMLDDA:n}},80317:(e,t,n)=>{var r=n(17854),o=n(70111),i=r.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},7207:e=>{var t=TypeError;e.exports=function(e){if(e>9007199254740991)throw t("Maximum allowed index exceeded");return e}},48324:e=>{e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},98509:(e,t,n)=>{var r=n(80317)("span").classList,o=r&&r.constructor&&r.constructor.prototype;e.exports=o===Object.prototype?void 0:o},68886:(e,t,n)=>{var r=n(88113).match(/firefox\/(\d+)/i);e.exports=!!r&&+r[1]},7871:(e,t,n)=>{var r=n(83823),o=n(35268);e.exports=!r&&!o&&"object"==typeof window&&"object"==typeof document},83823:e=>{e.exports="object"==typeof Deno&&Deno&&"object"==typeof Deno.version},30256:(e,t,n)=>{var r=n(88113);e.exports=/MSIE|Trident/.test(r)},71528:(e,t,n)=>{var r=n(88113);e.exports=/ipad|iphone|ipod/i.test(r)&&"undefined"!=typeof Pebble},6833:(e,t,n)=>{var r=n(88113);e.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},35268:(e,t,n)=>{var r=n(84326);e.exports="undefined"!=typeof process&&"process"==r(process)},71036:(e,t,n)=>{var r=n(88113);e.exports=/web0s(?!.*chrome)/i.test(r)},88113:e=>{e.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},7392:(e,t,n)=>{var r,o,i=n(17854),a=n(88113),l=i.process,u=i.Deno,c=l&&l.versions||u&&u.version,s=c&&c.v8;s&&(o=(r=s.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!o&&a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=+r[1]),e.exports=o},98008:(e,t,n)=>{var r=n(88113).match(/AppleWebKit\/(\d+)\./);e.exports=!!r&&+r[1]},80748:e=>{e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},82109:(e,t,n)=>{var r=n(17854),o=n(31236).f,i=n(68880),a=n(98052),l=n(13072),u=n(99920),c=n(54705);e.exports=function(e,t){var n,s,f,d,p,h=e.target,m=e.global,g=e.stat;if(n=m?r:g?r[h]||l(h,{}):(r[h]||{}).prototype)for(s in t){if(d=t[s],f=e.dontCallGetSet?(p=o(n,s))&&p.value:n[s],!c(m?s:h+(g?".":"#")+s,e.forced)&&void 0!==f){if(typeof d==typeof f)continue;u(d,f)}(e.sham||f&&f.sham)&&i(d,"sham",!0),a(n,s,d,e)}}},47293:e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},22104:(e,t,n)=>{var r=n(34374),o=Function.prototype,i=o.apply,a=o.call;e.exports="object"==typeof Reflect&&Reflect.apply||(r?a.bind(i):function(){return a.apply(i,arguments)})},49974:(e,t,n)=>{var r=n(21470),o=n(19662),i=n(34374),a=r(r.bind);e.exports=function(e,t){return o(e),void 0===t?e:i?a(e,t):function(){return e.apply(t,arguments)}}},34374:(e,t,n)=>{var r=n(47293);e.exports=!r((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},46916:(e,t,n)=>{var r=n(34374),o=Function.prototype.call;e.exports=r?o.bind(o):function(){return o.apply(o,arguments)}},76530:(e,t,n)=>{var r=n(19781),o=n(92597),i=Function.prototype,a=r&&Object.getOwnPropertyDescriptor,l=o(i,"name"),u=l&&"something"===function(){}.name,c=l&&(!r||r&&a(i,"name").configurable);e.exports={EXISTS:l,PROPER:u,CONFIGURABLE:c}},75668:(e,t,n)=>{var r=n(1702),o=n(19662);e.exports=function(e,t,n){try{return r(o(Object.getOwnPropertyDescriptor(e,t)[n]))}catch(e){}}},21470:(e,t,n)=>{var r=n(84326),o=n(1702);e.exports=function(e){if("Function"===r(e))return o(e)}},1702:(e,t,n)=>{var r=n(34374),o=Function.prototype,i=o.call,a=r&&o.bind.bind(i,i);e.exports=r?a:function(e){return function(){return i.apply(e,arguments)}}},35005:(e,t,n)=>{var r=n(17854),o=n(60614);e.exports=function(e,t){return arguments.length<2?(n=r[e],o(n)?n:void 0):r[e]&&r[e][t];var n}},71246:(e,t,n)=>{var r=n(70648),o=n(58173),i=n(68554),a=n(97497),l=n(5112)("iterator");e.exports=function(e){if(!i(e))return o(e,l)||o(e,"@@iterator")||a[r(e)]}},18554:(e,t,n)=>{var r=n(46916),o=n(19662),i=n(19670),a=n(66330),l=n(71246),u=TypeError;e.exports=function(e,t){var n=arguments.length<2?l(e):t;if(o(n))return i(r(n,e));throw u(a(e)+" is not iterable")}},88044:(e,t,n)=>{var r=n(1702),o=n(43157),i=n(60614),a=n(84326),l=n(41340),u=r([].push);e.exports=function(e){if(i(e))return e;if(o(e)){for(var t=e.length,n=[],r=0;r<t;r++){var c=e[r];"string"==typeof c?u(n,c):"number"!=typeof c&&"Number"!=a(c)&&"String"!=a(c)||u(n,l(c))}var s=n.length,f=!0;return function(e,t){if(f)return f=!1,t;if(o(this))return t;for(var r=0;r<s;r++)if(n[r]===e)return t}}}},58173:(e,t,n)=>{var r=n(19662),o=n(68554);e.exports=function(e,t){var n=e[t];return o(n)?void 0:r(n)}},17854:(e,t,n)=>{var r=function(e){return e&&e.Math==Math&&e};e.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof n.g&&n.g)||function(){return this}()||Function("return this")()},92597:(e,t,n)=>{var r=n(1702),o=n(47908),i=r({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return i(o(e),t)}},3501:e=>{e.exports={}},842:e=>{e.exports=function(e,t){try{1==arguments.length?console.error(e):console.error(e,t)}catch(e){}}},60490:(e,t,n)=>{var r=n(35005);e.exports=r("document","documentElement")},64664:(e,t,n)=>{var r=n(19781),o=n(47293),i=n(80317);e.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},68361:(e,t,n)=>{var r=n(1702),o=n(47293),i=n(84326),a=Object,l=r("".split);e.exports=o((function(){return!a("z").propertyIsEnumerable(0)}))?function(e){return"String"==i(e)?l(e,""):a(e)}:a},42788:(e,t,n)=>{var r=n(1702),o=n(60614),i=n(5465),a=r(Function.toString);o(i.inspectSource)||(i.inspectSource=function(e){return a(e)}),e.exports=i.inspectSource},29909:(e,t,n)=>{var r,o,i,a=n(94811),l=n(17854),u=n(70111),c=n(68880),s=n(92597),f=n(5465),d=n(6200),p=n(3501),h="Object already initialized",m=l.TypeError,g=l.WeakMap;if(a||f.state){var v=f.state||(f.state=new g);v.get=v.get,v.has=v.has,v.set=v.set,r=function(e,t){if(v.has(e))throw m(h);return t.facade=e,v.set(e,t),t},o=function(e){return v.get(e)||{}},i=function(e){return v.has(e)}}else{var y=d("state");p[y]=!0,r=function(e,t){if(s(e,y))throw m(h);return t.facade=e,c(e,y,t),t},o=function(e){return s(e,y)?e[y]:{}},i=function(e){return s(e,y)}}e.exports={set:r,get:o,has:i,enforce:function(e){return i(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!u(t)||(n=o(t)).type!==e)throw m("Incompatible receiver, "+e+" required");return n}}}},97659:(e,t,n)=>{var r=n(5112),o=n(97497),i=r("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||a[i]===e)}},43157:(e,t,n)=>{var r=n(84326);e.exports=Array.isArray||function(e){return"Array"==r(e)}},60614:(e,t,n)=>{var r=n(4154),o=r.all;e.exports=r.IS_HTMLDDA?function(e){return"function"==typeof e||e===o}:function(e){return"function"==typeof e}},4411:(e,t,n)=>{var r=n(1702),o=n(47293),i=n(60614),a=n(70648),l=n(35005),u=n(42788),c=function(){},s=[],f=l("Reflect","construct"),d=/^\s*(?:class|function)\b/,p=r(d.exec),h=!d.exec(c),m=function(e){if(!i(e))return!1;try{return f(c,s,e),!0}catch(e){return!1}},g=function(e){if(!i(e))return!1;switch(a(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return h||!!p(d,u(e))}catch(e){return!0}};g.sham=!0,e.exports=!f||o((function(){var e;return m(m.call)||!m(Object)||!m((function(){e=!0}))||e}))?g:m},54705:(e,t,n)=>{var r=n(47293),o=n(60614),i=/#|\.prototype\./,a=function(e,t){var n=u[l(e)];return n==s||n!=c&&(o(t)?r(t):!!t)},l=a.normalize=function(e){return String(e).replace(i,".").toLowerCase()},u=a.data={},c=a.NATIVE="N",s=a.POLYFILL="P";e.exports=a},68554:e=>{e.exports=function(e){return null==e}},70111:(e,t,n)=>{var r=n(60614),o=n(4154),i=o.all;e.exports=o.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:r(e)||e===i}:function(e){return"object"==typeof e?null!==e:r(e)}},31913:e=>{e.exports=!1},52190:(e,t,n)=>{var r=n(35005),o=n(60614),i=n(47976),a=n(43307),l=Object;e.exports=a?function(e){return"symbol"==typeof e}:function(e){var t=r("Symbol");return o(t)&&i(t.prototype,l(e))}},20408:(e,t,n)=>{var r=n(49974),o=n(46916),i=n(19670),a=n(66330),l=n(97659),u=n(26244),c=n(47976),s=n(18554),f=n(71246),d=n(99212),p=TypeError,h=function(e,t){this.stopped=e,this.result=t},m=h.prototype;e.exports=function(e,t,n){var g,v,y,A,b,w,x,E=n&&n.that,C=!(!n||!n.AS_ENTRIES),k=!(!n||!n.IS_RECORD),S=!(!n||!n.IS_ITERATOR),B=!(!n||!n.INTERRUPTED),I=r(t,E),O=function(e){return g&&d(g,"normal",e),new h(!0,e)},P=function(e){return C?(i(e),B?I(e[0],e[1],O):I(e[0],e[1])):B?I(e,O):I(e)};if(k)g=e.iterator;else if(S)g=e;else{if(!(v=f(e)))throw p(a(e)+" is not iterable");if(l(v)){for(y=0,A=u(e);A>y;y++)if((b=P(e[y]))&&c(m,b))return b;return new h(!1)}g=s(e,v)}for(w=k?e.next:g.next;!(x=o(w,g)).done;){try{b=P(x.value)}catch(e){d(g,"throw",e)}if("object"==typeof b&&b&&c(m,b))return b}return new h(!1)}},99212:(e,t,n)=>{var r=n(46916),o=n(19670),i=n(58173);e.exports=function(e,t,n){var a,l;o(e);try{if(!(a=i(e,"return"))){if("throw"===t)throw n;return n}a=r(a,e)}catch(e){l=!0,a=e}if("throw"===t)throw n;if(l)throw a;return o(a),n}},63061:(e,t,n)=>{"use strict";var r=n(13383).IteratorPrototype,o=n(70030),i=n(79114),a=n(58003),l=n(97497),u=function(){return this};e.exports=function(e,t,n,c){var s=t+" Iterator";return e.prototype=o(r,{next:i(+!c,n)}),a(e,s,!1,!0),l[s]=u,e}},51656:(e,t,n)=>{"use strict";var r=n(82109),o=n(46916),i=n(31913),a=n(76530),l=n(60614),u=n(63061),c=n(79518),s=n(27674),f=n(58003),d=n(68880),p=n(98052),h=n(5112),m=n(97497),g=n(13383),v=a.PROPER,y=a.CONFIGURABLE,A=g.IteratorPrototype,b=g.BUGGY_SAFARI_ITERATORS,w=h("iterator"),x="keys",E="values",C="entries",k=function(){return this};e.exports=function(e,t,n,a,h,g,S){u(n,t,a);var B,I,O,P=function(e){if(e===h&&N)return N;if(!b&&e in T)return T[e];switch(e){case x:case E:case C:return function(){return new n(this,e)}}return function(){return new n(this)}},F=t+" Iterator",_=!1,T=e.prototype,L=T[w]||T["@@iterator"]||h&&T[h],N=!b&&L||P(h),j="Array"==t&&T.entries||L;if(j&&(B=c(j.call(new e)))!==Object.prototype&&B.next&&(i||c(B)===A||(s?s(B,A):l(B[w])||p(B,w,k)),f(B,F,!0,!0),i&&(m[F]=k)),v&&h==E&&L&&L.name!==E&&(!i&&y?d(T,"name",E):(_=!0,N=function(){return o(L,this)})),h)if(I={values:P(E),keys:g?N:P(x),entries:P(C)},S)for(O in I)(b||_||!(O in T))&&p(T,O,I[O]);else r({target:t,proto:!0,forced:b||_},I);return i&&!S||T[w]===N||p(T,w,N,{name:h}),m[t]=N,I}},13383:(e,t,n)=>{"use strict";var r,o,i,a=n(47293),l=n(60614),u=n(70111),c=n(70030),s=n(79518),f=n(98052),d=n(5112),p=n(31913),h=d("iterator"),m=!1;[].keys&&("next"in(i=[].keys())?(o=s(s(i)))!==Object.prototype&&(r=o):m=!0),!u(r)||a((function(){var e={};return r[h].call(e)!==e}))?r={}:p&&(r=c(r)),l(r[h])||f(r,h,(function(){return this})),e.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:m}},97497:e=>{e.exports={}},26244:(e,t,n)=>{var r=n(17466);e.exports=function(e){return r(e.length)}},56339:(e,t,n)=>{var r=n(1702),o=n(47293),i=n(60614),a=n(92597),l=n(19781),u=n(76530).CONFIGURABLE,c=n(42788),s=n(29909),f=s.enforce,d=s.get,p=String,h=Object.defineProperty,m=r("".slice),g=r("".replace),v=r([].join),y=l&&!o((function(){return 8!==h((function(){}),"length",{value:8}).length})),A=String(String).split("String"),b=e.exports=function(e,t,n){"Symbol("===m(p(t),0,7)&&(t="["+g(p(t),/^Symbol\(([^)]*)\)/,"$1")+"]"),n&&n.getter&&(t="get "+t),n&&n.setter&&(t="set "+t),(!a(e,"name")||u&&e.name!==t)&&(l?h(e,"name",{value:t,configurable:!0}):e.name=t),y&&n&&a(n,"arity")&&e.length!==n.arity&&h(e,"length",{value:n.arity});try{n&&a(n,"constructor")&&n.constructor?l&&h(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var r=f(e);return a(r,"source")||(r.source=v(A,"string"==typeof t?t:"")),e};Function.prototype.toString=b((function(){return i(this)&&d(this).source||c(this)}),"toString")},74758:e=>{var t=Math.ceil,n=Math.floor;e.exports=Math.trunc||function(e){var r=+e;return(r>0?n:t)(r)}},95948:(e,t,n)=>{var r,o,i,a,l,u=n(17854),c=n(49974),s=n(31236).f,f=n(20261).set,d=n(18572),p=n(6833),h=n(71528),m=n(71036),g=n(35268),v=u.MutationObserver||u.WebKitMutationObserver,y=u.document,A=u.process,b=u.Promise,w=s(u,"queueMicrotask"),x=w&&w.value;if(!x){var E=new d,C=function(){var e,t;for(g&&(e=A.domain)&&e.exit();t=E.get();)try{t()}catch(e){throw E.head&&r(),e}e&&e.enter()};p||g||m||!v||!y?!h&&b&&b.resolve?((a=b.resolve(void 0)).constructor=b,l=c(a.then,a),r=function(){l(C)}):g?r=function(){A.nextTick(C)}:(f=c(f,u),r=function(){f(C)}):(o=!0,i=y.createTextNode(""),new v(C).observe(i,{characterData:!0}),r=function(){i.data=o=!o}),x=function(e){E.head||r(),E.add(e)}}e.exports=x},78523:(e,t,n)=>{"use strict";var r=n(19662),o=TypeError,i=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw o("Bad Promise constructor");t=e,n=r})),this.resolve=r(t),this.reject=r(n)};e.exports.f=function(e){return new i(e)}},70030:(e,t,n)=>{var r,o=n(19670),i=n(36048),a=n(80748),l=n(3501),u=n(60490),c=n(80317),s=n(6200),f="prototype",d="script",p=s("IE_PROTO"),h=function(){},m=function(e){return"<"+d+">"+e+"</"+d+">"},g=function(e){e.write(m("")),e.close();var t=e.parentWindow.Object;return e=null,t},v=function(){try{r=new ActiveXObject("htmlfile")}catch(e){}var e,t,n;v="undefined"!=typeof document?document.domain&&r?g(r):(t=c("iframe"),n="java"+d+":",t.style.display="none",u.appendChild(t),t.src=String(n),(e=t.contentWindow.document).open(),e.write(m("document.F=Object")),e.close(),e.F):g(r);for(var o=a.length;o--;)delete v[f][a[o]];return v()};l[p]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(h[f]=o(e),n=new h,h[f]=null,n[p]=e):n=v(),void 0===t?n:i.f(n,t)}},36048:(e,t,n)=>{var r=n(19781),o=n(3353),i=n(3070),a=n(19670),l=n(45656),u=n(81956);t.f=r&&!o?Object.defineProperties:function(e,t){a(e);for(var n,r=l(t),o=u(t),c=o.length,s=0;c>s;)i.f(e,n=o[s++],r[n]);return e}},3070:(e,t,n)=>{var r=n(19781),o=n(64664),i=n(3353),a=n(19670),l=n(34948),u=TypeError,c=Object.defineProperty,s=Object.getOwnPropertyDescriptor,f="enumerable",d="configurable",p="writable";t.f=r?i?function(e,t,n){if(a(e),t=l(t),a(n),"function"==typeof e&&"prototype"===t&&"value"in n&&p in n&&!n[p]){var r=s(e,t);r&&r[p]&&(e[t]=n.value,n={configurable:d in n?n[d]:r[d],enumerable:f in n?n[f]:r[f],writable:!1})}return c(e,t,n)}:c:function(e,t,n){if(a(e),t=l(t),a(n),o)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw u("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},31236:(e,t,n)=>{var r=n(19781),o=n(46916),i=n(55296),a=n(79114),l=n(45656),u=n(34948),c=n(92597),s=n(64664),f=Object.getOwnPropertyDescriptor;t.f=r?f:function(e,t){if(e=l(e),t=u(t),s)try{return f(e,t)}catch(e){}if(c(e,t))return a(!o(i.f,e,t),e[t])}},1156:(e,t,n)=>{var r=n(84326),o=n(45656),i=n(8006).f,a=n(41589),l="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return l&&"Window"==r(e)?function(e){try{return i(e)}catch(e){return a(l)}}(e):i(o(e))}},8006:(e,t,n)=>{var r=n(16324),o=n(80748).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},25181:(e,t)=>{t.f=Object.getOwnPropertySymbols},79518:(e,t,n)=>{var r=n(92597),o=n(60614),i=n(47908),a=n(6200),l=n(49920),u=a("IE_PROTO"),c=Object,s=c.prototype;e.exports=l?c.getPrototypeOf:function(e){var t=i(e);if(r(t,u))return t[u];var n=t.constructor;return o(n)&&t instanceof n?n.prototype:t instanceof c?s:null}},47976:(e,t,n)=>{var r=n(1702);e.exports=r({}.isPrototypeOf)},16324:(e,t,n)=>{var r=n(1702),o=n(92597),i=n(45656),a=n(41318).indexOf,l=n(3501),u=r([].push);e.exports=function(e,t){var n,r=i(e),c=0,s=[];for(n in r)!o(l,n)&&o(r,n)&&u(s,n);for(;t.length>c;)o(r,n=t[c++])&&(~a(s,n)||u(s,n));return s}},81956:(e,t,n)=>{var r=n(16324),o=n(80748);e.exports=Object.keys||function(e){return r(e,o)}},55296:(e,t)=>{"use strict";var n={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,o=r&&!n.call({1:2},1);t.f=o?function(e){var t=r(this,e);return!!t&&t.enumerable}:n},27674:(e,t,n)=>{var r=n(75668),o=n(19670),i=n(96077);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=r(Object.prototype,"__proto__","set"))(n,[]),t=n instanceof Array}catch(e){}return function(n,r){return o(n),i(r),t?e(n,r):n.__proto__=r,n}}():void 0)},90288:(e,t,n)=>{"use strict";var r=n(51694),o=n(70648);e.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},92140:(e,t,n)=>{var r=n(46916),o=n(60614),i=n(70111),a=TypeError;e.exports=function(e,t){var n,l;if("string"===t&&o(n=e.toString)&&!i(l=r(n,e)))return l;if(o(n=e.valueOf)&&!i(l=r(n,e)))return l;if("string"!==t&&o(n=e.toString)&&!i(l=r(n,e)))return l;throw a("Can't convert object to primitive value")}},53887:(e,t,n)=>{var r=n(35005),o=n(1702),i=n(8006),a=n(25181),l=n(19670),u=o([].concat);e.exports=r("Reflect","ownKeys")||function(e){var t=i.f(l(e)),n=a.f;return n?u(t,n(e)):t}},40857:(e,t,n)=>{var r=n(17854);e.exports=r},12534:e=>{e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},63702:(e,t,n)=>{var r=n(17854),o=n(2492),i=n(60614),a=n(54705),l=n(42788),u=n(5112),c=n(7871),s=n(83823),f=n(31913),d=n(7392),p=o&&o.prototype,h=u("species"),m=!1,g=i(r.PromiseRejectionEvent),v=a("Promise",(function(){var e=l(o),t=e!==String(o);if(!t&&66===d)return!0;if(f&&(!p.catch||!p.finally))return!0;if(!d||d<51||!/native code/.test(e)){var n=new o((function(e){e(1)})),r=function(e){e((function(){}),(function(){}))};if((n.constructor={})[h]=r,!(m=n.then((function(){}))instanceof r))return!0}return!t&&(c||s)&&!g}));e.exports={CONSTRUCTOR:v,REJECTION_EVENT:g,SUBCLASSING:m}},2492:(e,t,n)=>{var r=n(17854);e.exports=r.Promise},69478:(e,t,n)=>{var r=n(19670),o=n(70111),i=n(78523);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},80612:(e,t,n)=>{var r=n(2492),o=n(17072),i=n(63702).CONSTRUCTOR;e.exports=i||!o((function(e){r.all(e).then(void 0,(function(){}))}))},18572:e=>{var t=function(){this.head=null,this.tail=null};t.prototype={add:function(e){var t={item:e,next:null},n=this.tail;n?n.next=t:this.head=t,this.tail=t},get:function(){var e=this.head;if(e)return null===(this.head=e.next)&&(this.tail=null),e.item}},e.exports=t},22261:(e,t,n)=>{"use strict";var r,o,i=n(46916),a=n(1702),l=n(41340),u=n(67066),c=n(52999),s=n(72309),f=n(70030),d=n(29909).get,p=n(9441),h=n(38173),m=s("native-string-replace",String.prototype.replace),g=RegExp.prototype.exec,v=g,y=a("".charAt),A=a("".indexOf),b=a("".replace),w=a("".slice),x=(o=/b*/g,i(g,r=/a/,"a"),i(g,o,"a"),0!==r.lastIndex||0!==o.lastIndex),E=c.BROKEN_CARET,C=void 0!==/()??/.exec("")[1];(x||C||E||p||h)&&(v=function(e){var t,n,r,o,a,c,s,p=this,h=d(p),k=l(e),S=h.raw;if(S)return S.lastIndex=p.lastIndex,t=i(v,S,k),p.lastIndex=S.lastIndex,t;var B=h.groups,I=E&&p.sticky,O=i(u,p),P=p.source,F=0,_=k;if(I&&(O=b(O,"y",""),-1===A(O,"g")&&(O+="g"),_=w(k,p.lastIndex),p.lastIndex>0&&(!p.multiline||p.multiline&&"\n"!==y(k,p.lastIndex-1))&&(P="(?: "+P+")",_=" "+_,F++),n=new RegExp("^(?:"+P+")",O)),C&&(n=new RegExp("^"+P+"$(?!\\s)",O)),x&&(r=p.lastIndex),o=i(g,I?n:p,_),I?o?(o.input=w(o.input,F),o[0]=w(o[0],F),o.index=p.lastIndex,p.lastIndex+=o[0].length):p.lastIndex=0:x&&o&&(p.lastIndex=p.global?o.index+o[0].length:r),C&&o&&o.length>1&&i(m,o[0],n,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(o[a]=void 0)})),o&&B)for(o.groups=c=f(null),a=0;a<B.length;a++)c[(s=B[a])[0]]=o[s[1]];return o}),e.exports=v},67066:(e,t,n)=>{"use strict";var r=n(19670);e.exports=function(){var e=r(this),t="";return e.hasIndices&&(t+="d"),e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.unicodeSets&&(t+="v"),e.sticky&&(t+="y"),t}},52999:(e,t,n)=>{var r=n(47293),o=n(17854).RegExp,i=r((function(){var e=o("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),a=i||r((function(){return!o("a","y").sticky})),l=i||r((function(){var e=o("^r","gy");return e.lastIndex=2,null!=e.exec("str")}));e.exports={BROKEN_CARET:l,MISSED_STICKY:a,UNSUPPORTED_Y:i}},9441:(e,t,n)=>{var r=n(47293),o=n(17854).RegExp;e.exports=r((function(){var e=o(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)}))},38173:(e,t,n)=>{var r=n(47293),o=n(17854).RegExp;e.exports=r((function(){var e=o("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")}))},84488:(e,t,n)=>{var r=n(68554),o=TypeError;e.exports=function(e){if(r(e))throw o("Can't call method on "+e);return e}},96340:(e,t,n)=>{"use strict";var r=n(35005),o=n(47045),i=n(5112),a=n(19781),l=i("species");e.exports=function(e){var t=r(e);a&&t&&!t[l]&&o(t,l,{configurable:!0,get:function(){return this}})}},58003:(e,t,n)=>{var r=n(3070).f,o=n(92597),i=n(5112)("toStringTag");e.exports=function(e,t,n){e&&!n&&(e=e.prototype),e&&!o(e,i)&&r(e,i,{configurable:!0,value:t})}},6200:(e,t,n)=>{var r=n(72309),o=n(69711),i=r("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},5465:(e,t,n)=>{var r=n(17854),o=n(13072),i="__core-js_shared__",a=r[i]||o(i,{});e.exports=a},72309:(e,t,n)=>{var r=n(31913),o=n(5465);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.30.1",mode:r?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.30.1/LICENSE",source:"https://github.com/zloirock/core-js"})},36707:(e,t,n)=>{var r=n(19670),o=n(39483),i=n(68554),a=n(5112)("species");e.exports=function(e,t){var n,l=r(e).constructor;return void 0===l||i(n=r(l)[a])?t:o(n)}},43429:(e,t,n)=>{var r=n(47293);e.exports=function(e){return r((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3}))}},28710:(e,t,n)=>{var r=n(1702),o=n(19303),i=n(41340),a=n(84488),l=r("".charAt),u=r("".charCodeAt),c=r("".slice),s=function(e){return function(t,n){var r,s,f=i(a(t)),d=o(n),p=f.length;return d<0||d>=p?e?"":void 0:(r=u(f,d))<55296||r>56319||d+1===p||(s=u(f,d+1))<56320||s>57343?e?l(f,d):r:e?c(f,d,d+2):s-56320+(r-55296<<10)+65536}};e.exports={codeAt:s(!1),charAt:s(!0)}},36293:(e,t,n)=>{var r=n(7392),o=n(47293);e.exports=!!Object.getOwnPropertySymbols&&!o((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},56532:(e,t,n)=>{var r=n(46916),o=n(35005),i=n(5112),a=n(98052);e.exports=function(){var e=o("Symbol"),t=e&&e.prototype,n=t&&t.valueOf,l=i("toPrimitive");t&&!t[l]&&a(t,l,(function(e){return r(n,this)}),{arity:1})}},2015:(e,t,n)=>{var r=n(36293);e.exports=r&&!!Symbol.for&&!!Symbol.keyFor},20261:(e,t,n)=>{var r,o,i,a,l=n(17854),u=n(22104),c=n(49974),s=n(60614),f=n(92597),d=n(47293),p=n(60490),h=n(50206),m=n(80317),g=n(48053),v=n(6833),y=n(35268),A=l.setImmediate,b=l.clearImmediate,w=l.process,x=l.Dispatch,E=l.Function,C=l.MessageChannel,k=l.String,S=0,B={},I="onreadystatechange";d((function(){r=l.location}));var O=function(e){if(f(B,e)){var t=B[e];delete B[e],t()}},P=function(e){return function(){O(e)}},F=function(e){O(e.data)},_=function(e){l.postMessage(k(e),r.protocol+"//"+r.host)};A&&b||(A=function(e){g(arguments.length,1);var t=s(e)?e:E(e),n=h(arguments,1);return B[++S]=function(){u(t,void 0,n)},o(S),S},b=function(e){delete B[e]},y?o=function(e){w.nextTick(P(e))}:x&&x.now?o=function(e){x.now(P(e))}:C&&!v?(a=(i=new C).port2,i.port1.onmessage=F,o=c(a.postMessage,a)):l.addEventListener&&s(l.postMessage)&&!l.importScripts&&r&&"file:"!==r.protocol&&!d(_)?(o=_,l.addEventListener("message",F,!1)):o=I in m("script")?function(e){p.appendChild(m("script"))[I]=function(){p.removeChild(this),O(e)}}:function(e){setTimeout(P(e),0)}),e.exports={set:A,clear:b}},51400:(e,t,n)=>{var r=n(19303),o=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):i(n,t)}},45656:(e,t,n)=>{var r=n(68361),o=n(84488);e.exports=function(e){return r(o(e))}},19303:(e,t,n)=>{var r=n(74758);e.exports=function(e){var t=+e;return t!=t||0===t?0:r(t)}},17466:(e,t,n)=>{var r=n(19303),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},47908:(e,t,n)=>{var r=n(84488),o=Object;e.exports=function(e){return o(r(e))}},57593:(e,t,n)=>{var r=n(46916),o=n(70111),i=n(52190),a=n(58173),l=n(92140),u=n(5112),c=TypeError,s=u("toPrimitive");e.exports=function(e,t){if(!o(e)||i(e))return e;var n,u=a(e,s);if(u){if(void 0===t&&(t="default"),n=r(u,e,t),!o(n)||i(n))return n;throw c("Can't convert object to primitive value")}return void 0===t&&(t="number"),l(e,t)}},34948:(e,t,n)=>{var r=n(57593),o=n(52190);e.exports=function(e){var t=r(e,"string");return o(t)?t:t+""}},51694:(e,t,n)=>{var r={};r[n(5112)("toStringTag")]="z",e.exports="[object z]"===String(r)},41340:(e,t,n)=>{var r=n(70648),o=String;e.exports=function(e){if("Symbol"===r(e))throw TypeError("Cannot convert a Symbol value to a string");return o(e)}},66330:e=>{var t=String;e.exports=function(e){try{return t(e)}catch(e){return"Object"}}},69711:(e,t,n)=>{var r=n(1702),o=0,i=Math.random(),a=r(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+a(++o+i,36)}},43307:(e,t,n)=>{var r=n(36293);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3353:(e,t,n)=>{var r=n(19781),o=n(47293);e.exports=r&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},48053:e=>{var t=TypeError;e.exports=function(e,n){if(e<n)throw t("Not enough arguments");return e}},94811:(e,t,n)=>{var r=n(17854),o=n(60614),i=r.WeakMap;e.exports=o(i)&&/native code/.test(String(i))},26800:(e,t,n)=>{var r=n(40857),o=n(92597),i=n(6061),a=n(3070).f;e.exports=function(e){var t=r.Symbol||(r.Symbol={});o(t,e)||a(t,e,{value:i.f(e)})}},6061:(e,t,n)=>{var r=n(5112);t.f=r},5112:(e,t,n)=>{var r=n(17854),o=n(72309),i=n(92597),a=n(69711),l=n(36293),u=n(43307),c=r.Symbol,s=o("wks"),f=u?c.for||c:c&&c.withoutSetter||a;e.exports=function(e){return i(s,e)||(s[e]=l&&i(c,e)?c[e]:f("Symbol."+e)),s[e]}},92222:(e,t,n)=>{"use strict";var r=n(82109),o=n(47293),i=n(43157),a=n(70111),l=n(47908),u=n(26244),c=n(7207),s=n(86135),f=n(65417),d=n(81194),p=n(5112),h=n(7392),m=p("isConcatSpreadable"),g=h>=51||!o((function(){var e=[];return e[m]=!1,e.concat()[0]!==e})),v=function(e){if(!a(e))return!1;var t=e[m];return void 0!==t?!!t:i(e)};r({target:"Array",proto:!0,arity:1,forced:!g||!d("concat")},{concat:function(e){var t,n,r,o,i,a=l(this),d=f(a,0),p=0;for(t=-1,r=arguments.length;t<r;t++)if(v(i=-1===t?a:arguments[t]))for(o=u(i),c(p+o),n=0;n<o;n++,p++)n in i&&s(d,p,i[n]);else c(p+1),s(d,p++,i);return d.length=p,d}})},69826:(e,t,n)=>{"use strict";var r=n(82109),o=n(42092).find,i=n(51223),a="find",l=!0;a in[]&&Array(1)[a]((function(){l=!1})),r({target:"Array",proto:!0,forced:l},{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i(a)},91038:(e,t,n)=>{var r=n(82109),o=n(48457);r({target:"Array",stat:!0,forced:!n(17072)((function(e){Array.from(e)}))},{from:o})},66992:(e,t,n)=>{"use strict";var r=n(45656),o=n(51223),i=n(97497),a=n(29909),l=n(3070).f,u=n(51656),c=n(76178),s=n(31913),f=n(19781),d="Array Iterator",p=a.set,h=a.getterFor(d);e.exports=u(Array,"Array",(function(e,t){p(this,{type:d,target:r(e),index:0,kind:t})}),(function(){var e=h(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,c(void 0,!0)):c("keys"==n?r:"values"==n?t[r]:[r,t[r]],!1)}),"values");var m=i.Arguments=i.Array;if(o("keys"),o("values"),o("entries"),!s&&f&&"values"!==m.name)try{l(m,"name",{value:"values"})}catch(e){}},69600:(e,t,n)=>{"use strict";var r=n(82109),o=n(1702),i=n(68361),a=n(45656),l=n(9341),u=o([].join);r({target:"Array",proto:!0,forced:i!=Object||!l("join",",")},{join:function(e){return u(a(this),void 0===e?",":e)}})},21249:(e,t,n)=>{"use strict";var r=n(82109),o=n(42092).map;r({target:"Array",proto:!0,forced:!n(81194)("map")},{map:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},47042:(e,t,n)=>{"use strict";var r=n(82109),o=n(43157),i=n(4411),a=n(70111),l=n(51400),u=n(26244),c=n(45656),s=n(86135),f=n(5112),d=n(81194),p=n(50206),h=d("slice"),m=f("species"),g=Array,v=Math.max;r({target:"Array",proto:!0,forced:!h},{slice:function(e,t){var n,r,f,d=c(this),h=u(d),y=l(e,h),A=l(void 0===t?h:t,h);if(o(d)&&(n=d.constructor,(i(n)&&(n===g||o(n.prototype))||a(n)&&null===(n=n[m]))&&(n=void 0),n===g||void 0===n))return p(d,y,A);for(r=new(void 0===n?g:n)(v(A-y,0)),f=0;y<A;y++,f++)y in d&&s(r,f,d[y]);return r.length=f,r}})},2707:(e,t,n)=>{"use strict";var r=n(82109),o=n(1702),i=n(19662),a=n(47908),l=n(26244),u=n(85117),c=n(41340),s=n(47293),f=n(94362),d=n(9341),p=n(68886),h=n(30256),m=n(7392),g=n(98008),v=[],y=o(v.sort),A=o(v.push),b=s((function(){v.sort(void 0)})),w=s((function(){v.sort(null)})),x=d("sort"),E=!s((function(){if(m)return m<70;if(!(p&&p>3)){if(h)return!0;if(g)return g<603;var e,t,n,r,o="";for(e=65;e<76;e++){switch(t=String.fromCharCode(e),e){case 66:case 69:case 70:case 72:n=3;break;case 68:case 71:n=4;break;default:n=2}for(r=0;r<47;r++)v.push({k:t+r,v:n})}for(v.sort((function(e,t){return t.v-e.v})),r=0;r<v.length;r++)t=v[r].k.charAt(0),o.charAt(o.length-1)!==t&&(o+=t);return"DGBEFHACIJK"!==o}}));r({target:"Array",proto:!0,forced:b||!w||!x||!E},{sort:function(e){void 0!==e&&i(e);var t=a(this);if(E)return void 0===e?y(t):y(t,e);var n,r,o=[],s=l(t);for(r=0;r<s;r++)r in t&&A(o,t[r]);for(f(o,function(e){return function(t,n){return void 0===n?-1:void 0===t?1:void 0!==e?+e(t,n)||0:c(t)>c(n)?1:-1}}(e)),n=l(o),r=0;r<n;)t[r]=o[r++];for(;r<s;)u(t,r++);return t}})},68309:(e,t,n)=>{var r=n(19781),o=n(76530).EXISTS,i=n(1702),a=n(47045),l=Function.prototype,u=i(l.toString),c=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,s=i(c.exec);r&&!o&&a(l,"name",{configurable:!0,get:function(){try{return s(c,u(this))[1]}catch(e){return""}}})},38862:(e,t,n)=>{var r=n(82109),o=n(35005),i=n(22104),a=n(46916),l=n(1702),u=n(47293),c=n(60614),s=n(52190),f=n(50206),d=n(88044),p=n(36293),h=String,m=o("JSON","stringify"),g=l(/./.exec),v=l("".charAt),y=l("".charCodeAt),A=l("".replace),b=l(1..toString),w=/[\uD800-\uDFFF]/g,x=/^[\uD800-\uDBFF]$/,E=/^[\uDC00-\uDFFF]$/,C=!p||u((function(){var e=o("Symbol")();return"[null]"!=m([e])||"{}"!=m({a:e})||"{}"!=m(Object(e))})),k=u((function(){return'"\\udf06\\ud834"'!==m("\udf06\ud834")||'"\\udead"'!==m("\udead")})),S=function(e,t){var n=f(arguments),r=d(t);if(c(r)||void 0!==e&&!s(e))return n[1]=function(e,t){if(c(r)&&(t=a(r,this,h(e),t)),!s(t))return t},i(m,null,n)},B=function(e,t,n){var r=v(n,t-1),o=v(n,t+1);return g(x,e)&&!g(E,o)||g(E,e)&&!g(x,r)?"\\u"+b(y(e,0),16):e};m&&r({target:"JSON",stat:!0,arity:3,forced:C||k},{stringify:function(e,t,n){var r=f(arguments),o=i(C?S:m,null,r);return k&&"string"==typeof o?A(o,w,B):o}})},73706:(e,t,n)=>{var r=n(17854);n(58003)(r.JSON,"JSON",!0)},10408:(e,t,n)=>{n(58003)(Math,"Math",!0)},29660:(e,t,n)=>{var r=n(82109),o=n(36293),i=n(47293),a=n(25181),l=n(47908);r({target:"Object",stat:!0,forced:!o||i((function(){a.f(1)}))},{getOwnPropertySymbols:function(e){var t=a.f;return t?t(l(e)):[]}})},30489:(e,t,n)=>{var r=n(82109),o=n(47293),i=n(47908),a=n(79518),l=n(49920);r({target:"Object",stat:!0,forced:o((function(){a(1)})),sham:!l},{getPrototypeOf:function(e){return a(i(e))}})},47941:(e,t,n)=>{var r=n(82109),o=n(47908),i=n(81956);r({target:"Object",stat:!0,forced:n(47293)((function(){i(1)}))},{keys:function(e){return i(o(e))}})},68304:(e,t,n)=>{n(82109)({target:"Object",stat:!0},{setPrototypeOf:n(27674)})},41539:(e,t,n)=>{var r=n(51694),o=n(98052),i=n(90288);r||o(Object.prototype,"toString",i,{unsafe:!0})},70821:(e,t,n)=>{"use strict";var r=n(82109),o=n(46916),i=n(19662),a=n(78523),l=n(12534),u=n(20408);r({target:"Promise",stat:!0,forced:n(80612)},{all:function(e){var t=this,n=a.f(t),r=n.resolve,c=n.reject,s=l((function(){var n=i(t.resolve),a=[],l=0,s=1;u(e,(function(e){var i=l++,u=!1;s++,o(n,t,e).then((function(e){u||(u=!0,a[i]=e,--s||r(a))}),c)})),--s||r(a)}));return s.error&&c(s.value),n.promise}})},94164:(e,t,n)=>{"use strict";var r=n(82109),o=n(31913),i=n(63702).CONSTRUCTOR,a=n(2492),l=n(35005),u=n(60614),c=n(98052),s=a&&a.prototype;if(r({target:"Promise",proto:!0,forced:i,real:!0},{catch:function(e){return this.then(void 0,e)}}),!o&&u(a)){var f=l("Promise").prototype.catch;s.catch!==f&&c(s,"catch",f,{unsafe:!0})}},43401:(e,t,n)=>{"use strict";var r,o,i,a=n(82109),l=n(31913),u=n(35268),c=n(17854),s=n(46916),f=n(98052),d=n(27674),p=n(58003),h=n(96340),m=n(19662),g=n(60614),v=n(70111),y=n(25787),A=n(36707),b=n(20261).set,w=n(95948),x=n(842),E=n(12534),C=n(18572),k=n(29909),S=n(2492),B=n(63702),I=n(78523),O="Promise",P=B.CONSTRUCTOR,F=B.REJECTION_EVENT,_=B.SUBCLASSING,T=k.getterFor(O),L=k.set,N=S&&S.prototype,j=S,R=N,M=c.TypeError,z=c.document,D=c.process,U=I.f,W=U,q=!!(z&&z.createEvent&&c.dispatchEvent),V="unhandledrejection",H=function(e){var t;return!(!v(e)||!g(t=e.then))&&t},Q=function(e,t){var n,r,o,i=t.value,a=1==t.state,l=a?e.ok:e.fail,u=e.resolve,c=e.reject,f=e.domain;try{l?(a||(2===t.rejection&&K(t),t.rejection=1),!0===l?n=i:(f&&f.enter(),n=l(i),f&&(f.exit(),o=!0)),n===e.promise?c(M("Promise-chain cycle")):(r=H(n))?s(r,n,u,c):u(n)):c(i)}catch(e){f&&!o&&f.exit(),c(e)}},Y=function(e,t){e.notified||(e.notified=!0,w((function(){for(var n,r=e.reactions;n=r.get();)Q(n,e);e.notified=!1,t&&!e.rejection&&$(e)})))},G=function(e,t,n){var r,o;q?((r=z.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),c.dispatchEvent(r)):r={promise:t,reason:n},!F&&(o=c["on"+e])?o(r):e===V&&x("Unhandled promise rejection",n)},$=function(e){s(b,c,(function(){var t,n=e.facade,r=e.value;if(X(e)&&(t=E((function(){u?D.emit("unhandledRejection",r,n):G(V,n,r)})),e.rejection=u||X(e)?2:1,t.error))throw t.value}))},X=function(e){return 1!==e.rejection&&!e.parent},K=function(e){s(b,c,(function(){var t=e.facade;u?D.emit("rejectionHandled",t):G("rejectionhandled",t,e.value)}))},J=function(e,t,n){return function(r){e(t,r,n)}},Z=function(e,t,n){e.done||(e.done=!0,n&&(e=n),e.value=t,e.state=2,Y(e,!0))},ee=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw M("Promise can't be resolved itself");var r=H(t);r?w((function(){var n={done:!1};try{s(r,t,J(ee,n,e),J(Z,n,e))}catch(t){Z(n,t,e)}})):(e.value=t,e.state=1,Y(e,!1))}catch(t){Z({done:!1},t,e)}}};if(P&&(R=(j=function(e){y(this,R),m(e),s(r,this);var t=T(this);try{e(J(ee,t),J(Z,t))}catch(e){Z(t,e)}}).prototype,(r=function(e){L(this,{type:O,done:!1,notified:!1,parent:!1,reactions:new C,rejection:!1,state:0,value:void 0})}).prototype=f(R,"then",(function(e,t){var n=T(this),r=U(A(this,j));return n.parent=!0,r.ok=!g(e)||e,r.fail=g(t)&&t,r.domain=u?D.domain:void 0,0==n.state?n.reactions.add(r):w((function(){Q(r,n)})),r.promise})),o=function(){var e=new r,t=T(e);this.promise=e,this.resolve=J(ee,t),this.reject=J(Z,t)},I.f=U=function(e){return e===j||void 0===e?new o(e):W(e)},!l&&g(S)&&N!==Object.prototype)){i=N.then,_||f(N,"then",(function(e,t){var n=this;return new j((function(e,t){s(i,n,e,t)})).then(e,t)}),{unsafe:!0});try{delete N.constructor}catch(e){}d&&d(N,R)}a({global:!0,constructor:!0,wrap:!0,forced:P},{Promise:j}),p(j,O,!1,!0),h(O)},88674:(e,t,n)=>{n(43401),n(70821),n(94164),n(6027),n(60683),n(96294)},6027:(e,t,n)=>{"use strict";var r=n(82109),o=n(46916),i=n(19662),a=n(78523),l=n(12534),u=n(20408);r({target:"Promise",stat:!0,forced:n(80612)},{race:function(e){var t=this,n=a.f(t),r=n.reject,c=l((function(){var a=i(t.resolve);u(e,(function(e){o(a,t,e).then(n.resolve,r)}))}));return c.error&&r(c.value),n.promise}})},60683:(e,t,n)=>{"use strict";var r=n(82109),o=n(46916),i=n(78523);r({target:"Promise",stat:!0,forced:n(63702).CONSTRUCTOR},{reject:function(e){var t=i.f(this);return o(t.reject,void 0,e),t.promise}})},96294:(e,t,n)=>{"use strict";var r=n(82109),o=n(35005),i=n(31913),a=n(2492),l=n(63702).CONSTRUCTOR,u=n(69478),c=o("Promise"),s=i&&!l;r({target:"Promise",stat:!0,forced:i||l},{resolve:function(e){return u(s&&this===c?a:this,e)}})},74916:(e,t,n)=>{"use strict";var r=n(82109),o=n(22261);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},78783:(e,t,n)=>{"use strict";var r=n(28710).charAt,o=n(41340),i=n(29909),a=n(51656),l=n(76178),u="String Iterator",c=i.set,s=i.getterFor(u);a(String,"String",(function(e){c(this,{type:u,string:o(e),index:0})}),(function(){var e,t=s(this),n=t.string,o=t.index;return o>=n.length?l(void 0,!0):(e=r(n,o),t.index+=e.length,l(e,!1))}))},29254:(e,t,n)=>{"use strict";var r=n(82109),o=n(4879);r({target:"String",proto:!0,forced:n(43429)("link")},{link:function(e){return o(this,"a","href",e)}})},72443:(e,t,n)=>{n(26800)("asyncIterator")},4032:(e,t,n)=>{"use strict";var r=n(82109),o=n(17854),i=n(46916),a=n(1702),l=n(31913),u=n(19781),c=n(36293),s=n(47293),f=n(92597),d=n(47976),p=n(19670),h=n(45656),m=n(34948),g=n(41340),v=n(79114),y=n(70030),A=n(81956),b=n(8006),w=n(1156),x=n(25181),E=n(31236),C=n(3070),k=n(36048),S=n(55296),B=n(98052),I=n(47045),O=n(72309),P=n(6200),F=n(3501),_=n(69711),T=n(5112),L=n(6061),N=n(26800),j=n(56532),R=n(58003),M=n(29909),z=n(42092).forEach,D=P("hidden"),U="Symbol",W="prototype",q=M.set,V=M.getterFor(U),H=Object[W],Q=o.Symbol,Y=Q&&Q[W],G=o.TypeError,$=o.QObject,X=E.f,K=C.f,J=w.f,Z=S.f,ee=a([].push),te=O("symbols"),ne=O("op-symbols"),re=O("wks"),oe=!$||!$[W]||!$[W].findChild,ie=u&&s((function(){return 7!=y(K({},"a",{get:function(){return K(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=X(H,t);r&&delete H[t],K(e,t,n),r&&e!==H&&K(H,t,r)}:K,ae=function(e,t){var n=te[e]=y(Y);return q(n,{type:U,tag:e,description:t}),u||(n.description=t),n},le=function(e,t,n){e===H&&le(ne,t,n),p(e);var r=m(t);return p(n),f(te,r)?(n.enumerable?(f(e,D)&&e[D][r]&&(e[D][r]=!1),n=y(n,{enumerable:v(0,!1)})):(f(e,D)||K(e,D,v(1,{})),e[D][r]=!0),ie(e,r,n)):K(e,r,n)},ue=function(e,t){p(e);var n=h(t),r=A(n).concat(de(n));return z(r,(function(t){u&&!i(ce,n,t)||le(e,t,n[t])})),e},ce=function(e){var t=m(e),n=i(Z,this,t);return!(this===H&&f(te,t)&&!f(ne,t))&&(!(n||!f(this,t)||!f(te,t)||f(this,D)&&this[D][t])||n)},se=function(e,t){var n=h(e),r=m(t);if(n!==H||!f(te,r)||f(ne,r)){var o=X(n,r);return!o||!f(te,r)||f(n,D)&&n[D][r]||(o.enumerable=!0),o}},fe=function(e){var t=J(h(e)),n=[];return z(t,(function(e){f(te,e)||f(F,e)||ee(n,e)})),n},de=function(e){var t=e===H,n=J(t?ne:h(e)),r=[];return z(n,(function(e){!f(te,e)||t&&!f(H,e)||ee(r,te[e])})),r};c||(B(Y=(Q=function(){if(d(Y,this))throw G("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?g(arguments[0]):void 0,t=_(e),n=function(e){this===H&&i(n,ne,e),f(this,D)&&f(this[D],t)&&(this[D][t]=!1),ie(this,t,v(1,e))};return u&&oe&&ie(H,t,{configurable:!0,set:n}),ae(t,e)})[W],"toString",(function(){return V(this).tag})),B(Q,"withoutSetter",(function(e){return ae(_(e),e)})),S.f=ce,C.f=le,k.f=ue,E.f=se,b.f=w.f=fe,x.f=de,L.f=function(e){return ae(T(e),e)},u&&(I(Y,"description",{configurable:!0,get:function(){return V(this).description}}),l||B(H,"propertyIsEnumerable",ce,{unsafe:!0}))),r({global:!0,constructor:!0,wrap:!0,forced:!c,sham:!c},{Symbol:Q}),z(A(re),(function(e){N(e)})),r({target:U,stat:!0,forced:!c},{useSetter:function(){oe=!0},useSimple:function(){oe=!1}}),r({target:"Object",stat:!0,forced:!c,sham:!u},{create:function(e,t){return void 0===t?y(e):ue(y(e),t)},defineProperty:le,defineProperties:ue,getOwnPropertyDescriptor:se}),r({target:"Object",stat:!0,forced:!c},{getOwnPropertyNames:fe}),j(),R(Q,U),F[D]=!0},41817:(e,t,n)=>{"use strict";var r=n(82109),o=n(19781),i=n(17854),a=n(1702),l=n(92597),u=n(60614),c=n(47976),s=n(41340),f=n(47045),d=n(99920),p=i.Symbol,h=p&&p.prototype;if(o&&u(p)&&(!("description"in h)||void 0!==p().description)){var m={},g=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:s(arguments[0]),t=c(h,this)?new p(e):void 0===e?p():p(e);return""===e&&(m[t]=!0),t};d(g,p),g.prototype=h,h.constructor=g;var v="Symbol(test)"==String(p("test")),y=a(h.valueOf),A=a(h.toString),b=/^Symbol\((.*)\)[^)]+$/,w=a("".replace),x=a("".slice);f(h,"description",{configurable:!0,get:function(){var e=y(this);if(l(m,e))return"";var t=A(e),n=v?x(t,7,-1):w(t,b,"$1");return""===n?void 0:n}}),r({global:!0,constructor:!0,forced:!0},{Symbol:g})}},40763:(e,t,n)=>{var r=n(82109),o=n(35005),i=n(92597),a=n(41340),l=n(72309),u=n(2015),c=l("string-to-symbol-registry"),s=l("symbol-to-string-registry");r({target:"Symbol",stat:!0,forced:!u},{for:function(e){var t=a(e);if(i(c,t))return c[t];var n=o("Symbol")(t);return c[t]=n,s[n]=t,n}})},32165:(e,t,n)=>{n(26800)("iterator")},82526:(e,t,n)=>{n(4032),n(40763),n(26620),n(38862),n(29660)},26620:(e,t,n)=>{var r=n(82109),o=n(92597),i=n(52190),a=n(66330),l=n(72309),u=n(2015),c=l("symbol-to-string-registry");r({target:"Symbol",stat:!0,forced:!u},{keyFor:function(e){if(!i(e))throw TypeError(a(e)+" is not a symbol");if(o(c,e))return c[e]}})},39341:(e,t,n)=>{var r=n(35005),o=n(26800),i=n(58003);o("toStringTag"),i(r("Symbol"),"Symbol")},54747:(e,t,n)=>{var r=n(17854),o=n(48324),i=n(98509),a=n(18533),l=n(68880),u=function(e){if(e&&e.forEach!==a)try{l(e,"forEach",a)}catch(t){e.forEach=a}};for(var c in o)o[c]&&u(r[c]&&r[c].prototype);u(i)},33948:(e,t,n)=>{var r=n(17854),o=n(48324),i=n(98509),a=n(66992),l=n(68880),u=n(5112),c=u("iterator"),s=u("toStringTag"),f=a.values,d=function(e,t){if(e){if(e[c]!==f)try{l(e,c,f)}catch(t){e[c]=f}if(e[s]||l(e,s,t),o[t])for(var n in a)if(e[n]!==a[n])try{l(e,n,a[n])}catch(t){e[n]=a[n]}}};for(var p in o)d(r[p]&&r[p].prototype,p);d(i,"DOMTokenList")},8765:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,".CurrentComm-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-auto-rows: auto;\n    grid-gap: 1.25rem;\n    text-align: left;\n}\n\n.CurrentComm-container > * {\n    aspect-ratio: 16/9;\n}\n\n.CurrentComm-single {\n    position: relative;\n}\n\n.CurrentComm-background {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-position: center;\n    background-size: cover;\n    filter: contrast(0.8);\n}\n\n.CurrentComm-about {\n    position: absolute;\n    bottom: 0px;\n    width: 90%;\n    color: white;\n    background-color: rgba(0,0,0,.5);\n    padding: .75rem 5%;\n}\n\n.name {\n    font-size: 1.25em;\n}\n\n.post {\n    font-size: 1em;\n}\n\n@media screen and (max-width: 752px) {\n    .CurrentComm-container {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}\n\n@media screen and (max-width: 496px) {\n    .CurrentComm-container {\n        grid-template-columns: repeat(1, 1fr);\n    }\n}\n\n","",{version:3,sources:["webpack://./client/src/components/modules/AllSocieties.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,qCAAqC;IACrC,oBAAoB;IACpB,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,WAAW;IACX,YAAY;IACZ,2BAA2B;IAC3B,sBAAsB;IACtB,qBAAqB;AACzB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,UAAU;IACV,YAAY;IACZ,gCAAgC;IAChC,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI;QACI,qCAAqC;IACzC;AACJ;;AAEA;IACI;QACI,qCAAqC;IACzC;AACJ",sourcesContent:[".CurrentComm-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-auto-rows: auto;\n    grid-gap: 1.25rem;\n    text-align: left;\n}\n\n.CurrentComm-container > * {\n    aspect-ratio: 16/9;\n}\n\n.CurrentComm-single {\n    position: relative;\n}\n\n.CurrentComm-background {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-position: center;\n    background-size: cover;\n    filter: contrast(0.8);\n}\n\n.CurrentComm-about {\n    position: absolute;\n    bottom: 0px;\n    width: 90%;\n    color: white;\n    background-color: rgba(0,0,0,.5);\n    padding: .75rem 5%;\n}\n\n.name {\n    font-size: 1.25em;\n}\n\n.post {\n    font-size: 1em;\n}\n\n@media screen and (max-width: 752px) {\n    .CurrentComm-container {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}\n\n@media screen and (max-width: 496px) {\n    .CurrentComm-container {\n        grid-template-columns: repeat(1, 1fr);\n    }\n}\n\n"],sourceRoot:""}]);const l=a},41590:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,".BottomBanner {\n    padding-top: 2rem;\n    padding-bottom: 2rem;\n    padding-inline: 10%;\n    top: 5rem;\n    background-color: var(--primary);\n    color: white;\n}\n\n.BottomBanner > * + * {\n    margin-top: 1rem;\n}\n\n.BottomBanner-unionlogo .BottomBanner-socialogo {\n    margin-inline: auto;\n}\n\n.BottomBanner-unionlogo > a {\n    display: inline-block;\n}\n\n.BottomBanner-unionlogo > a > img {\n    height: 5rem;\n}\n\n.BottomBanner-sociallogo > a {\n    color:white;\n    display: inline-block;\n}\n\n.BottomBanner-sociallogo > a > img {\n    height: 1.5rem;\n}\n\n.BottomBanner-unionlogo > * + * {\n    margin-left: 1em;\n}\n\n.BottomBanner-sociallogo > * + * {\n    margin-left: 0.75em;\n}\n\n.BottomBanner-description > p {\n    margin: 0;\n    font-size: 0.75rem;\n}\n\n.author, .author:hover, .author:visited {\n    color: var(--grey);\n}\n\n.BottomBanner-description > p + p {\n    margin-top: 0.3rem;\n}","",{version:3,sources:["webpack://./client/src/components/modules/BottomBanner.css"],names:[],mappings:"AAAA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,mBAAmB;IACnB,SAAS;IACT,gCAAgC;IAChC,YAAY;AAChB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,qBAAqB;AACzB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,SAAS;IACT,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB",sourcesContent:[".BottomBanner {\n    padding-top: 2rem;\n    padding-bottom: 2rem;\n    padding-inline: 10%;\n    top: 5rem;\n    background-color: var(--primary);\n    color: white;\n}\n\n.BottomBanner > * + * {\n    margin-top: 1rem;\n}\n\n.BottomBanner-unionlogo .BottomBanner-socialogo {\n    margin-inline: auto;\n}\n\n.BottomBanner-unionlogo > a {\n    display: inline-block;\n}\n\n.BottomBanner-unionlogo > a > img {\n    height: 5rem;\n}\n\n.BottomBanner-sociallogo > a {\n    color:white;\n    display: inline-block;\n}\n\n.BottomBanner-sociallogo > a > img {\n    height: 1.5rem;\n}\n\n.BottomBanner-unionlogo > * + * {\n    margin-left: 1em;\n}\n\n.BottomBanner-sociallogo > * + * {\n    margin-left: 0.75em;\n}\n\n.BottomBanner-description > p {\n    margin: 0;\n    font-size: 0.75rem;\n}\n\n.author, .author:hover, .author:visited {\n    color: var(--grey);\n}\n\n.BottomBanner-description > p + p {\n    margin-top: 0.3rem;\n}"],sourceRoot:""}]);const l=a},97656:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,".ButtonFlex-container {\n    display: flex;\n    justify-content: space-between;\n    margin-top: 1.5rem;\n    margin-bottom: 1.5rem;\n}\n\n.ButtonFlex-container-2, .ButtonFlex-container-3 {\n    flex-direction: column;\n    margin-inline: 0;\n}\n\n.ButtonFlex-container > * {\n    width: 100%;\n    text-align: center;\n    padding-top: 1em;\n    padding-bottom: 1em;\n    padding-inline: auto;\n}\n\n.ButtonFlex-container > * + * {\n    margin-top: 1em;\n}\n\n/* individual button styling */\n\n.ButtonFlex-container a {\n    text-decoration: none;\n}\n\n.ButtonFlex-container input {\n    font-size: inherit;\n    font-family: inherit;\n    text-align: center;\n    padding-top: 1em;\n    padding-bottom: 1em;\n    padding-inline: 2em;\n    border: none;\n}\n\n/* mobile version: depends on length of item list */\n\n.ButtonFlex-container-1 > * {\n    width: 100%;\n    max-width: 60ch;\n    margin-inline: auto;\n    padding-inline: 2ch;\n}\n\n@media (min-width: 800px) {\n    .ButtonFlex-container-2 {\n        flex-direction: row;\n        margin-inline: auto;\n        max-width: 640px;\n    }\n\n    .ButtonFlex-container-2 > * {\n        width: 30ch;\n        margin-inline: 2ch;\n    }\n\n    .ButtonFlex-container-2 > * + * {\n        margin-top: 0;\n    }\n}\n\n@media (min-width: 1080px) {\n    .ButtonFlex-container-3 {\n        flex-direction: row;\n        margin-inline: auto;\n        max-width: 960px;\n    }\n\n    .ButtonFlex-container-3 > * {\n        width: 20ch;\n        margin-inline: 2ch;\n        padding-inline: 2rem;\n    }\n\n    .ButtonFlex-container-3 > * + * {\n        margin-top: 0;\n    }\n}","",{version:3,sources:["webpack://./client/src/components/modules/ButtonFlex.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,kBAAkB;IAClB,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;IACtB,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,gBAAgB;IAChB,mBAAmB;IACnB,oBAAoB;AACxB;;AAEA;IACI,eAAe;AACnB;;AAEA,8BAA8B;;AAE9B;IACI,qBAAqB;AACzB;;AAEA;IACI,kBAAkB;IAClB,oBAAoB;IACpB,kBAAkB;IAClB,gBAAgB;IAChB,mBAAmB;IACnB,mBAAmB;IACnB,YAAY;AAChB;;AAEA,mDAAmD;;AAEnD;IACI,WAAW;IACX,eAAe;IACf,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI;QACI,mBAAmB;QACnB,mBAAmB;QACnB,gBAAgB;IACpB;;IAEA;QACI,WAAW;QACX,kBAAkB;IACtB;;IAEA;QACI,aAAa;IACjB;AACJ;;AAEA;IACI;QACI,mBAAmB;QACnB,mBAAmB;QACnB,gBAAgB;IACpB;;IAEA;QACI,WAAW;QACX,kBAAkB;QAClB,oBAAoB;IACxB;;IAEA;QACI,aAAa;IACjB;AACJ",sourcesContent:[".ButtonFlex-container {\n    display: flex;\n    justify-content: space-between;\n    margin-top: 1.5rem;\n    margin-bottom: 1.5rem;\n}\n\n.ButtonFlex-container-2, .ButtonFlex-container-3 {\n    flex-direction: column;\n    margin-inline: 0;\n}\n\n.ButtonFlex-container > * {\n    width: 100%;\n    text-align: center;\n    padding-top: 1em;\n    padding-bottom: 1em;\n    padding-inline: auto;\n}\n\n.ButtonFlex-container > * + * {\n    margin-top: 1em;\n}\n\n/* individual button styling */\n\n.ButtonFlex-container a {\n    text-decoration: none;\n}\n\n.ButtonFlex-container input {\n    font-size: inherit;\n    font-family: inherit;\n    text-align: center;\n    padding-top: 1em;\n    padding-bottom: 1em;\n    padding-inline: 2em;\n    border: none;\n}\n\n/* mobile version: depends on length of item list */\n\n.ButtonFlex-container-1 > * {\n    width: 100%;\n    max-width: 60ch;\n    margin-inline: auto;\n    padding-inline: 2ch;\n}\n\n@media (min-width: 800px) {\n    .ButtonFlex-container-2 {\n        flex-direction: row;\n        margin-inline: auto;\n        max-width: 640px;\n    }\n\n    .ButtonFlex-container-2 > * {\n        width: 30ch;\n        margin-inline: 2ch;\n    }\n\n    .ButtonFlex-container-2 > * + * {\n        margin-top: 0;\n    }\n}\n\n@media (min-width: 1080px) {\n    .ButtonFlex-container-3 {\n        flex-direction: row;\n        margin-inline: auto;\n        max-width: 960px;\n    }\n\n    .ButtonFlex-container-3 > * {\n        width: 20ch;\n        margin-inline: 2ch;\n        padding-inline: 2rem;\n    }\n\n    .ButtonFlex-container-3 > * + * {\n        margin-top: 0;\n    }\n}"],sourceRoot:""}]);const l=a},12825:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,'.contentblock{\n    padding: 0 10% 0% 10%;\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n  }\n  \n.contentblock > h1 {\ndisplay: inline-block;\n}\n  \n.contentblock-title:before {\n    content: "";\n    display: block;\n    height: 0.25rem;\n    width: 100%;\n    margin-bottom: 0.25rem;\n    opacity: 1;\n    background-color: currentColor;\n    -ms-transform-origin: left center;\n    transform-origin: left center;\n    animation: 1.5s cubic-bezier(0,0,0,1) 0s 1 section-title-line\n}\n  \n@keyframes section-title-line {\n0% {\n    transform: scaleX(0);\n    -ms-transform: scaleX(0);\n}\n\n100% {\n    transform: scaleX(1);\n    -ms-transform: scaleX(1);\n}\n}',"",{version:3,sources:["webpack://./client/src/components/modules/ContentBlock.css"],names:[],mappings:"AAAA;IACI,qBAAqB;IACrB,gBAAgB;IAChB,mBAAmB;EACrB;;AAEF;AACA,qBAAqB;AACrB;;AAEA;IACI,WAAW;IACX,cAAc;IACd,eAAe;IACf,WAAW;IACX,sBAAsB;IACtB,UAAU;IACV,8BAA8B;IAC9B,iCAAiC;IACjC,6BAA6B;IAC7B;AACJ;;AAEA;AACA;IACI,oBAAoB;IACpB,wBAAwB;AAC5B;;AAEA;IACI,oBAAoB;IACpB,wBAAwB;AAC5B;AACA",sourcesContent:['.contentblock{\n    padding: 0 10% 0% 10%;\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n  }\n  \n.contentblock > h1 {\ndisplay: inline-block;\n}\n  \n.contentblock-title:before {\n    content: "";\n    display: block;\n    height: 0.25rem;\n    width: 100%;\n    margin-bottom: 0.25rem;\n    opacity: 1;\n    background-color: currentColor;\n    -ms-transform-origin: left center;\n    transform-origin: left center;\n    animation: 1.5s cubic-bezier(0,0,0,1) 0s 1 section-title-line\n}\n  \n@keyframes section-title-line {\n0% {\n    transform: scaleX(0);\n    -ms-transform: scaleX(0);\n}\n\n100% {\n    transform: scaleX(1);\n    -ms-transform: scaleX(1);\n}\n}'],sourceRoot:""}]);const l=a},26373:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,".CurrentComm-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-auto-rows: auto;\n    grid-gap: 1.25rem;\n    text-align: left;\n}\n\n.CurrentComm-container > * {\n    aspect-ratio: 16/9;\n}\n\n.CurrentComm-single {\n    position: relative;\n}\n\n.CurrentComm-background {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-position: center;\n    background-size: cover;\n    filter: contrast(0.8);\n}\n\n.CurrentComm-about {\n    position: absolute;\n    bottom: 0px;\n    width: 90%;\n    color: white;\n    background-color: rgba(0,0,0,.5);\n    padding: .75rem 5%;\n}\n\n.name {\n    font-size: 1.25em;\n}\n\n.post {\n    font-size: 1em;\n}\n\n@media screen and (max-width: 752px) {\n    .CurrentComm-container {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}\n\n@media screen and (max-width: 496px) {\n    .CurrentComm-container {\n        grid-template-columns: repeat(1, 1fr);\n    }\n}\n\n","",{version:3,sources:["webpack://./client/src/components/modules/CurrentComm.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,qCAAqC;IACrC,oBAAoB;IACpB,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,WAAW;IACX,YAAY;IACZ,2BAA2B;IAC3B,sBAAsB;IACtB,qBAAqB;AACzB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,UAAU;IACV,YAAY;IACZ,gCAAgC;IAChC,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI;QACI,qCAAqC;IACzC;AACJ;;AAEA;IACI;QACI,qCAAqC;IACzC;AACJ",sourcesContent:[".CurrentComm-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-auto-rows: auto;\n    grid-gap: 1.25rem;\n    text-align: left;\n}\n\n.CurrentComm-container > * {\n    aspect-ratio: 16/9;\n}\n\n.CurrentComm-single {\n    position: relative;\n}\n\n.CurrentComm-background {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-position: center;\n    background-size: cover;\n    filter: contrast(0.8);\n}\n\n.CurrentComm-about {\n    position: absolute;\n    bottom: 0px;\n    width: 90%;\n    color: white;\n    background-color: rgba(0,0,0,.5);\n    padding: .75rem 5%;\n}\n\n.name {\n    font-size: 1.25em;\n}\n\n.post {\n    font-size: 1em;\n}\n\n@media screen and (max-width: 752px) {\n    .CurrentComm-container {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}\n\n@media screen and (max-width: 496px) {\n    .CurrentComm-container {\n        grid-template-columns: repeat(1, 1fr);\n    }\n}\n\n"],sourceRoot:""}]);const l=a},40770:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,".eventbanner {\n    margin: 0;\n    width: 100%;\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n    overflow: visible;\n    display: flex;\n    flex-direction: column;\n    justify-content: end;\n    aspect-ratio: 16/9;\n    padding-bottom: 2rem;\n}\n\n.eventbanner-basicinfo {\n    padding-bottom: 1rem;\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n    margin-inline: 10%;\n}\n\n.eventbanner-bodycontainer {\n    width: 80%;\n    margin-inline: auto;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    color: black;\n}\n\n.eventbanner-left {\n    width: 100%;\n}\n\n.eventbanner-title {\n    margin: 0px;\n    color: #FFFFFF;\n    font-size: 1.25em;\n    font-weight: 600;\n}\n\n.eventbanner-line {\n    display: block;\n    width: 100%;\n    height: .08em;\n    background-color: currentColor;\n    -ms-transform-origin: top left;\n    transform-origin: top left;\n  }\n\n.eventbanner-content {\n    position: relative;\n    top: 10px;\n    font-size: 2em;\n    color: #FFFFFF;\n    font-weight: 300;\n}\n\n.eventbanner-right {\n    width: 90%;\n    padding: 1.5rem 5%;\n    background-color: var(--grey);\n    color: black,\n}\n\n.eventbanner-nature {\n    font-size: .9rem;\n    padding-inline: .25rem;\n}\n\n.eventbanner-nature + .eventbanner-nature {\n    margin-left: .25rem;\n}\n\n.eventbanner-register {\n    width: 100%;\n    background-color: var(--primary);\n    color: white;\n    margin-bottom: .5rem;\n}\n\n.eventbanner-eventlink {\n    width: 100%;\n    background-color: var(--secondary);\n    color: var(--primary);\n    margin-bottom: .5rem;\n}\n\n.eventbanner-image {\n    max-width: 100%;\n    height: auto;\n}\n\n@media (min-width: 960px) {\n    .eventbanner {\n        aspect-ratio: 16/6;\n        max-height: 70vh;\n    }\n\n    .eventbanner-bodycontainer {\n        flex-direction: row;\n        justify-content: space-between;\n    }\n\n    .eventbanner-left {\n        width: 55%;\n    }\n\n    .eventbanner-title {\n        font-size: 1.5em;\n    }\n\n    .eventbanner-content {\n      font-size: 2.5em;\n    }\n\n    .eventbanner-right {\n        display: block;\n        width: 40%;\n        margin-left: 5%;\n        padding: 1.5rem;\n        color: black;\n    }\n\n    .eventbanner-basicinfo {\n        position: absolute;\n        top: 30vh;\n        margin-top: 0;\n        margin-bottom: 0;\n        margin-inline: 0 10%;\n        left: 60%;\n        width: 30%;\n    }\n}","",{version:3,sources:["webpack://./client/src/components/modules/EventBanner.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,WAAW;IACX,sBAAsB;IACtB,kCAAkC;IAClC,4BAA4B;IAC5B,iBAAiB;IACjB,aAAa;IACb,sBAAsB;IACtB,oBAAoB;IACpB,kBAAkB;IAClB,oBAAoB;AACxB;;AAEA;IACI,oBAAoB;IACpB,gBAAgB;IAChB,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,UAAU;IACV,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,8BAA8B;IAC9B,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;IACX,cAAc;IACd,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,cAAc;IACd,WAAW;IACX,aAAa;IACb,8BAA8B;IAC9B,8BAA8B;IAC9B,0BAA0B;EAC5B;;AAEF;IACI,kBAAkB;IAClB,SAAS;IACT,cAAc;IACd,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,UAAU;IACV,kBAAkB;IAClB,6BAA6B;IAC7B;AACJ;;AAEA;IACI,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,gCAAgC;IAChC,YAAY;IACZ,oBAAoB;AACxB;;AAEA;IACI,WAAW;IACX,kCAAkC;IAClC,qBAAqB;IACrB,oBAAoB;AACxB;;AAEA;IACI,eAAe;IACf,YAAY;AAChB;;AAEA;IACI;QACI,kBAAkB;QAClB,gBAAgB;IACpB;;IAEA;QACI,mBAAmB;QACnB,8BAA8B;IAClC;;IAEA;QACI,UAAU;IACd;;IAEA;QACI,gBAAgB;IACpB;;IAEA;MACE,gBAAgB;IAClB;;IAEA;QACI,cAAc;QACd,UAAU;QACV,eAAe;QACf,eAAe;QACf,YAAY;IAChB;;IAEA;QACI,kBAAkB;QAClB,SAAS;QACT,aAAa;QACb,gBAAgB;QAChB,oBAAoB;QACpB,SAAS;QACT,UAAU;IACd;AACJ",sourcesContent:[".eventbanner {\n    margin: 0;\n    width: 100%;\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n    overflow: visible;\n    display: flex;\n    flex-direction: column;\n    justify-content: end;\n    aspect-ratio: 16/9;\n    padding-bottom: 2rem;\n}\n\n.eventbanner-basicinfo {\n    padding-bottom: 1rem;\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n    margin-inline: 10%;\n}\n\n.eventbanner-bodycontainer {\n    width: 80%;\n    margin-inline: auto;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    color: black;\n}\n\n.eventbanner-left {\n    width: 100%;\n}\n\n.eventbanner-title {\n    margin: 0px;\n    color: #FFFFFF;\n    font-size: 1.25em;\n    font-weight: 600;\n}\n\n.eventbanner-line {\n    display: block;\n    width: 100%;\n    height: .08em;\n    background-color: currentColor;\n    -ms-transform-origin: top left;\n    transform-origin: top left;\n  }\n\n.eventbanner-content {\n    position: relative;\n    top: 10px;\n    font-size: 2em;\n    color: #FFFFFF;\n    font-weight: 300;\n}\n\n.eventbanner-right {\n    width: 90%;\n    padding: 1.5rem 5%;\n    background-color: var(--grey);\n    color: black,\n}\n\n.eventbanner-nature {\n    font-size: .9rem;\n    padding-inline: .25rem;\n}\n\n.eventbanner-nature + .eventbanner-nature {\n    margin-left: .25rem;\n}\n\n.eventbanner-register {\n    width: 100%;\n    background-color: var(--primary);\n    color: white;\n    margin-bottom: .5rem;\n}\n\n.eventbanner-eventlink {\n    width: 100%;\n    background-color: var(--secondary);\n    color: var(--primary);\n    margin-bottom: .5rem;\n}\n\n.eventbanner-image {\n    max-width: 100%;\n    height: auto;\n}\n\n@media (min-width: 960px) {\n    .eventbanner {\n        aspect-ratio: 16/6;\n        max-height: 70vh;\n    }\n\n    .eventbanner-bodycontainer {\n        flex-direction: row;\n        justify-content: space-between;\n    }\n\n    .eventbanner-left {\n        width: 55%;\n    }\n\n    .eventbanner-title {\n        font-size: 1.5em;\n    }\n\n    .eventbanner-content {\n      font-size: 2.5em;\n    }\n\n    .eventbanner-right {\n        display: block;\n        width: 40%;\n        margin-left: 5%;\n        padding: 1.5rem;\n        color: black;\n    }\n\n    .eventbanner-basicinfo {\n        position: absolute;\n        top: 30vh;\n        margin-top: 0;\n        margin-bottom: 0;\n        margin-inline: 0 10%;\n        left: 60%;\n        width: 30%;\n    }\n}"],sourceRoot:""}]);const l=a},78299:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,".eventshortdes-nature {\n    font-size: .9rem;\n    padding-inline: .25rem;\n}\n\n.eventshortdes-nature + .eventshortdes-nature {\n    margin-left: .25rem;\n}","",{version:3,sources:["webpack://./client/src/components/modules/EventShortDes.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;IACI,mBAAmB;AACvB",sourcesContent:[".eventshortdes-nature {\n    font-size: .9rem;\n    padding-inline: .25rem;\n}\n\n.eventshortdes-nature + .eventshortdes-nature {\n    margin-left: .25rem;\n}"],sourceRoot:""}]);const l=a},55847:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,".image {\n    width: 100%;\n    aspect-ratio: 16/9;\n    height: auto;\n    background-position: center;\n    background-size: cover;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n}\n\n.aspect-default {\n    aspect-ratio: 16/9;\n}\n\n.aspect-43 {\n    aspect-ratio: 4/3;\n}\n\n.aspect-square {\n    aspect-ratio: 1/1;\n}\n\n.Image-link {\n    width: 100%;\n    height: 100%;\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n}\n","",{version:3,sources:["webpack://./client/src/components/modules/Image.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,kBAAkB;IAClB,YAAY;IACZ,2BAA2B;IAC3B,sBAAsB;IACtB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,qBAAqB;IACrB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,kBAAkB;AACtB",sourcesContent:[".image {\n    width: 100%;\n    aspect-ratio: 16/9;\n    height: auto;\n    background-position: center;\n    background-size: cover;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n}\n\n.aspect-default {\n    aspect-ratio: 16/9;\n}\n\n.aspect-43 {\n    aspect-ratio: 4/3;\n}\n\n.aspect-square {\n    aspect-ratio: 1/1;\n}\n\n.Image-link {\n    width: 100%;\n    height: 100%;\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n}\n"],sourceRoot:""}]);const l=a},91304:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,'/* Trigger value - 1240px */\n\n.navbar-container {\n    background-color: var(--primary);\n    height: 80px;\n    box-shadow: 0 8px 10px -6px rgb(49, 49, 49);\n    z-index: 1;\n    position: sticky;\n    top: 0px;\n    padding-inline: 10%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  \n.navbar-title {\n  display: flex;\n  flex-direction: row;\n  justify-self: start;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  text-decoration: none;\n  padding: var(--s) 0;\n  color: white;\n  font-family: "Open Sans";\n}\n\n.navbar-title:hover, .navbar-title:visited {\n  color: white;\n}\n\n.navbar-title-full {\n  display: inline;\n}\n\n.navbar-title-short {\n  display: none;\n}\n\n.navbar-logo-container {\n  margin-right: 1ch;\n  padding-top: .5rem;\n  padding-bottom: .5rem;\n}\n\n.navbar-logo {\n  height: 56px;\n}\n\n.navbar-menu {\n  display: flex;\n  flex-direction: row;\n  list-style: none;\n  text-align: center;\n  justify-content: end;\n  margin: 0;\n  padding: 0;\n  height: 100%;\n}\n\n.navbar-item {\n  display: flex;\n  align-items: center;\n  height: 100%;\n  margin-inline: .25rem;\n}\n\n.navbar-item > button {\n  padding: .5rem;\n  background-color: var(--blue);\n  border: none;\n  border-radius: .2rem;\n  font-size: .8rem;\n}\n\n.navbar-links {\n  text-decoration: none;\n  padding: 0.5rem 0.5rem;\n  font-size: 0.8rem;\n  color: var(--lightgrey);\n}\n\n.navbar-links:hover {\n  transition: all 0.2s ease-out;\n  color: var(--blue);\n}\n\n.navbar-menu-icon {\n  display: none;\n}\n\n@media screen and (max-width: 1200px) {\n  .navbar-menu {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    grid-gap: 0;\n    position: absolute;\n    top: 80px;\n    left: -100%;\n    opacity: 1;\n    transition: all 0.5s ease;\n    height: auto;\n  }\n\n  .navbar-menu.active {\n    background: black;\n    left: 0;\n    opacity: 1;\n    transition: all 0.5s ease;\n    z-index: 1;\n  }\n\n  .navbar-item {\n    flex-direction: column;\n  }\n\n  .navbar-links {\n    text-align: center;\n    padding: .8rem 0;\n    width: 100%;\n    display: table;\n    font-size: 1rem;\n  }\n\n  .navbar-links:hover {\n    background-color: var(--primary);\n    color: white;\n  }\n\n  .navbar-menu-icon {\n    display: block;\n    font-size: 1.8rem;\n    cursor: pointer;\n    color: white;\n  }\n\n  .navbar-item > button {\n    margin-top: .5rem;\n    margin-bottom: .5rem;\n    font-size: inherit;\n  }\n}\n\n@media (max-width: 472px) {\n  .navbar-title-full {\n    display: none;\n  }\n  \n  .navbar-title-short {\n    display: inline;\n  }\n}',"",{version:3,sources:["webpack://./client/src/components/modules/NavBar.css"],names:[],mappings:"AAAA,2BAA2B;;AAE3B;IACI,gCAAgC;IAChC,YAAY;IACZ,2CAA2C;IAC3C,UAAU;IACV,gBAAgB;IAChB,QAAQ;IACR,mBAAmB;IACnB,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;EACrB;;AAEF;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,uBAAuB;EACvB,mBAAmB;EACnB,eAAe;EACf,qBAAqB;EACrB,mBAAmB;EACnB,YAAY;EACZ,wBAAwB;AAC1B;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,qBAAqB;AACvB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,gBAAgB;EAChB,kBAAkB;EAClB,oBAAoB;EACpB,SAAS;EACT,UAAU;EACV,YAAY;AACd;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,YAAY;EACZ,qBAAqB;AACvB;;AAEA;EACE,cAAc;EACd,6BAA6B;EAC7B,YAAY;EACZ,oBAAoB;EACpB,gBAAgB;AAClB;;AAEA;EACE,qBAAqB;EACrB,sBAAsB;EACtB,iBAAiB;EACjB,uBAAuB;AACzB;;AAEA;EACE,6BAA6B;EAC7B,kBAAkB;AACpB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE;IACE,aAAa;IACb,sBAAsB;IACtB,WAAW;IACX,WAAW;IACX,kBAAkB;IAClB,SAAS;IACT,WAAW;IACX,UAAU;IACV,yBAAyB;IACzB,YAAY;EACd;;EAEA;IACE,iBAAiB;IACjB,OAAO;IACP,UAAU;IACV,yBAAyB;IACzB,UAAU;EACZ;;EAEA;IACE,sBAAsB;EACxB;;EAEA;IACE,kBAAkB;IAClB,gBAAgB;IAChB,WAAW;IACX,cAAc;IACd,eAAe;EACjB;;EAEA;IACE,gCAAgC;IAChC,YAAY;EACd;;EAEA;IACE,cAAc;IACd,iBAAiB;IACjB,eAAe;IACf,YAAY;EACd;;EAEA;IACE,iBAAiB;IACjB,oBAAoB;IACpB,kBAAkB;EACpB;AACF;;AAEA;EACE;IACE,aAAa;EACf;;EAEA;IACE,eAAe;EACjB;AACF",sourcesContent:['/* Trigger value - 1240px */\n\n.navbar-container {\n    background-color: var(--primary);\n    height: 80px;\n    box-shadow: 0 8px 10px -6px rgb(49, 49, 49);\n    z-index: 1;\n    position: sticky;\n    top: 0px;\n    padding-inline: 10%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  \n.navbar-title {\n  display: flex;\n  flex-direction: row;\n  justify-self: start;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  text-decoration: none;\n  padding: var(--s) 0;\n  color: white;\n  font-family: "Open Sans";\n}\n\n.navbar-title:hover, .navbar-title:visited {\n  color: white;\n}\n\n.navbar-title-full {\n  display: inline;\n}\n\n.navbar-title-short {\n  display: none;\n}\n\n.navbar-logo-container {\n  margin-right: 1ch;\n  padding-top: .5rem;\n  padding-bottom: .5rem;\n}\n\n.navbar-logo {\n  height: 56px;\n}\n\n.navbar-menu {\n  display: flex;\n  flex-direction: row;\n  list-style: none;\n  text-align: center;\n  justify-content: end;\n  margin: 0;\n  padding: 0;\n  height: 100%;\n}\n\n.navbar-item {\n  display: flex;\n  align-items: center;\n  height: 100%;\n  margin-inline: .25rem;\n}\n\n.navbar-item > button {\n  padding: .5rem;\n  background-color: var(--blue);\n  border: none;\n  border-radius: .2rem;\n  font-size: .8rem;\n}\n\n.navbar-links {\n  text-decoration: none;\n  padding: 0.5rem 0.5rem;\n  font-size: 0.8rem;\n  color: var(--lightgrey);\n}\n\n.navbar-links:hover {\n  transition: all 0.2s ease-out;\n  color: var(--blue);\n}\n\n.navbar-menu-icon {\n  display: none;\n}\n\n@media screen and (max-width: 1200px) {\n  .navbar-menu {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    grid-gap: 0;\n    position: absolute;\n    top: 80px;\n    left: -100%;\n    opacity: 1;\n    transition: all 0.5s ease;\n    height: auto;\n  }\n\n  .navbar-menu.active {\n    background: black;\n    left: 0;\n    opacity: 1;\n    transition: all 0.5s ease;\n    z-index: 1;\n  }\n\n  .navbar-item {\n    flex-direction: column;\n  }\n\n  .navbar-links {\n    text-align: center;\n    padding: .8rem 0;\n    width: 100%;\n    display: table;\n    font-size: 1rem;\n  }\n\n  .navbar-links:hover {\n    background-color: var(--primary);\n    color: white;\n  }\n\n  .navbar-menu-icon {\n    display: block;\n    font-size: 1.8rem;\n    cursor: pointer;\n    color: white;\n  }\n\n  .navbar-item > button {\n    margin-top: .5rem;\n    margin-bottom: .5rem;\n    font-size: inherit;\n  }\n}\n\n@media (max-width: 472px) {\n  .navbar-title-full {\n    display: none;\n  }\n  \n  .navbar-title-short {\n    display: inline;\n  }\n}'],sourceRoot:""}]);const l=a},83344:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,"/* Trigger value - 960px */\n\n.navbardropdown-menu {\n    width: 200px;\n    position: absolute;\n    top: 80px;\n    list-style: none;\n    text-align: start;\n    padding: 0;\n    margin: 0;\n}\n\n.navbardropdown-menu .clicked {\n    display: none;\n}\n\n.navbardropdown-link {\n    display: block;\n    background: var(--extradarkgrey);\n    text-decoration: none;\n    color: var(--darkgrey);\n    padding: 1rem 0.75rem;\n    font-size: 0.8rem;\n}\n\n.navbardropdown-link:hover {\n  color: white;\n  background: var(--blue);\n  padding: 1rem 0.75rem;\n}\n\n@media screen and (max-width: 960px) {\n  .navbardropdown-menu {\n    width: 100%;\n    position: static;\n    display: block;\n    padding: 0;\n    margin: 0;\n  }\n\n  .navbardropdown-link {\n    text-align: center;\n    font-size: 1rem;\n  }\n\n  .fa-caret-down {\n    display: none;\n  }\n}","",{version:3,sources:["webpack://./client/src/components/modules/NavBarDropdown.css"],names:[],mappings:"AAAA,0BAA0B;;AAE1B;IACI,YAAY;IACZ,kBAAkB;IAClB,SAAS;IACT,gBAAgB;IAChB,iBAAiB;IACjB,UAAU;IACV,SAAS;AACb;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,cAAc;IACd,gCAAgC;IAChC,qBAAqB;IACrB,sBAAsB;IACtB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;EACE,YAAY;EACZ,uBAAuB;EACvB,qBAAqB;AACvB;;AAEA;EACE;IACE,WAAW;IACX,gBAAgB;IAChB,cAAc;IACd,UAAU;IACV,SAAS;EACX;;EAEA;IACE,kBAAkB;IAClB,eAAe;EACjB;;EAEA;IACE,aAAa;EACf;AACF",sourcesContent:["/* Trigger value - 960px */\n\n.navbardropdown-menu {\n    width: 200px;\n    position: absolute;\n    top: 80px;\n    list-style: none;\n    text-align: start;\n    padding: 0;\n    margin: 0;\n}\n\n.navbardropdown-menu .clicked {\n    display: none;\n}\n\n.navbardropdown-link {\n    display: block;\n    background: var(--extradarkgrey);\n    text-decoration: none;\n    color: var(--darkgrey);\n    padding: 1rem 0.75rem;\n    font-size: 0.8rem;\n}\n\n.navbardropdown-link:hover {\n  color: white;\n  background: var(--blue);\n  padding: 1rem 0.75rem;\n}\n\n@media screen and (max-width: 960px) {\n  .navbardropdown-menu {\n    width: 100%;\n    position: static;\n    display: block;\n    padding: 0;\n    margin: 0;\n  }\n\n  .navbardropdown-link {\n    text-align: center;\n    font-size: 1rem;\n  }\n\n  .fa-caret-down {\n    display: none;\n  }\n}"],sourceRoot:""}]);const l=a},99985:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,".CurrentComm-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-auto-rows: auto;\n    grid-gap: 1.25rem;\n    text-align: left;\n}\n\n.CurrentComm-container > * {\n    aspect-ratio: 16/9;\n}\n\n.CurrentComm-single {\n    position: relative;\n}\n\n.CurrentComm-background {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-position: center;\n    background-size: cover;\n    filter: contrast(0.8);\n}\n\n.CurrentComm-about {\n    position: absolute;\n    bottom: 0px;\n    width: 90%;\n    color: white;\n    background-color: rgba(0,0,0,.5);\n    padding: .75rem 5%;\n}\n\n.name {\n    font-size: 1.25em;\n}\n\n.post {\n    font-size: 1em;\n}\n\n@media screen and (max-width: 752px) {\n    .CurrentComm-container {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}\n\n@media screen and (max-width: 496px) {\n    .CurrentComm-container {\n        grid-template-columns: repeat(1, 1fr);\n    }\n}\n\n","",{version:3,sources:["webpack://./client/src/components/modules/PastComm.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,qCAAqC;IACrC,oBAAoB;IACpB,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,WAAW;IACX,YAAY;IACZ,2BAA2B;IAC3B,sBAAsB;IACtB,qBAAqB;AACzB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,UAAU;IACV,YAAY;IACZ,gCAAgC;IAChC,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI;QACI,qCAAqC;IACzC;AACJ;;AAEA;IACI;QACI,qCAAqC;IACzC;AACJ",sourcesContent:[".CurrentComm-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-auto-rows: auto;\n    grid-gap: 1.25rem;\n    text-align: left;\n}\n\n.CurrentComm-container > * {\n    aspect-ratio: 16/9;\n}\n\n.CurrentComm-single {\n    position: relative;\n}\n\n.CurrentComm-background {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-position: center;\n    background-size: cover;\n    filter: contrast(0.8);\n}\n\n.CurrentComm-about {\n    position: absolute;\n    bottom: 0px;\n    width: 90%;\n    color: white;\n    background-color: rgba(0,0,0,.5);\n    padding: .75rem 5%;\n}\n\n.name {\n    font-size: 1.25em;\n}\n\n.post {\n    font-size: 1em;\n}\n\n@media screen and (max-width: 752px) {\n    .CurrentComm-container {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}\n\n@media screen and (max-width: 496px) {\n    .CurrentComm-container {\n        grid-template-columns: repeat(1, 1fr);\n    }\n}\n\n"],sourceRoot:""}]);const l=a},58513:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,".profilebanner {\n    margin: 0;\n    width: 100%;\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n    overflow: visible;\n    display: flex;\n    flex-direction: column;\n    justify-content: end;\n    aspect-ratio: 16/9;\n}\n.profilebanner {\n    padding-bottom: 2rem;\n}\n\n.profilebanner-basicinfo {\n    padding-bottom: 1rem;\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n    margin-inline: 10%;\n}\n\n.profilebanner-bodycontainer {\n    width: 80%;\n    margin-inline: auto;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    color: white;\n}\n\n.profilebanner-left {\n    width: 100%;\n}\n\n.profilebanner-title {\n    margin: 0px;\n    color: #FFFFFF;\n    font-size: 1.25em;\n    font-weight: 600;\n}\n\n.profilebanner-line {\n    display: block;\n    width: 100%;\n    height: .08em;\n    background-color: currentColor;\n    -ms-transform-origin: top left;\n    transform-origin: top left;\n  }\n\n.profilebanner-content {\n    position: relative;\n    top: 10px;\n    font-size: 2em;\n    color: #FFFFFF;\n    font-weight: 300;\n}\n\n.profilebanner-right {\n    width: 100%;\n}\n\n.profilebanner-image {\n    max-width: 100%;\n    height: auto;\n}\n\n@media (min-width: 960px) {\n    .profilebanner {\n        aspect-ratio: 16/6;\n        max-height: 70vh;\n    }\n\n    .profilebanner-bodycontainer {\n        flex-direction: row;\n        justify-content: space-between;\n    }\n\n    .profilebanner-left {\n        width: 55%;\n    }\n\n    .profilebanner-title {\n        font-size: 1.5em;\n    }\n\n    .profilebanner-content {\n      font-size: 2.5em;\n    }\n\n    .profilebanner-right {\n        display: block;\n        width: 45%;\n    }\n\n    .profilebanner-basicinfo {\n        position: absolute;\n        top: 30vh;\n        margin-top: 0;\n        margin-bottom: 0;\n        margin-inline: 0 10%;\n        left: 60%;\n        width: 30%;\n    }\n}","",{version:3,sources:["webpack://./client/src/components/modules/ProfileBanner.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,WAAW;IACX,sBAAsB;IACtB,kCAAkC;IAClC,4BAA4B;IAC5B,iBAAiB;IACjB,aAAa;IACb,sBAAsB;IACtB,oBAAoB;IACpB,kBAAkB;AACtB;AACA;IACI,oBAAoB;AACxB;;AAEA;IACI,oBAAoB;IACpB,gBAAgB;IAChB,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,UAAU;IACV,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,8BAA8B;IAC9B,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;IACX,cAAc;IACd,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,cAAc;IACd,WAAW;IACX,aAAa;IACb,8BAA8B;IAC9B,8BAA8B;IAC9B,0BAA0B;EAC5B;;AAEF;IACI,kBAAkB;IAClB,SAAS;IACT,cAAc;IACd,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,eAAe;IACf,YAAY;AAChB;;AAEA;IACI;QACI,kBAAkB;QAClB,gBAAgB;IACpB;;IAEA;QACI,mBAAmB;QACnB,8BAA8B;IAClC;;IAEA;QACI,UAAU;IACd;;IAEA;QACI,gBAAgB;IACpB;;IAEA;MACE,gBAAgB;IAClB;;IAEA;QACI,cAAc;QACd,UAAU;IACd;;IAEA;QACI,kBAAkB;QAClB,SAAS;QACT,aAAa;QACb,gBAAgB;QAChB,oBAAoB;QACpB,SAAS;QACT,UAAU;IACd;AACJ",sourcesContent:[".profilebanner {\n    margin: 0;\n    width: 100%;\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n    overflow: visible;\n    display: flex;\n    flex-direction: column;\n    justify-content: end;\n    aspect-ratio: 16/9;\n}\n.profilebanner {\n    padding-bottom: 2rem;\n}\n\n.profilebanner-basicinfo {\n    padding-bottom: 1rem;\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n    margin-inline: 10%;\n}\n\n.profilebanner-bodycontainer {\n    width: 80%;\n    margin-inline: auto;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    color: white;\n}\n\n.profilebanner-left {\n    width: 100%;\n}\n\n.profilebanner-title {\n    margin: 0px;\n    color: #FFFFFF;\n    font-size: 1.25em;\n    font-weight: 600;\n}\n\n.profilebanner-line {\n    display: block;\n    width: 100%;\n    height: .08em;\n    background-color: currentColor;\n    -ms-transform-origin: top left;\n    transform-origin: top left;\n  }\n\n.profilebanner-content {\n    position: relative;\n    top: 10px;\n    font-size: 2em;\n    color: #FFFFFF;\n    font-weight: 300;\n}\n\n.profilebanner-right {\n    width: 100%;\n}\n\n.profilebanner-image {\n    max-width: 100%;\n    height: auto;\n}\n\n@media (min-width: 960px) {\n    .profilebanner {\n        aspect-ratio: 16/6;\n        max-height: 70vh;\n    }\n\n    .profilebanner-bodycontainer {\n        flex-direction: row;\n        justify-content: space-between;\n    }\n\n    .profilebanner-left {\n        width: 55%;\n    }\n\n    .profilebanner-title {\n        font-size: 1.5em;\n    }\n\n    .profilebanner-content {\n      font-size: 2.5em;\n    }\n\n    .profilebanner-right {\n        display: block;\n        width: 45%;\n    }\n\n    .profilebanner-basicinfo {\n        position: absolute;\n        top: 30vh;\n        margin-top: 0;\n        margin-bottom: 0;\n        margin-inline: 0 10%;\n        left: 60%;\n        width: 30%;\n    }\n}"],sourceRoot:""}]);const l=a},54224:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,".profilebasicinfo-basic {\n    padding: 5%;\n    background: var(--grey);\n    color: black;\n}\n\n.profilebasicinfo-basic a + a {\n    margin-left: 1ch;\n}\n\n@media (min-width: 800px) {\n\n    .profilebasicinfo-basic {\n        padding: 3ch;\n    }\n}","",{version:3,sources:["webpack://./client/src/components/modules/ProfileBasicInfo.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;;IAEI;QACI,YAAY;IAChB;AACJ",sourcesContent:[".profilebasicinfo-basic {\n    padding: 5%;\n    background: var(--grey);\n    color: black;\n}\n\n.profilebasicinfo-basic a + a {\n    margin-left: 1ch;\n}\n\n@media (min-width: 800px) {\n\n    .profilebasicinfo-basic {\n        padding: 3ch;\n    }\n}"],sourceRoot:""}]);const l=a},35148:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,".topbanner {\n    margin: 0;\n    width: 100%;\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n    overflow: visible;\n    display: flex;\n    flex-direction: column;\n    justify-content: end;\n    aspect-ratio: 16/9;\n    padding-bottom: 2rem;\n}\n\n.topbanner-bodycontainer {\n    width: 80%;\n    margin-inline: auto;\n    color: white;\n    align-self: flex-end;\n}\n\n.topbanner-title {\n    margin: 0px;\n    color: #FFFFFF;\n    font-size: 1.25em;\n    font-weight: 600;\n}\n\n.topbanner-line {\n    display: block;\n    width: 100%;\n    height: .08em;\n    background-color: currentColor;\n    -ms-transform-origin: top left;\n    transform-origin: top left;\n  }\n\n.topbanner-content {\n    position: relative;\n    top: 10px;\n    font-size: 2em;\n    color: #FFFFFF;\n    font-weight: 300;\n}\n\n@media (min-width: 752px) {\n\n    .topbanner {\n        aspect-ratio: 16/6;\n        max-height: 70vh;\n    }\n\n    .topbanner-title {\n        font-size: 1.5em;\n    }\n\n    .topbanner-content {\n      font-size: 2.5em;\n    }\n\n}","",{version:3,sources:["webpack://./client/src/components/modules/TopBanner.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,WAAW;IACX,sBAAsB;IACtB,kCAAkC;IAClC,4BAA4B;IAC5B,iBAAiB;IACjB,aAAa;IACb,sBAAsB;IACtB,oBAAoB;IACpB,kBAAkB;IAClB,oBAAoB;AACxB;;AAEA;IACI,UAAU;IACV,mBAAmB;IACnB,YAAY;IACZ,oBAAoB;AACxB;;AAEA;IACI,WAAW;IACX,cAAc;IACd,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,cAAc;IACd,WAAW;IACX,aAAa;IACb,8BAA8B;IAC9B,8BAA8B;IAC9B,0BAA0B;EAC5B;;AAEF;IACI,kBAAkB;IAClB,SAAS;IACT,cAAc;IACd,cAAc;IACd,gBAAgB;AACpB;;AAEA;;IAEI;QACI,kBAAkB;QAClB,gBAAgB;IACpB;;IAEA;QACI,gBAAgB;IACpB;;IAEA;MACE,gBAAgB;IAClB;;AAEJ",sourcesContent:[".topbanner {\n    margin: 0;\n    width: 100%;\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n    overflow: visible;\n    display: flex;\n    flex-direction: column;\n    justify-content: end;\n    aspect-ratio: 16/9;\n    padding-bottom: 2rem;\n}\n\n.topbanner-bodycontainer {\n    width: 80%;\n    margin-inline: auto;\n    color: white;\n    align-self: flex-end;\n}\n\n.topbanner-title {\n    margin: 0px;\n    color: #FFFFFF;\n    font-size: 1.25em;\n    font-weight: 600;\n}\n\n.topbanner-line {\n    display: block;\n    width: 100%;\n    height: .08em;\n    background-color: currentColor;\n    -ms-transform-origin: top left;\n    transform-origin: top left;\n  }\n\n.topbanner-content {\n    position: relative;\n    top: 10px;\n    font-size: 2em;\n    color: #FFFFFF;\n    font-weight: 300;\n}\n\n@media (min-width: 752px) {\n\n    .topbanner {\n        aspect-ratio: 16/6;\n        max-height: 70vh;\n    }\n\n    .topbanner-title {\n        font-size: 1.5em;\n    }\n\n    .topbanner-content {\n      font-size: 2.5em;\n    }\n\n}"],sourceRoot:""}]);const l=a},56653:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,".societybanner {\n    margin: 0;\n    width: 100%;\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n    overflow: visible;\n    display: flex;\n    flex-direction: column;\n    justify-content: end;\n    aspect-ratio: 16/9;\n    padding-bottom: 2rem;\n}\n\n.societybanner-basicinfo {\n    padding-bottom: 1rem;\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n    margin-inline: 10%;\n}\n\n.societybanner-bodycontainer {\n    width: 80%;\n    margin-inline: auto;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    color: black;\n}\n\n.societybanner-left {\n    width: 100%;\n}\n\n.societybanner-title {\n    margin: 0px;\n    color: #FFFFFF;\n    font-size: 1.25em;\n    font-weight: 600;\n}\n\n.societybanner-line {\n    display: block;\n    width: 100%;\n    height: .08em;\n    background-color: currentColor;\n    -ms-transform-origin: top left;\n    transform-origin: top left;\n  }\n\n.societybanner-content {\n    position: relative;\n    top: 10px;\n    font-size: 2em;\n    color: #FFFFFF;\n    font-weight: 300;\n}\n\n.societybanner-right {\n    width: 90%;\n    padding: 1.5rem 5%;\n    background-color: var(--grey);\n    color: black,\n}\n\n.societybanner-nature {\n    font-size: .9rem;\n    padding-inline: .25rem;\n}\n\n.societybanner-nature + .societybanner-nature {\n    margin-left: .25rem;\n}\n\n.societybanner-register {\n    width: 100%;\n    background-color: var(--primary);\n    color: white;\n    margin-bottom: .5rem;\n}\n\n.societybanner-eventlink {\n    width: 100%;\n    background-color: var(--secondary);\n    color: var(--primary);\n    margin-bottom: .5rem;\n}\n\n.societybanner-image {\n    max-width: 100%;\n    height: auto;\n}\n\n@media (min-width: 960px) {\n    .societybanner {\n        aspect-ratio: 16/6;\n        max-height: 70vh;\n    }\n\n    .societybanner-bodycontainer {\n        flex-direction: row;\n        justify-content: space-between;\n    }\n\n    .societybanner-left {\n        width: 55%;\n    }\n\n    .societybanner-title {\n        font-size: 1.5em;\n    }\n\n    .societybanner-content {\n      font-size: 2.5em;\n    }\n\n    .societybanner-right {\n        display: block;\n        width: 40%;\n        margin-left: 5%;\n        padding: 1.5rem;\n        color: black;\n    }\n\n    .societybanner-basicinfo {\n        position: absolute;\n        top: 30vh;\n        margin-top: 0;\n        margin-bottom: 0;\n        margin-inline: 0 10%;\n        left: 60%;\n        width: 30%;\n    }\n}","",{version:3,sources:["webpack://./client/src/components/modules/societybanner.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,WAAW;IACX,sBAAsB;IACtB,kCAAkC;IAClC,4BAA4B;IAC5B,iBAAiB;IACjB,aAAa;IACb,sBAAsB;IACtB,oBAAoB;IACpB,kBAAkB;IAClB,oBAAoB;AACxB;;AAEA;IACI,oBAAoB;IACpB,gBAAgB;IAChB,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,UAAU;IACV,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,8BAA8B;IAC9B,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;IACX,cAAc;IACd,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,cAAc;IACd,WAAW;IACX,aAAa;IACb,8BAA8B;IAC9B,8BAA8B;IAC9B,0BAA0B;EAC5B;;AAEF;IACI,kBAAkB;IAClB,SAAS;IACT,cAAc;IACd,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,UAAU;IACV,kBAAkB;IAClB,6BAA6B;IAC7B;AACJ;;AAEA;IACI,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,gCAAgC;IAChC,YAAY;IACZ,oBAAoB;AACxB;;AAEA;IACI,WAAW;IACX,kCAAkC;IAClC,qBAAqB;IACrB,oBAAoB;AACxB;;AAEA;IACI,eAAe;IACf,YAAY;AAChB;;AAEA;IACI;QACI,kBAAkB;QAClB,gBAAgB;IACpB;;IAEA;QACI,mBAAmB;QACnB,8BAA8B;IAClC;;IAEA;QACI,UAAU;IACd;;IAEA;QACI,gBAAgB;IACpB;;IAEA;MACE,gBAAgB;IAClB;;IAEA;QACI,cAAc;QACd,UAAU;QACV,eAAe;QACf,eAAe;QACf,YAAY;IAChB;;IAEA;QACI,kBAAkB;QAClB,SAAS;QACT,aAAa;QACb,gBAAgB;QAChB,oBAAoB;QACpB,SAAS;QACT,UAAU;IACd;AACJ",sourcesContent:[".societybanner {\n    margin: 0;\n    width: 100%;\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n    overflow: visible;\n    display: flex;\n    flex-direction: column;\n    justify-content: end;\n    aspect-ratio: 16/9;\n    padding-bottom: 2rem;\n}\n\n.societybanner-basicinfo {\n    padding-bottom: 1rem;\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n    margin-inline: 10%;\n}\n\n.societybanner-bodycontainer {\n    width: 80%;\n    margin-inline: auto;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    color: black;\n}\n\n.societybanner-left {\n    width: 100%;\n}\n\n.societybanner-title {\n    margin: 0px;\n    color: #FFFFFF;\n    font-size: 1.25em;\n    font-weight: 600;\n}\n\n.societybanner-line {\n    display: block;\n    width: 100%;\n    height: .08em;\n    background-color: currentColor;\n    -ms-transform-origin: top left;\n    transform-origin: top left;\n  }\n\n.societybanner-content {\n    position: relative;\n    top: 10px;\n    font-size: 2em;\n    color: #FFFFFF;\n    font-weight: 300;\n}\n\n.societybanner-right {\n    width: 90%;\n    padding: 1.5rem 5%;\n    background-color: var(--grey);\n    color: black,\n}\n\n.societybanner-nature {\n    font-size: .9rem;\n    padding-inline: .25rem;\n}\n\n.societybanner-nature + .societybanner-nature {\n    margin-left: .25rem;\n}\n\n.societybanner-register {\n    width: 100%;\n    background-color: var(--primary);\n    color: white;\n    margin-bottom: .5rem;\n}\n\n.societybanner-eventlink {\n    width: 100%;\n    background-color: var(--secondary);\n    color: var(--primary);\n    margin-bottom: .5rem;\n}\n\n.societybanner-image {\n    max-width: 100%;\n    height: auto;\n}\n\n@media (min-width: 960px) {\n    .societybanner {\n        aspect-ratio: 16/6;\n        max-height: 70vh;\n    }\n\n    .societybanner-bodycontainer {\n        flex-direction: row;\n        justify-content: space-between;\n    }\n\n    .societybanner-left {\n        width: 55%;\n    }\n\n    .societybanner-title {\n        font-size: 1.5em;\n    }\n\n    .societybanner-content {\n      font-size: 2.5em;\n    }\n\n    .societybanner-right {\n        display: block;\n        width: 40%;\n        margin-left: 5%;\n        padding: 1.5rem;\n        color: black;\n    }\n\n    .societybanner-basicinfo {\n        position: absolute;\n        top: 30vh;\n        margin-top: 0;\n        margin-bottom: 0;\n        margin-inline: 0 10%;\n        left: 60%;\n        width: 30%;\n    }\n}"],sourceRoot:""}]);const l=a},34754:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const l=a},53847:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>d});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i),l=n(61667),u=n.n(l),c=new URL(n(59271),n.b),s=a()(o()),f=u()(c);s.push([e.id,".Accessibility-banner {\n    background-image: url("+f+");\n}","",{version:3,sources:["webpack://./client/src/components/pages/Accessibility.css"],names:[],mappings:"AAAA;IACI,yDAA0D;AAC9D",sourcesContent:[".Accessibility-banner {\n    background-image: url(../../img/topbanner/temp_access.jpg);\n}"],sourceRoot:""}]);const d=s},52883:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const l=a},45436:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const l=a},76892:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,".NotFound-banner {\n    background-color: var(--secondary)\n}\n\n.NotFound-banner-temp {\n    width: 100%;\n}","",{version:3,sources:["webpack://./client/src/components/pages/NotFound.css"],names:[],mappings:"AAAA;IACI;AACJ;;AAEA;IACI,WAAW;AACf",sourcesContent:[".NotFound-banner {\n    background-color: var(--secondary)\n}\n\n.NotFound-banner-temp {\n    width: 100%;\n}"],sourceRoot:""}]);const l=a},22767:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,".profile-engagement-container {\n    display: flex;\n    flex-direction: column;\n}\n\n.profile-engagement {\n    background-color: var(--grey);\n    padding: 1.5ch;\n    margin-top: .75ch;\n    margin-bottom: .75ch;\n    margin-inline: 0\n}\n\n@media (min-width: 960px) {\n    .profile-engagement-container {\n        width: 55%;\n        flex-direction: row;\n        flex-wrap: wrap;\n    }\n\n    .profile-engagement {\n        background-color: var(--grey);\n        padding: 1.5ch;\n        margin-inline: .75ch;\n    }\n}\n\n@media (min-width: 1720px) {\n    .profile-edit {\n        width: 55%;\n    }\n}","",{version:3,sources:["webpack://./client/src/components/pages/Profile.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,6BAA6B;IAC7B,cAAc;IACd,iBAAiB;IACjB,oBAAoB;IACpB;AACJ;;AAEA;IACI;QACI,UAAU;QACV,mBAAmB;QACnB,eAAe;IACnB;;IAEA;QACI,6BAA6B;QAC7B,cAAc;QACd,oBAAoB;IACxB;AACJ;;AAEA;IACI;QACI,UAAU;IACd;AACJ",sourcesContent:[".profile-engagement-container {\n    display: flex;\n    flex-direction: column;\n}\n\n.profile-engagement {\n    background-color: var(--grey);\n    padding: 1.5ch;\n    margin-top: .75ch;\n    margin-bottom: .75ch;\n    margin-inline: 0\n}\n\n@media (min-width: 960px) {\n    .profile-engagement-container {\n        width: 55%;\n        flex-direction: row;\n        flex-wrap: wrap;\n    }\n\n    .profile-engagement {\n        background-color: var(--grey);\n        padding: 1.5ch;\n        margin-inline: .75ch;\n    }\n}\n\n@media (min-width: 1720px) {\n    .profile-edit {\n        width: 55%;\n    }\n}"],sourceRoot:""}]);const l=a},74838:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const l=a},98727:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,".welfarefaq-emergency-menu-container {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n}\n\n.welfarefaq-emergency-menu-item {\n    width: 100%;\n    margin: 0;\n    padding: 0;\n}\n\n.welfarefaq-emergency-menu-item > button {\n    width: 100%;\n    margin: 0;\n}\n\n.welfarefaq-emergency-menu-item + .welfarefaq-emergency-menu-item {\n    margin-left: 0;\n    margin-top: .5rem;\n}\n\n@media (min-width: 900px) {\n    .welfarefaq-emergency-menu-container {\n        display: flex;\n        flex-direction: row;\n        justify-content: start;\n    }\n\n    .welfarefaq-emergency-menu-item {\n        width: auto;\n    }\n\n    .welfarefaq-emergency-menu-item > button {\n        width: auto;\n    }\n\n    .welfarefaq-emergency-menu-item + .welfarefaq-emergency-menu-item {\n        margin-left: .5rem;\n        margin-top: 0;\n    }\n}","",{version:3,sources:["webpack://./client/src/components/pages/welfare/WelfareFAQ.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,SAAS;IACT,UAAU;IACV,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,SAAS;IACT,UAAU;AACd;;AAEA;IACI,WAAW;IACX,SAAS;AACb;;AAEA;IACI,cAAc;IACd,iBAAiB;AACrB;;AAEA;IACI;QACI,aAAa;QACb,mBAAmB;QACnB,sBAAsB;IAC1B;;IAEA;QACI,WAAW;IACf;;IAEA;QACI,WAAW;IACf;;IAEA;QACI,kBAAkB;QAClB,aAAa;IACjB;AACJ",sourcesContent:[".welfarefaq-emergency-menu-container {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n}\n\n.welfarefaq-emergency-menu-item {\n    width: 100%;\n    margin: 0;\n    padding: 0;\n}\n\n.welfarefaq-emergency-menu-item > button {\n    width: 100%;\n    margin: 0;\n}\n\n.welfarefaq-emergency-menu-item + .welfarefaq-emergency-menu-item {\n    margin-left: 0;\n    margin-top: .5rem;\n}\n\n@media (min-width: 900px) {\n    .welfarefaq-emergency-menu-container {\n        display: flex;\n        flex-direction: row;\n        justify-content: start;\n    }\n\n    .welfarefaq-emergency-menu-item {\n        width: auto;\n    }\n\n    .welfarefaq-emergency-menu-item > button {\n        width: auto;\n    }\n\n    .welfarefaq-emergency-menu-item + .welfarefaq-emergency-menu-item {\n        margin-left: .5rem;\n        margin-top: 0;\n    }\n}"],sourceRoot:""}]);const l=a},65574:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const l=a},2617:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const l=a},57561:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const l=a},83352:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const l=a},22519:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(87537),o=n.n(r),i=n(23645),a=n.n(i)()(o());a.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Lato&family=Nobile:ital,wght@1,500&family=Open+Sans&display=swap);"]),a.push([e.id,'/**\n* Welcome to your ✨𝔲𝔱𝔦𝔩𝔦𝔱𝔶 𝔰𝔱𝔶𝔩𝔢𝔰✨!\n* This file includes utility classes that are super simple\n* and can be used to add general styles; variable definitions\n* for colors; and styles to html, body, and other high level\n* DOMs.\n* \n* All utility classes start with a `u-` and all do\n* one basic CSS thing (for example, making the font-weight\n* 600 for bolding) or are super generic.\n* \n* This is 𝙉𝙊𝙏 the place to define classes for components or\n* do rigorous styling. You shoud not need to change this file\n* much after initial creation.\n*/\n\n/* List of fonts - Lato, OpenSans, Nobile*/\n\n:root {\n  --primary: rgb(0,59,121);\n  --secondary: rgb(251,189,26);\n  --red: rgb(229,52,44);\n  --blue: rgb(122,178,221);\n  --grey: rgb(225, 225, 225);\n  --violet: rgb(148,18,118);\n  --extradarkgrey: rgb(69,69,69);\n  --darkgrey: rgb(170,170,170);\n  --medgrey: #d1d1d1;\n  --lightgrey: #f7f7f7;\n  --white: #ffffff;\n\n  --xs: 4px;\n  --s: 8px;\n  --m: 16px;\n  --l: 24px;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: "Open Sans", sans-serif;\n  font-weight: 300;\n  font-size: 1.11rem;\n}\n\nh1,h2,h3,h4,h5,h6 {\n  font-family: "Open Sans", sans-serif;\n  margin-top: 0;\n  letter-spacing: -.025rem;\n}\n\np {\n  margin-top: 0;\n}\n\nform {\n  flex-grow: 1;\n}\n\na {\n  color: black;\n}\n\na:hover {\n  color: var(--blue);\n}\n\nb {\n  letter-spacing: -.025em;\n}\n\nbutton {\n  display: block;\n  font-size: inherit;\n  text-align: center;\n  padding-top: 1em;\n  padding-bottom: 1em;\n  padding-inline: 2em;\n  border: none;\n  margin-inline: auto;\n  font-family: inherit;\n}\n\n.App-container {\n  margin: 0 0 40px 0;\n}\n\n.u-nomargin {\n  margin: 0;\n}\n\n.u-nopadding {\n  padding: 0;\n}\n\n.u-block {\n  position: relative;\n  width: 80%;\n  padding: 0 10% 0% 10%;\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n}\n\n.u-block > h1 {\n  display: inline-block;\n}\n\n.u-block > h1:before {\n  content: "";\n  display: block;\n  height: 0.25rem;\n  width: 100%;\n  margin-bottom: 0.25rem;\n  opacity: 1;\n  background-color: currentColor;\n  -ms-transform-origin: left center;\n  transform-origin: left center;\n  animation: 1.5s cubic-bezier(0,0,0,1) 0s 1 section-title-line\n}\n\n@keyframes section-title-line {\n  0% {\n    transform: scaleX(0);\n    -ms-transform: scaleX(0);\n  }\n\n  100% {\n    transform: scaleX(1);\n    -ms-transform: scaleX(1);\n  }\n  }\n\n\n.u-flex {\n  display: flex;\n}\n\n.u-flexColumn {\n  display: flex;\n  flex-direction: column;\n}\n\n.u-flex-justifyCenter {\n  justify-content: center;\n}\n\n.u-flex-justifySpace {\n  justify-content: space-between;\n}\n\n.u-flex-alignCenter {\n  align-items: center;\n}\n\n.u-inlineBlock {\n  display: inline-block;\n}\n\n.u-bold {\n  font-weight: 600;\n}\n\n.u-textCenter {\n  text-align: center;\n}\n\n.u-relative {\n  position: relative;\n}\n\n.u-pointer {\n  cursor: pointer;\n}\n\n.u-link {\n  color: var(--primary);\n  text-decoration: none;\n  cursor: pointer;\n}\n\n.u-link:hover {\n  color: var(--primary--dim);\n}\n\n.u-margin-top {\n  margin-top: .75rem;\n}\n\n.u-image {\n  width: 100%;\n  height: auto;\n  background-position: center;\n  background-size: cover;\n}\n\n.u-aspect-169 {\n  aspect-ratio: 16/9;\n}\n\n.u-aspect-43 {\n  aspect-ratio: 4/3;\n}\n\n.u-aspect-square {\n  aspect-ratio: 1/1;\n}\n\n.u-gridPic-3, .u-gridPic-2 {\n  max-width: 24rem;\n  margin-inline: auto;\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 1.25rem;\n  margin-top: 1rem;\n}\n\n@media (min-width: 752px) {\n  .u-gridPic-3 {\n    max-width: 100%;  \n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n\n@media (min-width: 680px) {\n  .u-gridPic-2 {\n    max-width: 66%;\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n.u-b-primary, .u-b-primary:hover, .u-b-primary:visited {\n  background-color: var(--primary);\n  color: white\n}\n\n.u-b-secondary, .u-b-secondary:hover, .u-b-secondary:visited {\n  background-color: var(--secondary);\n  color: var(--primary)\n}\n\n.u-b-blue, .u-b-blue:hover, .u-b-blue:visited {\n  background-color: var(--blue);\n  color: var(--primary)\n}\n\n.u-b-red, .u-b-red:hover, .u-b-red:visited {\n  background-color: var(--red);\n  color: white\n}\n\n.u-b-violet, .u-b-violet:hover, .u-b-violet:visited {\n  background-color: var(--violet);\n  color: white;\n}\n\n.u-b-white, .u-b-white:hover, .u-b-white:visited {\n  background-color: white;\n  color: black;\n}\n\n.u-b-darkgrey, .u-b-darkgrey:hover, .u-b-darkgrey:visited {\n  background-color: var(--darkgrey);\n  color: black\n}\n\n.u-alert-green {\n  color: #155724;\n  background-color: #d4edda;\n  border-color: #c3e6cb;\n  padding: .75rem;\n}\n\n.u-alert-yellow {\n  color: #856404;\n  background-color: #fff3cd;\n  border-color: #ffeeba;\n  padding: .75rem;\n}\n\n.u-alert-red {\n  color: #721c24;\n  background-color: #f8d7da;\n  border-color: #f5c6cb;\n  padding: .75rem;\n}',"",{version:3,sources:["webpack://./client/src/utilities.css"],names:[],mappings:"AAAA;;;;;;;;;;;;;;CAcC;;AAED,0CAA0C;;AAG1C;EACE,wBAAwB;EACxB,4BAA4B;EAC5B,qBAAqB;EACrB,wBAAwB;EACxB,0BAA0B;EAC1B,yBAAyB;EACzB,8BAA8B;EAC9B,4BAA4B;EAC5B,kBAAkB;EAClB,oBAAoB;EACpB,gBAAgB;;EAEhB,SAAS;EACT,QAAQ;EACR,SAAS;EACT,SAAS;AACX;;AAEA;EACE,SAAS;EACT,UAAU;EACV,oCAAoC;EACpC,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,oCAAoC;EACpC,aAAa;EACb,wBAAwB;AAC1B;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,cAAc;EACd,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;EACnB,mBAAmB;EACnB,YAAY;EACZ,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,qBAAqB;EACrB,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,WAAW;EACX,cAAc;EACd,eAAe;EACf,WAAW;EACX,sBAAsB;EACtB,UAAU;EACV,8BAA8B;EAC9B,iCAAiC;EACjC,6BAA6B;EAC7B;AACF;;AAEA;EACE;IACE,oBAAoB;IACpB,wBAAwB;EAC1B;;EAEA;IACE,oBAAoB;IACpB,wBAAwB;EAC1B;EACA;;;AAGF;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,qBAAqB;EACrB,qBAAqB;EACrB,eAAe;AACjB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,2BAA2B;EAC3B,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,aAAa;EACb,qCAAqC;EACrC,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE;IACE,eAAe;IACf,qCAAqC;EACvC;AACF;;AAEA;EACE;IACE,cAAc;IACd,qCAAqC;EACvC;AACF;;AAEA;EACE,gCAAgC;EAChC;AACF;;AAEA;EACE,kCAAkC;EAClC;AACF;;AAEA;EACE,6BAA6B;EAC7B;AACF;;AAEA;EACE,4BAA4B;EAC5B;AACF;;AAEA;EACE,+BAA+B;EAC/B,YAAY;AACd;;AAEA;EACE,uBAAuB;EACvB,YAAY;AACd;;AAEA;EACE,iCAAiC;EACjC;AACF;;AAEA;EACE,cAAc;EACd,yBAAyB;EACzB,qBAAqB;EACrB,eAAe;AACjB;;AAEA;EACE,cAAc;EACd,yBAAyB;EACzB,qBAAqB;EACrB,eAAe;AACjB;;AAEA;EACE,cAAc;EACd,yBAAyB;EACzB,qBAAqB;EACrB,eAAe;AACjB",sourcesContent:['/**\n* Welcome to your ✨𝔲𝔱𝔦𝔩𝔦𝔱𝔶 𝔰𝔱𝔶𝔩𝔢𝔰✨!\n* This file includes utility classes that are super simple\n* and can be used to add general styles; variable definitions\n* for colors; and styles to html, body, and other high level\n* DOMs.\n* \n* All utility classes start with a `u-` and all do\n* one basic CSS thing (for example, making the font-weight\n* 600 for bolding) or are super generic.\n* \n* This is 𝙉𝙊𝙏 the place to define classes for components or\n* do rigorous styling. You shoud not need to change this file\n* much after initial creation.\n*/\n\n/* List of fonts - Lato, OpenSans, Nobile*/\n@import url(\'https://fonts.googleapis.com/css2?family=Lato&family=Nobile:ital,wght@1,500&family=Open+Sans&display=swap\');\n\n:root {\n  --primary: rgb(0,59,121);\n  --secondary: rgb(251,189,26);\n  --red: rgb(229,52,44);\n  --blue: rgb(122,178,221);\n  --grey: rgb(225, 225, 225);\n  --violet: rgb(148,18,118);\n  --extradarkgrey: rgb(69,69,69);\n  --darkgrey: rgb(170,170,170);\n  --medgrey: #d1d1d1;\n  --lightgrey: #f7f7f7;\n  --white: #ffffff;\n\n  --xs: 4px;\n  --s: 8px;\n  --m: 16px;\n  --l: 24px;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: "Open Sans", sans-serif;\n  font-weight: 300;\n  font-size: 1.11rem;\n}\n\nh1,h2,h3,h4,h5,h6 {\n  font-family: "Open Sans", sans-serif;\n  margin-top: 0;\n  letter-spacing: -.025rem;\n}\n\np {\n  margin-top: 0;\n}\n\nform {\n  flex-grow: 1;\n}\n\na {\n  color: black;\n}\n\na:hover {\n  color: var(--blue);\n}\n\nb {\n  letter-spacing: -.025em;\n}\n\nbutton {\n  display: block;\n  font-size: inherit;\n  text-align: center;\n  padding-top: 1em;\n  padding-bottom: 1em;\n  padding-inline: 2em;\n  border: none;\n  margin-inline: auto;\n  font-family: inherit;\n}\n\n.App-container {\n  margin: 0 0 40px 0;\n}\n\n.u-nomargin {\n  margin: 0;\n}\n\n.u-nopadding {\n  padding: 0;\n}\n\n.u-block {\n  position: relative;\n  width: 80%;\n  padding: 0 10% 0% 10%;\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n}\n\n.u-block > h1 {\n  display: inline-block;\n}\n\n.u-block > h1:before {\n  content: "";\n  display: block;\n  height: 0.25rem;\n  width: 100%;\n  margin-bottom: 0.25rem;\n  opacity: 1;\n  background-color: currentColor;\n  -ms-transform-origin: left center;\n  transform-origin: left center;\n  animation: 1.5s cubic-bezier(0,0,0,1) 0s 1 section-title-line\n}\n\n@keyframes section-title-line {\n  0% {\n    transform: scaleX(0);\n    -ms-transform: scaleX(0);\n  }\n\n  100% {\n    transform: scaleX(1);\n    -ms-transform: scaleX(1);\n  }\n  }\n\n\n.u-flex {\n  display: flex;\n}\n\n.u-flexColumn {\n  display: flex;\n  flex-direction: column;\n}\n\n.u-flex-justifyCenter {\n  justify-content: center;\n}\n\n.u-flex-justifySpace {\n  justify-content: space-between;\n}\n\n.u-flex-alignCenter {\n  align-items: center;\n}\n\n.u-inlineBlock {\n  display: inline-block;\n}\n\n.u-bold {\n  font-weight: 600;\n}\n\n.u-textCenter {\n  text-align: center;\n}\n\n.u-relative {\n  position: relative;\n}\n\n.u-pointer {\n  cursor: pointer;\n}\n\n.u-link {\n  color: var(--primary);\n  text-decoration: none;\n  cursor: pointer;\n}\n\n.u-link:hover {\n  color: var(--primary--dim);\n}\n\n.u-margin-top {\n  margin-top: .75rem;\n}\n\n.u-image {\n  width: 100%;\n  height: auto;\n  background-position: center;\n  background-size: cover;\n}\n\n.u-aspect-169 {\n  aspect-ratio: 16/9;\n}\n\n.u-aspect-43 {\n  aspect-ratio: 4/3;\n}\n\n.u-aspect-square {\n  aspect-ratio: 1/1;\n}\n\n.u-gridPic-3, .u-gridPic-2 {\n  max-width: 24rem;\n  margin-inline: auto;\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 1.25rem;\n  margin-top: 1rem;\n}\n\n@media (min-width: 752px) {\n  .u-gridPic-3 {\n    max-width: 100%;  \n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n\n@media (min-width: 680px) {\n  .u-gridPic-2 {\n    max-width: 66%;\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n.u-b-primary, .u-b-primary:hover, .u-b-primary:visited {\n  background-color: var(--primary);\n  color: white\n}\n\n.u-b-secondary, .u-b-secondary:hover, .u-b-secondary:visited {\n  background-color: var(--secondary);\n  color: var(--primary)\n}\n\n.u-b-blue, .u-b-blue:hover, .u-b-blue:visited {\n  background-color: var(--blue);\n  color: var(--primary)\n}\n\n.u-b-red, .u-b-red:hover, .u-b-red:visited {\n  background-color: var(--red);\n  color: white\n}\n\n.u-b-violet, .u-b-violet:hover, .u-b-violet:visited {\n  background-color: var(--violet);\n  color: white;\n}\n\n.u-b-white, .u-b-white:hover, .u-b-white:visited {\n  background-color: white;\n  color: black;\n}\n\n.u-b-darkgrey, .u-b-darkgrey:hover, .u-b-darkgrey:visited {\n  background-color: var(--darkgrey);\n  color: black\n}\n\n.u-alert-green {\n  color: #155724;\n  background-color: #d4edda;\n  border-color: #c3e6cb;\n  padding: .75rem;\n}\n\n.u-alert-yellow {\n  color: #856404;\n  background-color: #fff3cd;\n  border-color: #ffeeba;\n  padding: .75rem;\n}\n\n.u-alert-red {\n  color: #721c24;\n  background-color: #f8d7da;\n  border-color: #f5c6cb;\n  padding: .75rem;\n}'],sourceRoot:""}]);const l=a},23645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var l=0;l<this.length;l++){var u=this[l][0];null!=u&&(a[u]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&a[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),t.push(s))}},t}},61667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},87537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},94470:e=>{"use strict";var t=Object.prototype.hasOwnProperty,n=Object.prototype.toString,r=Object.defineProperty,o=Object.getOwnPropertyDescriptor,i=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===n.call(e)},a=function(e){if(!e||"[object Object]"!==n.call(e))return!1;var r,o=t.call(e,"constructor"),i=e.constructor&&e.constructor.prototype&&t.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!o&&!i)return!1;for(r in e);return void 0===r||t.call(e,r)},l=function(e,t){r&&"__proto__"===t.name?r(e,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):e[t.name]=t.newValue},u=function(e,n){if("__proto__"===n){if(!t.call(e,n))return;if(o)return o(e,n).value}return e[n]};e.exports=function e(){var t,n,r,o,c,s,f=arguments[0],d=1,p=arguments.length,h=!1;for("boolean"==typeof f&&(h=f,f=arguments[1]||{},d=2),(null==f||"object"!=typeof f&&"function"!=typeof f)&&(f={});d<p;++d)if(null!=(t=arguments[d]))for(n in t)r=u(f,n),f!==(o=u(t,n))&&(h&&o&&(a(o)||(c=i(o)))?(c?(c=!1,s=r&&i(r)?r:[]):s=r&&a(r)?r:{},l(f,{name:n,newValue:e(h,s,o)})):void 0!==o&&l(f,{name:n,newValue:o}));return f}},18139:e=>{var t=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g,n=/\n/g,r=/^\s*/,o=/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/,i=/^:\s*/,a=/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/,l=/^[;\s]*/,u=/^\s+|\s+$/g,c="";function s(e){return e?e.replace(u,c):c}e.exports=function(e,u){if("string"!=typeof e)throw new TypeError("First argument must be a string");if(!e)return[];u=u||{};var f=1,d=1;function p(e){var t=e.match(n);t&&(f+=t.length);var r=e.lastIndexOf("\n");d=~r?e.length-r:d+e.length}function h(){var e={line:f,column:d};return function(t){return t.position=new m(e),A(),t}}function m(e){this.start=e,this.end={line:f,column:d},this.source=u.source}m.prototype.content=e;var g=[];function v(t){var n=new Error(u.source+":"+f+":"+d+": "+t);if(n.reason=t,n.filename=u.source,n.line=f,n.column=d,n.source=e,!u.silent)throw n;g.push(n)}function y(t){var n=t.exec(e);if(n){var r=n[0];return p(r),e=e.slice(r.length),n}}function A(){y(r)}function b(e){var t;for(e=e||[];t=w();)!1!==t&&e.push(t);return e}function w(){var t=h();if("/"==e.charAt(0)&&"*"==e.charAt(1)){for(var n=2;c!=e.charAt(n)&&("*"!=e.charAt(n)||"/"!=e.charAt(n+1));)++n;if(n+=2,c===e.charAt(n-1))return v("End of comment missing");var r=e.slice(2,n-2);return d+=2,p(r),e=e.slice(n),d+=2,t({type:"comment",comment:r})}}function x(){var e=h(),n=y(o);if(n){if(w(),!y(i))return v("property missing ':'");var r=y(a),u=e({type:"declaration",property:s(n[0].replace(t,c)),value:r?s(r[0].replace(t,c)):c});return y(l),u}}return A(),function(){var e,t=[];for(b(t);e=x();)!1!==e&&(t.push(e),b(t));return t}()}},64448:(e,t,n)=>{"use strict";var r=n(67294),o=n(63840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)a.add(t[e])}var s=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function A(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var b=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),x=Symbol.for("react.portal"),E=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),B=Symbol.for("react.context"),I=Symbol.for("react.forward_ref"),O=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),F=Symbol.for("react.memo"),_=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var T=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var L=Symbol.iterator;function N(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=L&&e[L]||e["@@iterator"])?e:null}var j,R=Object.assign;function M(e){if(void 0===j)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);j=t&&t[1]||""}return"\n"+j+e}var z=!1;function D(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,l=i.length-1;1<=a&&0<=l&&o[a]!==i[l];)l--;for(;1<=a&&0<=l;a--,l--)if(o[a]!==i[l]){if(1!==a||1!==l)do{if(a--,0>--l||o[a]!==i[l]){var u="\n"+o[a].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=a&&0<=l);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?M(e):""}function U(e){switch(e.tag){case 5:return M(e.type);case 16:return M("Lazy");case 13:return M("Suspense");case 19:return M("SuspenseList");case 0:case 2:case 15:return D(e.type,!1);case 11:return D(e.type.render,!1);case 1:return D(e.type,!0);default:return""}}function W(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case x:return"Portal";case k:return"Profiler";case C:return"StrictMode";case O:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case B:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case I:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case F:return null!==(t=e.displayName||null)?t:W(e.type)||"Memo";case _:t=e._payload,e=e._init;try{return W(e(t))}catch(e){}}return null}function q(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return W(t);case 8:return t===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Y(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function $(e,t){var n=t.checked;return R({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function X(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function K(e,t){null!=(t=t.checked)&&A(e,"checked",t,!1)}function J(e,t){K(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return R({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(te(n)){if(1<n.length)throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function ie(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,se,fe=(se=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return se(e,t)}))}:se);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=R({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Ae(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var be=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,Ee=null,Ce=null;function ke(e){if(e=bo(e)){if("function"!=typeof xe)throw Error(i(280));var t=e.stateNode;t&&(t=xo(t),xe(e.stateNode,e.type,t))}}function Se(e){Ee?Ce?Ce.push(e):Ce=[e]:Ee=e}function Be(){if(Ee){var e=Ee,t=Ce;if(Ce=Ee=null,ke(e),t)for(e=0;e<t.length;e++)ke(t[e])}}function Ie(e,t){return e(t)}function Oe(){}var Pe=!1;function Fe(e,t,n){if(Pe)return e(t,n);Pe=!0;try{return Ie(e,t,n)}finally{Pe=!1,(null!==Ee||null!==Ce)&&(Oe(),Be())}}function _e(e,t){var n=e.stateNode;if(null===n)return null;var r=xo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Te=!1;if(s)try{var Le={};Object.defineProperty(Le,"passive",{get:function(){Te=!0}}),window.addEventListener("test",Le,Le),window.removeEventListener("test",Le,Le)}catch(se){Te=!1}function Ne(e,t,n,r,o,i,a,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var je=!1,Re=null,Me=!1,ze=null,De={onError:function(e){je=!0,Re=e}};function Ue(e,t,n,r,o,i,a,l,u){je=!1,Re=null,Ne.apply(De,arguments)}function We(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if(We(e)!==e)throw Error(i(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=We(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Ve(o),e;if(a===r)return Ve(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e))?Qe(e):null}function Qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Qe(e);if(null!==t)return t;e=e.sibling}return null}var Ye=o.unstable_scheduleCallback,Ge=o.unstable_cancelCallback,$e=o.unstable_shouldYield,Xe=o.unstable_requestPaint,Ke=o.unstable_now,Je=o.unstable_getCurrentPriorityLevel,Ze=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,it=null,at=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,ct=64,st=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=268435455&n;if(0!==a){var l=a&~o;0!==l?r=ft(l):0!=(i&=a)&&(r=ft(i))}else 0!=(a=n&~o)?r=ft(a):0!==i&&(r=ft(i));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(i=t&-t)||16===o&&0!=(4194240&i)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-at(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var At=0;function bt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,xt,Et,Ct,kt,St=!1,Bt=[],It=null,Ot=null,Pt=null,Ft=new Map,_t=new Map,Tt=[],Lt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Nt(e,t){switch(e){case"focusin":case"focusout":It=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":Pt=null;break;case"pointerover":case"pointerout":Ft.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":_t.delete(t.pointerId)}}function jt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==t&&null!==(t=bo(t))&&xt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Rt(e){var t=Ao(e.target);if(null!==t){var n=We(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=qe(n)))return e.blockedOn=t,void kt(e.priority,(function(){Et(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=$t(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=bo(n))&&xt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);be=r,n.target.dispatchEvent(r),be=null,t.shift()}return!0}function zt(e,t,n){Mt(e)&&n.delete(t)}function Dt(){St=!1,null!==It&&Mt(It)&&(It=null),null!==Ot&&Mt(Ot)&&(Ot=null),null!==Pt&&Mt(Pt)&&(Pt=null),Ft.forEach(zt),_t.forEach(zt)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,St||(St=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Dt)))}function Wt(e){function t(t){return Ut(t,e)}if(0<Bt.length){Ut(Bt[0],e);for(var n=1;n<Bt.length;n++){var r=Bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==It&&Ut(It,e),null!==Ot&&Ut(Ot,e),null!==Pt&&Ut(Pt,e),Ft.forEach(t),_t.forEach(t),n=0;n<Tt.length;n++)(r=Tt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Tt.length&&null===(n=Tt[0]).blockedOn;)Rt(n),null===n.blockedOn&&Tt.shift()}var qt=b.ReactCurrentBatchConfig,Vt=!0;function Ht(e,t,n,r){var o=At,i=qt.transition;qt.transition=null;try{At=1,Yt(e,t,n,r)}finally{At=o,qt.transition=i}}function Qt(e,t,n,r){var o=At,i=qt.transition;qt.transition=null;try{At=4,Yt(e,t,n,r)}finally{At=o,qt.transition=i}}function Yt(e,t,n,r){if(Vt){var o=$t(e,t,n,r);if(null===o)Vr(e,t,r,Gt,n),Nt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return It=jt(It,e,t,n,r,o),!0;case"dragenter":return Ot=jt(Ot,e,t,n,r,o),!0;case"mouseover":return Pt=jt(Pt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Ft.set(i,jt(Ft.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,_t.set(i,jt(_t.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Nt(e,r),4&t&&-1<Lt.indexOf(e)){for(;null!==o;){var i=bo(o);if(null!==i&&wt(i),null===(i=$t(e,t,n,r))&&Vr(e,t,r,Gt,n),i===o)break;o=i}null!==o&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var Gt=null;function $t(e,t,n,r){if(Gt=null,null!==(e=Ao(e=we(r))))if(null===(t=We(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=qe(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Gt=e,null}function Xt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Kt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,o="value"in Kt?Kt.value:Kt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Zt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return R(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,un,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=on(cn),fn=R({},cn,{view:0,detail:0}),dn=on(fn),pn=R({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(an=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=an=0,un=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(pn),mn=on(R({},pn,{dataTransfer:0})),gn=on(R({},fn,{relatedTarget:0})),vn=on(R({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=R({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),An=on(yn),bn=on(R({},cn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function kn(){return Cn}var Sn=R({},fn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Bn=on(Sn),In=on(R({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=on(R({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kn})),Pn=on(R({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Fn=R({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),_n=on(Fn),Tn=[9,13,27,32],Ln=s&&"CompositionEvent"in window,Nn=null;s&&"documentMode"in document&&(Nn=document.documentMode);var jn=s&&"TextEvent"in window&&!Nn,Rn=s&&(!Ln||Nn&&8<Nn&&11>=Nn),Mn=String.fromCharCode(32),zn=!1;function Dn(e,t){switch(e){case"keyup":return-1!==Tn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,qn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!qn[e.type]:"textarea"===t}function Hn(e,t,n,r){Se(r),0<(t=Qr(t,"onChange")).length&&(n=new sn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Qn=null,Yn=null;function Gn(e){Mr(e,0)}function $n(e){if(Y(wo(e)))return e}function Xn(e,t){if("change"===e)return t}var Kn=!1;if(s){var Jn;if(s){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Jn=Zn}else Jn=!1;Kn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Qn&&(Qn.detachEvent("onpropertychange",nr),Yn=Qn=null)}function nr(e){if("value"===e.propertyName&&$n(Yn)){var t=[];Hn(t,Yn,e,we(e)),Fe(Gn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Yn=n,(Qn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return $n(Yn)}function ir(e,t){if("click"===e)return $n(t)}function ar(e,t){if("input"===e||"change"===e)return $n(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=sr(n,i);var a=sr(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=s&&"documentMode"in document&&11>=document.documentMode,gr=null,vr=null,yr=null,Ar=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;Ar||null==gr||gr!==G(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&ur(yr,r)||(yr=r,0<(r=Qr(vr,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function wr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xr={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},Er={},Cr={};function kr(e){if(Er[e])return Er[e];if(!xr[e])return e;var t,n=xr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Cr)return Er[e]=n[t];return e}s&&(Cr=document.createElement("div").style,"AnimationEvent"in window||(delete xr.animationend.animation,delete xr.animationiteration.animation,delete xr.animationstart.animation),"TransitionEvent"in window||delete xr.transitionend.transition);var Sr=kr("animationend"),Br=kr("animationiteration"),Ir=kr("animationstart"),Or=kr("transitionend"),Pr=new Map,Fr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function _r(e,t){Pr.set(e,t),u(t,[e])}for(var Tr=0;Tr<Fr.length;Tr++){var Lr=Fr[Tr];_r(Lr.toLowerCase(),"on"+(Lr[0].toUpperCase()+Lr.slice(1)))}_r(Sr,"onAnimationEnd"),_r(Br,"onAnimationIteration"),_r(Ir,"onAnimationStart"),_r("dblclick","onDoubleClick"),_r("focusin","onFocus"),_r("focusout","onBlur"),_r(Or,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Nr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),jr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Nr));function Rr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,u,c){if(Ue.apply(this,arguments),je){if(!je)throw Error(i(198));var s=Re;je=!1,Re=null,Me||(Me=!0,ze=s)}}(r,t,void 0,e),e.currentTarget=null}function Mr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],u=l.instance,c=l.currentTarget;if(l=l.listener,u!==i&&o.isPropagationStopped())break e;Rr(o,l,c),i=u}else for(a=0;a<r.length;a++){if(u=(l=r[a]).instance,c=l.currentTarget,l=l.listener,u!==i&&o.isPropagationStopped())break e;Rr(o,l,c),i=u}}}if(Me)throw e=ze,Me=!1,ze=null,e}function zr(e,t){var n=t[go];void 0===n&&(n=t[go]=new Set);var r=e+"__bubble";n.has(r)||(qr(t,e,2,!1),n.add(r))}function Dr(e,t,n){var r=0;t&&(r|=4),qr(n,e,r,t)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function Wr(e){if(!e[Ur]){e[Ur]=!0,a.forEach((function(t){"selectionchange"!==t&&(jr.has(t)||Dr(t,!1,e),Dr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ur]||(t[Ur]=!0,Dr("selectionchange",!1,t))}}function qr(e,t,n,r){switch(Xt(t)){case 1:var o=Ht;break;case 4:o=Qt;break;default:o=Yt}n=o.bind(null,t,n,e),o=void 0,!Te||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=Ao(l)))return;if(5===(u=a.tag)||6===u){r=i=a;continue e}l=l.parentNode}}r=r.return}Fe((function(){var r=i,o=we(n),a=[];e:{var l=Pr.get(e);if(void 0!==l){var u=sn,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Bn;break;case"focusin":c="focus",u=gn;break;case"focusout":c="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=On;break;case Sr:case Br:case Ir:u=vn;break;case Or:u=Pn;break;case"scroll":u=dn;break;case"wheel":u=_n;break;case"copy":case"cut":case"paste":u=An;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=In}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==l?l+"Capture":null:l;s=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=_e(h,d))&&s.push(Hr(h,m,p))),f)break;h=h.return}0<s.length&&(l=new u(l,c,null,n,o),a.push({event:l,listeners:s}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===be||!(c=n.relatedTarget||n.fromElement)||!Ao(c)&&!c[mo])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?Ao(c):null)&&(c!==(f=We(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=r),u!==c)){if(s=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=In,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:wo(u),p=null==c?l:wo(c),(l=new s(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,Ao(o)===r&&((s=new s(d,h+"enter",c,n,o)).target=p,s.relatedTarget=f,m=s),f=m,u&&c)e:{for(d=c,h=0,p=s=u;p;p=Yr(p))h++;for(p=0,m=d;m;m=Yr(m))p++;for(;0<h-p;)s=Yr(s),h--;for(;0<p-h;)d=Yr(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=Yr(s),d=Yr(d)}s=null}else s=null;null!==u&&Gr(a,l,u,s,!1),null!==c&&null!==f&&Gr(a,f,c,s,!0)}if("select"===(u=(l=r?wo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var g=Xn;else if(Vn(l))if(Kn)g=ar;else{g=or;var v=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=ir);switch(g&&(g=g(e,r))?Hn(a,g,n,o):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&ee(l,"number",l.value)),v=r?wo(r):window,e){case"focusin":(Vn(v)||"true"===v.contentEditable)&&(gr=v,vr=r,yr=null);break;case"focusout":yr=vr=gr=null;break;case"mousedown":Ar=!0;break;case"contextmenu":case"mouseup":case"dragend":Ar=!1,br(a,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":br(a,n,o)}var y;if(Ln)e:{switch(e){case"compositionstart":var A="onCompositionStart";break e;case"compositionend":A="onCompositionEnd";break e;case"compositionupdate":A="onCompositionUpdate";break e}A=void 0}else Wn?Dn(e,n)&&(A="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(A="onCompositionStart");A&&(Rn&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==A?"onCompositionEnd"===A&&Wn&&(y=en()):(Jt="value"in(Kt=o)?Kt.value:Kt.textContent,Wn=!0)),0<(v=Qr(r,A)).length&&(A=new bn(A,e,null,n,o),a.push({event:A,listeners:v}),(y||null!==(y=Un(n)))&&(A.data=y))),(y=jn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(zn=!0,Mn);case"textInput":return(e=t.data)===Mn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!Ln&&Dn(e,t)?(e=en(),Zt=Jt=Kt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Rn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Qr(r,"onBeforeInput")).length&&(o=new bn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=y)}Mr(a,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Qr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=_e(e,n))&&r.unshift(Hr(e,i,o)),null!=(i=_e(e,t))&&r.push(Hr(e,i,o))),e=e.return}return r}function Yr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Gr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,u=l.alternate,c=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==c&&(l=c,o?null!=(u=_e(n,i))&&a.unshift(Hr(n,u,l)):o||null!=(u=_e(n,i))&&a.push(Hr(n,u,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var $r=/\r\n?/g,Xr=/\u0000|\uFFFD/g;function Kr(e){return("string"==typeof e?e:""+e).replace($r,"\n").replace(Xr,"")}function Jr(e,t,n){if(t=Kr(t),Kr(e)!==t&&n)throw Error(i(425))}function Zr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,io="function"==typeof Promise?Promise:void 0,ao="function"==typeof queueMicrotask?queueMicrotask:void 0!==io?function(e){return io.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function uo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Wt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Wt(t)}function co(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function so(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,go="__reactEvents$"+fo,vo="__reactListeners$"+fo,yo="__reactHandles$"+fo;function Ao(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=so(e);null!==e;){if(n=e[po])return n;e=so(e)}return t}n=(e=n).parentNode}return null}function bo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function xo(e){return e[ho]||null}var Eo=[],Co=-1;function ko(e){return{current:e}}function So(e){0>Co||(e.current=Eo[Co],Eo[Co]=null,Co--)}function Bo(e,t){Co++,Eo[Co]=e.current,e.current=t}var Io={},Oo=ko(Io),Po=ko(!1),Fo=Io;function _o(e,t){var n=e.type.contextTypes;if(!n)return Io;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function To(e){return null!=e.childContextTypes}function Lo(){So(Po),So(Oo)}function No(e,t,n){if(Oo.current!==Io)throw Error(i(168));Bo(Oo,t),Bo(Po,n)}function jo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(i(108,q(e)||"Unknown",o));return R({},n,r)}function Ro(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Io,Fo=Oo.current,Bo(Oo,e),Bo(Po,Po.current),!0}function Mo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=jo(e,t,Fo),r.__reactInternalMemoizedMergedChildContext=e,So(Po),So(Oo),Bo(Oo,e)):So(Po),Bo(Po,n)}var zo=null,Do=!1,Uo=!1;function Wo(e){null===zo?zo=[e]:zo.push(e)}function qo(){if(!Uo&&null!==zo){Uo=!0;var e=0,t=At;try{var n=zo;for(At=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}zo=null,Do=!1}catch(t){throw null!==zo&&(zo=zo.slice(e+1)),Ye(Ze,qo),t}finally{At=t,Uo=!1}}return null}var Vo=[],Ho=0,Qo=null,Yo=0,Go=[],$o=0,Xo=null,Ko=1,Jo="";function Zo(e,t){Vo[Ho++]=Yo,Vo[Ho++]=Qo,Qo=e,Yo=t}function ei(e,t,n){Go[$o++]=Ko,Go[$o++]=Jo,Go[$o++]=Xo,Xo=e;var r=Ko;e=Jo;var o=32-at(r)-1;r&=~(1<<o),n+=1;var i=32-at(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Ko=1<<32-at(t)+o|n<<o|r,Jo=i+e}else Ko=1<<i|n<<o|r,Jo=e}function ti(e){null!==e.return&&(Zo(e,1),ei(e,1,0))}function ni(e){for(;e===Qo;)Qo=Vo[--Ho],Vo[Ho]=null,Yo=Vo[--Ho],Vo[Ho]=null;for(;e===Xo;)Xo=Go[--$o],Go[$o]=null,Jo=Go[--$o],Go[$o]=null,Ko=Go[--$o],Go[$o]=null}var ri=null,oi=null,ii=!1,ai=null;function li(e,t){var n=_c(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ui(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ri=e,oi=co(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ri=e,oi=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Xo?{id:Ko,overflow:Jo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=_c(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ri=e,oi=null,!0);default:return!1}}function ci(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function si(e){if(ii){var t=oi;if(t){var n=t;if(!ui(e,t)){if(ci(e))throw Error(i(418));t=co(n.nextSibling);var r=ri;t&&ui(e,t)?li(r,n):(e.flags=-4097&e.flags|2,ii=!1,ri=e)}}else{if(ci(e))throw Error(i(418));e.flags=-4097&e.flags|2,ii=!1,ri=e}}}function fi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ri=e}function di(e){if(e!==ri)return!1;if(!ii)return fi(e),ii=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oi)){if(ci(e))throw pi(),Error(i(418));for(;t;)li(e,t),t=co(t.nextSibling)}if(fi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oi=co(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oi=null}}else oi=ri?co(e.stateNode.nextSibling):null;return!0}function pi(){for(var e=oi;e;)e=co(e.nextSibling)}function hi(){oi=ri=null,ii=!1}function mi(e){null===ai?ai=[e]:ai.push(e)}var gi=b.ReactCurrentBatchConfig;function vi(e,t){if(e&&e.defaultProps){for(var n in t=R({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var yi=ko(null),Ai=null,bi=null,wi=null;function xi(){wi=bi=Ai=null}function Ei(e){var t=yi.current;So(yi),e._currentValue=t}function Ci(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function ki(e,t){Ai=e,wi=bi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(bl=!0),e.firstContext=null)}function Si(e){var t=e._currentValue;if(wi!==e)if(e={context:e,memoizedValue:t,next:null},null===bi){if(null===Ai)throw Error(i(308));bi=e,Ai.dependencies={lanes:0,firstContext:e}}else bi=bi.next=e;return t}var Bi=null;function Ii(e){null===Bi?Bi=[e]:Bi.push(e)}function Oi(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Ii(t)):(n.next=o.next,o.next=n),t.interleaved=n,Pi(e,r)}function Pi(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Fi=!1;function _i(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ti(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Li(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ni(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Ou)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Pi(e,n)}return null===(o=r.interleaved)?(t.next=t,Ii(r)):(t.next=o.next,o.next=t),r.interleaved=t,Pi(e,n)}function ji(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Ri(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Mi(e,t,n,r){var o=e.updateQueue;Fi=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,c=u.next;u.next=null,null===a?i=c:a.next=c,a=u;var s=e.alternate;null!==s&&(l=(s=s.updateQueue).lastBaseUpdate)!==a&&(null===l?s.firstBaseUpdate=c:l.next=c,s.lastBaseUpdate=u)}if(null!==i){var f=o.baseState;for(a=0,s=c=u=null,l=i;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==s&&(s=s.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=R({},f,d);break e;case 2:Fi=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===s?(c=s=p,u=f):s=s.next=p,a|=d;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(d=l).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===s&&(u=f),o.baseState=u,o.firstBaseUpdate=c,o.lastBaseUpdate=s,null!==(t=o.shared.interleaved)){o=t;do{a|=o.lane,o=o.next}while(o!==t)}else null===i&&(o.shared.lanes=0);Ru|=a,e.lanes=a,e.memoizedState=f}}function zi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var Di=(new r.Component).refs;function Ui(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:R({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Wi={isMounted:function(e){return!!(e=e._reactInternals)&&We(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tc(),o=nc(e),i=Li(r,o);i.payload=t,null!=n&&(i.callback=n),null!==(t=Ni(e,i,o))&&(rc(t,e,o,r),ji(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tc(),o=nc(e),i=Li(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=Ni(e,i,o))&&(rc(t,e,o,r),ji(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tc(),r=nc(e),o=Li(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Ni(e,o,r))&&(rc(t,e,r,n),ji(t,e,r))}};function qi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,i))}function Vi(e,t,n){var r=!1,o=Io,i=t.contextType;return"object"==typeof i&&null!==i?i=Si(i):(o=To(t)?Fo:Oo.current,i=(r=null!=(r=t.contextTypes))?_o(e,o):Io),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Wi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Hi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Wi.enqueueReplaceState(t,t.state,null)}function Qi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Di,_i(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=Si(i):(i=To(t)?Fo:Oo.current,o.context=_o(e,i)),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(Ui(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Wi.enqueueReplaceState(o,o.state,null),Mi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Yi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=o.refs;t===Di&&(t=o.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Gi(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function $i(e){return(0,e._init)(e._payload)}function Xi(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Lc(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Mc(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){var i=n.type;return i===E?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===_&&$i(i)===t.type)?((r=o(t,n.props)).ref=Yi(e,t,n),r.return=e,r):((r=Nc(n.type,n.key,n.props,null,e.mode,r)).ref=Yi(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zc(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=jc(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Mc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Nc(t.type,t.key,t.props,null,e.mode,n)).ref=Yi(e,null,t),n.return=e,n;case x:return(t=zc(t,e.mode,n)).return=e,t;case _:return d(e,(0,t._init)(t._payload),n)}if(te(t)||N(t))return(t=jc(t,e.mode,n,null)).return=e,t;Gi(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===o?c(e,t,n,r):null;case x:return n.key===o?s(e,t,n,r):null;case _:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||N(n))return null!==o?null:f(e,t,n,r,null);Gi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case x:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case _:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||N(r))return f(t,e=e.get(n)||null,r,o,null);Gi(t,r)}return null}function m(o,i,l,u){for(var c=null,s=null,f=i,m=i=0,g=null;null!==f&&m<l.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var v=p(o,f,l[m],u);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(o,f),i=a(v,i,m),null===s?c=v:s.sibling=v,s=v,f=g}if(m===l.length)return n(o,f),ii&&Zo(o,m),c;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(i=a(f,i,m),null===s?c=f:s.sibling=f,s=f);return ii&&Zo(o,m),c}for(f=r(o,f);m<l.length;m++)null!==(g=h(f,o,m,l[m],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),i=a(g,i,m),null===s?c=g:s.sibling=g,s=g);return e&&f.forEach((function(e){return t(o,e)})),ii&&Zo(o,m),c}function g(o,l,u,c){var s=N(u);if("function"!=typeof s)throw Error(i(150));if(null==(u=s.call(u)))throw Error(i(151));for(var f=s=null,m=l,g=l=0,v=null,y=u.next();null!==m&&!y.done;g++,y=u.next()){m.index>g?(v=m,m=null):v=m.sibling;var A=p(o,m,y.value,c);if(null===A){null===m&&(m=v);break}e&&m&&null===A.alternate&&t(o,m),l=a(A,l,g),null===f?s=A:f.sibling=A,f=A,m=v}if(y.done)return n(o,m),ii&&Zo(o,g),s;if(null===m){for(;!y.done;g++,y=u.next())null!==(y=d(o,y.value,c))&&(l=a(y,l,g),null===f?s=y:f.sibling=y,f=y);return ii&&Zo(o,g),s}for(m=r(o,m);!y.done;g++,y=u.next())null!==(y=h(m,o,g,y.value,c))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),l=a(y,l,g),null===f?s=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),ii&&Zo(o,g),s}return function e(r,i,a,u){if("object"==typeof a&&null!==a&&a.type===E&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case w:e:{for(var c=a.key,s=i;null!==s;){if(s.key===c){if((c=a.type)===E){if(7===s.tag){n(r,s.sibling),(i=o(s,a.props.children)).return=r,r=i;break e}}else if(s.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===_&&$i(c)===s.type){n(r,s.sibling),(i=o(s,a.props)).ref=Yi(r,s,a),i.return=r,r=i;break e}n(r,s);break}t(r,s),s=s.sibling}a.type===E?((i=jc(a.props.children,r.mode,u,a.key)).return=r,r=i):((u=Nc(a.type,a.key,a.props,null,r.mode,u)).ref=Yi(r,i,a),u.return=r,r=u)}return l(r);case x:e:{for(s=a.key;null!==i;){if(i.key===s){if(4===i.tag&&i.stateNode.containerInfo===a.containerInfo&&i.stateNode.implementation===a.implementation){n(r,i.sibling),(i=o(i,a.children||[])).return=r,r=i;break e}n(r,i);break}t(r,i),i=i.sibling}(i=zc(a,r.mode,u)).return=r,r=i}return l(r);case _:return e(r,i,(s=a._init)(a._payload),u)}if(te(a))return m(r,i,a,u);if(N(a))return g(r,i,a,u);Gi(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==i&&6===i.tag?(n(r,i.sibling),(i=o(i,a)).return=r,r=i):(n(r,i),(i=Mc(a,r.mode,u)).return=r,r=i),l(r)):n(r,i)}}var Ki=Xi(!0),Ji=Xi(!1),Zi={},ea=ko(Zi),ta=ko(Zi),na=ko(Zi);function ra(e){if(e===Zi)throw Error(i(174));return e}function oa(e,t){switch(Bo(na,t),Bo(ta,e),Bo(ea,Zi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}So(ea),Bo(ea,t)}function ia(){So(ea),So(ta),So(na)}function aa(e){ra(na.current);var t=ra(ea.current),n=ue(t,e.type);t!==n&&(Bo(ta,e),Bo(ea,n))}function la(e){ta.current===e&&(So(ea),So(ta))}var ua=ko(0);function ca(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var sa=[];function fa(){for(var e=0;e<sa.length;e++)sa[e]._workInProgressVersionPrimary=null;sa.length=0}var da=b.ReactCurrentDispatcher,pa=b.ReactCurrentBatchConfig,ha=0,ma=null,ga=null,va=null,ya=!1,Aa=!1,ba=0,wa=0;function xa(){throw Error(i(321))}function Ea(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function Ca(e,t,n,r,o,a){if(ha=a,ma=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,da.current=null===e||null===e.memoizedState?ll:ul,e=n(r,o),Aa){a=0;do{if(Aa=!1,ba=0,25<=a)throw Error(i(301));a+=1,va=ga=null,t.updateQueue=null,da.current=cl,e=n(r,o)}while(Aa)}if(da.current=al,t=null!==ga&&null!==ga.next,ha=0,va=ga=ma=null,ya=!1,t)throw Error(i(300));return e}function ka(){var e=0!==ba;return ba=0,e}function Sa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===va?ma.memoizedState=va=e:va=va.next=e,va}function Ba(){if(null===ga){var e=ma.alternate;e=null!==e?e.memoizedState:null}else e=ga.next;var t=null===va?ma.memoizedState:va.next;if(null!==t)va=t,ga=e;else{if(null===e)throw Error(i(310));e={memoizedState:(ga=e).memoizedState,baseState:ga.baseState,baseQueue:ga.baseQueue,queue:ga.queue,next:null},null===va?ma.memoizedState=va=e:va=va.next=e}return va}function Ia(e,t){return"function"==typeof t?t(e):t}function Oa(e){var t=Ba(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=ga,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){a=o.next,r=r.baseState;var u=l=null,c=null,s=a;do{var f=s.lane;if((ha&f)===f)null!==c&&(c=c.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var d={lane:f,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===c?(u=c=d,l=r):c=c.next=d,ma.lanes|=f,Ru|=f}s=s.next}while(null!==s&&s!==a);null===c?l=r:c.next=u,lr(r,t.memoizedState)||(bl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{a=o.lane,ma.lanes|=a,Ru|=a,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Pa(e){var t=Ba(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);lr(a,t.memoizedState)||(bl=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Fa(){}function _a(e,t){var n=ma,r=Ba(),o=t(),a=!lr(r.memoizedState,o);if(a&&(r.memoizedState=o,bl=!0),r=r.queue,Va(Na.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==va&&1&va.memoizedState.tag){if(n.flags|=2048,za(9,La.bind(null,n,r,o,t),void 0,null),null===Pu)throw Error(i(349));0!=(30&ha)||Ta(n,t,o)}return o}function Ta(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ma.updateQueue)?(t={lastEffect:null,stores:null},ma.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function La(e,t,n,r){t.value=n,t.getSnapshot=r,ja(t)&&Ra(e)}function Na(e,t,n){return n((function(){ja(t)&&Ra(e)}))}function ja(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Ra(e){var t=Pi(e,1);null!==t&&rc(t,e,1,-1)}function Ma(e){var t=Sa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ia,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,ma,e),[t.memoizedState,e]}function za(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ma.updateQueue)?(t={lastEffect:null,stores:null},ma.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Da(){return Ba().memoizedState}function Ua(e,t,n,r){var o=Sa();ma.flags|=e,o.memoizedState=za(1|t,n,void 0,void 0===r?null:r)}function Wa(e,t,n,r){var o=Ba();r=void 0===r?null:r;var i=void 0;if(null!==ga){var a=ga.memoizedState;if(i=a.destroy,null!==r&&Ea(r,a.deps))return void(o.memoizedState=za(t,n,i,r))}ma.flags|=e,o.memoizedState=za(1|t,n,i,r)}function qa(e,t){return Ua(8390656,8,e,t)}function Va(e,t){return Wa(2048,8,e,t)}function Ha(e,t){return Wa(4,2,e,t)}function Qa(e,t){return Wa(4,4,e,t)}function Ya(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ga(e,t,n){return n=null!=n?n.concat([e]):null,Wa(4,4,Ya.bind(null,t,e),n)}function $a(){}function Xa(e,t){var n=Ba();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ea(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ka(e,t){var n=Ba();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ea(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ja(e,t,n){return 0==(21&ha)?(e.baseState&&(e.baseState=!1,bl=!0),e.memoizedState=n):(lr(n,t)||(n=mt(),ma.lanes|=n,Ru|=n,e.baseState=!0),t)}function Za(e,t){var n=At;At=0!==n&&4>n?n:4,e(!0);var r=pa.transition;pa.transition={};try{e(!1),t()}finally{At=n,pa.transition=r}}function el(){return Ba().memoizedState}function tl(e,t,n){var r=nc(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?ol(t,n):null!==(n=Oi(e,t,n,r))&&(rc(n,e,r,tc()),il(n,t,r))}function nl(e,t,n){var r=nc(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))ol(t,o);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=i(a,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,a)){var u=t.interleaved;return null===u?(o.next=o,Ii(t)):(o.next=u.next,u.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Oi(e,t,o,r))&&(rc(n,e,r,o=tc()),il(n,t,r))}}function rl(e){var t=e.alternate;return e===ma||null!==t&&t===ma}function ol(e,t){Aa=ya=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function il(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var al={readContext:Si,useCallback:xa,useContext:xa,useEffect:xa,useImperativeHandle:xa,useInsertionEffect:xa,useLayoutEffect:xa,useMemo:xa,useReducer:xa,useRef:xa,useState:xa,useDebugValue:xa,useDeferredValue:xa,useTransition:xa,useMutableSource:xa,useSyncExternalStore:xa,useId:xa,unstable_isNewReconciler:!1},ll={readContext:Si,useCallback:function(e,t){return Sa().memoizedState=[e,void 0===t?null:t],e},useContext:Si,useEffect:qa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ua(4194308,4,Ya.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ua(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ua(4,2,e,t)},useMemo:function(e,t){var n=Sa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Sa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,ma,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Sa().memoizedState=e},useState:Ma,useDebugValue:$a,useDeferredValue:function(e){return Sa().memoizedState=e},useTransition:function(){var e=Ma(!1),t=e[0];return e=Za.bind(null,e[1]),Sa().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ma,o=Sa();if(ii){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===Pu)throw Error(i(349));0!=(30&ha)||Ta(r,t,n)}o.memoizedState=n;var a={value:n,getSnapshot:t};return o.queue=a,qa(Na.bind(null,r,a,e),[e]),r.flags|=2048,za(9,La.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=Sa(),t=Pu.identifierPrefix;if(ii){var n=Jo;t=":"+t+"R"+(n=(Ko&~(1<<32-at(Ko)-1)).toString(32)+n),0<(n=ba++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=wa++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ul={readContext:Si,useCallback:Xa,useContext:Si,useEffect:Va,useImperativeHandle:Ga,useInsertionEffect:Ha,useLayoutEffect:Qa,useMemo:Ka,useReducer:Oa,useRef:Da,useState:function(){return Oa(Ia)},useDebugValue:$a,useDeferredValue:function(e){return Ja(Ba(),ga.memoizedState,e)},useTransition:function(){return[Oa(Ia)[0],Ba().memoizedState]},useMutableSource:Fa,useSyncExternalStore:_a,useId:el,unstable_isNewReconciler:!1},cl={readContext:Si,useCallback:Xa,useContext:Si,useEffect:Va,useImperativeHandle:Ga,useInsertionEffect:Ha,useLayoutEffect:Qa,useMemo:Ka,useReducer:Pa,useRef:Da,useState:function(){return Pa(Ia)},useDebugValue:$a,useDeferredValue:function(e){var t=Ba();return null===ga?t.memoizedState=e:Ja(t,ga.memoizedState,e)},useTransition:function(){return[Pa(Ia)[0],Ba().memoizedState]},useMutableSource:Fa,useSyncExternalStore:_a,useId:el,unstable_isNewReconciler:!1};function sl(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function fl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function dl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=Li(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hu||(Hu=!0,Qu=r),dl(0,t)},n}function ml(e,t,n){(n=Li(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){dl(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){dl(0,t),"function"!=typeof r&&(null===Yu?Yu=new Set([this]):Yu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function gl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Sc.bind(null,e,t,n),t.then(e,e))}function vl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yl(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Li(-1,1)).tag=2,Ni(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var Al=b.ReactCurrentOwner,bl=!1;function wl(e,t,n,r){t.child=null===e?Ji(t,null,n,r):Ki(t,e.child,n,r)}function xl(e,t,n,r,o){n=n.render;var i=t.ref;return ki(t,o),r=Ca(e,t,n,r,i,o),n=ka(),null===e||bl?(ii&&n&&ti(t),t.flags|=1,wl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function El(e,t,n,r,o){if(null===e){var i=n.type;return"function"!=typeof i||Tc(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Nc(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Cl(e,t,i,r,o))}if(i=e.child,0==(e.lanes&o)){var a=i.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(a,r)&&e.ref===t.ref)return Hl(e,t,o)}return t.flags|=1,(e=Lc(i,r)).ref=t.ref,e.return=t,t.child=e}function Cl(e,t,n,r,o){if(null!==e){var i=e.memoizedProps;if(ur(i,r)&&e.ref===t.ref){if(bl=!1,t.pendingProps=r=i,0==(e.lanes&o))return t.lanes=e.lanes,Hl(e,t,o);0!=(131072&e.flags)&&(bl=!0)}}return Bl(e,t,n,r,o)}function kl(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Bo(Lu,Tu),Tu|=n;else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Bo(Lu,Tu),Tu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:n,Bo(Lu,Tu),Tu|=r}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,Bo(Lu,Tu),Tu|=r;return wl(e,t,o,n),t.child}function Sl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Bl(e,t,n,r,o){var i=To(n)?Fo:Oo.current;return i=_o(t,i),ki(t,o),n=Ca(e,t,n,r,i,o),r=ka(),null===e||bl?(ii&&r&&ti(t),t.flags|=1,wl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function Il(e,t,n,r,o){if(To(n)){var i=!0;Ro(t)}else i=!1;if(ki(t,o),null===t.stateNode)Vl(e,t),Vi(t,n,r),Qi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,c=n.contextType;c="object"==typeof c&&null!==c?Si(c):_o(t,c=To(n)?Fo:Oo.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==c)&&Hi(t,a,r,c),Fi=!1;var d=t.memoizedState;a.state=d,Mi(t,r,a,o),u=t.memoizedState,l!==r||d!==u||Po.current||Fi?("function"==typeof s&&(Ui(t,n,s,r),u=t.memoizedState),(l=Fi||qi(t,n,l,r,d,u,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=c,r=l):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Ti(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:vi(t.type,l),a.props=c,f=t.pendingProps,d=a.context,u="object"==typeof(u=n.contextType)&&null!==u?Si(u):_o(t,u=To(n)?Fo:Oo.current);var p=n.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==f||d!==u)&&Hi(t,a,r,u),Fi=!1,d=t.memoizedState,a.state=d,Mi(t,r,a,o);var h=t.memoizedState;l!==f||d!==h||Po.current||Fi?("function"==typeof p&&(Ui(t,n,p,r),h=t.memoizedState),(c=Fi||qi(t,n,c,r,d,h,u)||!1)?(s||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=u,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Ol(e,t,n,r,i,o)}function Ol(e,t,n,r,o,i){Sl(e,t);var a=0!=(128&t.flags);if(!r&&!a)return o&&Mo(t,n,!1),Hl(e,t,i);r=t.stateNode,Al.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Ki(t,e.child,null,i),t.child=Ki(t,null,l,i)):wl(e,t,l,i),t.memoizedState=r.state,o&&Mo(t,n,!0),t.child}function Pl(e){var t=e.stateNode;t.pendingContext?No(0,t.pendingContext,t.pendingContext!==t.context):t.context&&No(0,t.context,!1),oa(e,t.containerInfo)}function Fl(e,t,n,r,o){return hi(),mi(o),t.flags|=256,wl(e,t,n,r),t.child}var _l,Tl,Ll,Nl,jl={dehydrated:null,treeContext:null,retryLane:0};function Rl(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ml(e,t,n){var r,o=t.pendingProps,a=ua.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Bo(ua,1&a),null===e)return si(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=o.children,e=o.fallback,l?(o=t.mode,l=t.child,u={mode:"hidden",children:u},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=u):l=Rc(u,o,0,null),e=jc(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Rl(n),t.memoizedState=jl,e):zl(t,u));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,o,a,l){if(n)return 256&t.flags?(t.flags&=-257,Dl(e,t,l,r=fl(Error(i(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,o=t.mode,r=Rc({mode:"visible",children:r.children},o,0,null),(a=jc(a,o,l,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,0!=(1&t.mode)&&Ki(t,e.child,null,l),t.child.memoizedState=Rl(l),t.memoizedState=jl,a);if(0==(1&t.mode))return Dl(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var u=r.dgst;return r=u,Dl(e,t,l,r=fl(a=Error(i(419)),r,void 0))}if(u=0!=(l&e.childLanes),bl||u){if(null!==(r=Pu)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|l))?0:o)&&o!==a.retryLane&&(a.retryLane=o,Pi(e,o),rc(r,e,o,-1))}return gc(),Dl(e,t,l,r=fl(Error(i(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Ic.bind(null,e),o._reactRetry=t,null):(e=a.treeContext,oi=co(o.nextSibling),ri=t,ii=!0,ai=null,null!==e&&(Go[$o++]=Ko,Go[$o++]=Jo,Go[$o++]=Xo,Ko=e.id,Jo=e.overflow,Xo=t),(t=zl(t,r.children)).flags|=4096,t)}(e,t,u,o,r,a,n);if(l){l=o.fallback,u=t.mode,r=(a=e.child).sibling;var c={mode:"hidden",children:o.children};return 0==(1&u)&&t.child!==a?((o=t.child).childLanes=0,o.pendingProps=c,t.deletions=null):(o=Lc(a,c)).subtreeFlags=14680064&a.subtreeFlags,null!==r?l=Lc(r,l):(l=jc(l,u,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,u=null===(u=e.child.memoizedState)?Rl(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=jl,o}return e=(l=e.child).sibling,o=Lc(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function zl(e,t){return(t=Rc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Dl(e,t,n,r){return null!==r&&mi(r),Ki(t,e.child,null,n),(e=zl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Ul(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ci(e.return,t,n)}function Wl(e,t,n,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function ql(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(wl(e,t,r.children,n),0!=(2&(r=ua.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ul(e,n,t);else if(19===e.tag)Ul(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Bo(ua,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ca(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Wl(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ca(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Wl(t,!0,n,null,i);break;case"together":Wl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Vl(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ru|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Lc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Lc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ql(e,t){if(!ii)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Yl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Gl(e,t,n){var r=t.pendingProps;switch(ni(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Yl(t),null;case 1:case 17:return To(t.type)&&Lo(),Yl(t),null;case 3:return r=t.stateNode,ia(),So(Po),So(Oo),fa(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(di(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ai&&(lc(ai),ai=null))),Tl(e,t),Yl(t),null;case 5:la(t);var o=ra(na.current);if(n=t.type,null!==e&&null!=t.stateNode)Ll(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Yl(t),null}if(e=ra(ea.current),di(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[po]=t,r[ho]=a,e=0!=(1&t.mode),n){case"dialog":zr("cancel",r),zr("close",r);break;case"iframe":case"object":case"embed":zr("load",r);break;case"video":case"audio":for(o=0;o<Nr.length;o++)zr(Nr[o],r);break;case"source":zr("error",r);break;case"img":case"image":case"link":zr("error",r),zr("load",r);break;case"details":zr("toggle",r);break;case"input":X(r,a),zr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},zr("invalid",r);break;case"textarea":oe(r,a),zr("invalid",r)}for(var u in ye(n,a),o=null,a)if(a.hasOwnProperty(u)){var c=a[u];"children"===u?"string"==typeof c?r.textContent!==c&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,c,e),o=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,c,e),o=["children",""+c]):l.hasOwnProperty(u)&&null!=c&&"onScroll"===u&&zr("scroll",r)}switch(n){case"input":Q(r),Z(r,a,!0);break;case"textarea":Q(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Zr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[po]=t,e[ho]=r,_l(e,t,!1,!1),t.stateNode=e;e:{switch(u=Ae(n,r),n){case"dialog":zr("cancel",e),zr("close",e),o=r;break;case"iframe":case"object":case"embed":zr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Nr.length;o++)zr(Nr[o],e);o=r;break;case"source":zr("error",e),o=r;break;case"img":case"image":case"link":zr("error",e),zr("load",e),o=r;break;case"details":zr("toggle",e),o=r;break;case"input":X(e,r),o=$(e,r),zr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=R({},r,{value:void 0}),zr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),zr("invalid",e)}for(a in ye(n,o),c=o)if(c.hasOwnProperty(a)){var s=c[a];"style"===a?ge(e,s):"dangerouslySetInnerHTML"===a?null!=(s=s?s.__html:void 0)&&fe(e,s):"children"===a?"string"==typeof s?("textarea"!==n||""!==s)&&de(e,s):"number"==typeof s&&de(e,""+s):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(l.hasOwnProperty(a)?null!=s&&"onScroll"===a&&zr("scroll",e):null!=s&&A(e,a,s,u))}switch(n){case"input":Q(e),Z(e,r,!1);break;case"textarea":Q(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Yl(t),null;case 6:if(e&&null!=t.stateNode)Nl(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(n=ra(na.current),ra(ea.current),di(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(a=r.nodeValue!==n)&&null!==(e=ri))switch(e.tag){case 3:Jr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!=(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Yl(t),null;case 13:if(So(ua),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ii&&null!==oi&&0!=(1&t.mode)&&0==(128&t.flags))pi(),hi(),t.flags|=98560,a=!1;else if(a=di(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(i(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(i(317));a[po]=t}else hi(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Yl(t),a=!1}else null!==ai&&(lc(ai),ai=null),a=!0;if(!a)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ua.current)?0===Nu&&(Nu=3):gc())),null!==t.updateQueue&&(t.flags|=4),Yl(t),null);case 4:return ia(),Tl(e,t),null===e&&Wr(t.stateNode.containerInfo),Yl(t),null;case 10:return Ei(t.type._context),Yl(t),null;case 19:if(So(ua),null===(a=t.memoizedState))return Yl(t),null;if(r=0!=(128&t.flags),null===(u=a.rendering))if(r)Ql(a,!1);else{if(0!==Nu||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=ca(e))){for(t.flags|=128,Ql(a,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(u=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=u.childLanes,a.lanes=u.lanes,a.child=u.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=u.memoizedProps,a.memoizedState=u.memoizedState,a.updateQueue=u.updateQueue,a.type=u.type,e=u.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Bo(ua,1&ua.current|2),t.child}e=e.sibling}null!==a.tail&&Ke()>qu&&(t.flags|=128,r=!0,Ql(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ca(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Ql(a,!0),null===a.tail&&"hidden"===a.tailMode&&!u.alternate&&!ii)return Yl(t),null}else 2*Ke()-a.renderingStartTime>qu&&1073741824!==n&&(t.flags|=128,r=!0,Ql(a,!1),t.lanes=4194304);a.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=a.last)?n.sibling=u:t.child=u,a.last=u)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Ke(),t.sibling=null,n=ua.current,Bo(ua,r?1&n|2:1&n),t):(Yl(t),null);case 22:case 23:return dc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Tu)&&(Yl(t),6&t.subtreeFlags&&(t.flags|=8192)):Yl(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}function $l(e,t){switch(ni(t),t.tag){case 1:return To(t.type)&&Lo(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ia(),So(Po),So(Oo),fa(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return la(t),null;case 13:if(So(ua),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));hi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return So(ua),null;case 4:return ia(),null;case 10:return Ei(t.type._context),null;case 22:case 23:return dc(),null;default:return null}}_l=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Tl=function(){},Ll=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ra(ea.current);var i,a=null;switch(n){case"input":o=$(e,o),r=$(e,r),a=[];break;case"select":o=R({},o,{value:void 0}),r=R({},r,{value:void 0}),a=[];break;case"textarea":o=re(e,o),r=re(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(s in ye(n,r),n=null,o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&null!=o[s])if("style"===s){var u=o[s];for(i in u)u.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?a||(a=[]):(a=a||[]).push(s,null));for(s in r){var c=r[s];if(u=null!=o?o[s]:void 0,r.hasOwnProperty(s)&&c!==u&&(null!=c||null!=u))if("style"===s)if(u){for(i in u)!u.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&u[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(a||(a=[]),a.push(s,n)),n=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(a=a||[]).push(s,c)):"children"===s?"string"!=typeof c&&"number"!=typeof c||(a=a||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(l.hasOwnProperty(s)?(null!=c&&"onScroll"===s&&zr("scroll",e),a||u===c||(a=[])):(a=a||[]).push(s,c))}n&&(a=a||[]).push("style",n);var s=a;(t.updateQueue=s)&&(t.flags|=4)}},Nl=function(e,t,n,r){n!==r&&(t.flags|=4)};var Xl=!1,Kl=!1,Jl="function"==typeof WeakSet?WeakSet:Set,Zl=null;function eu(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){kc(e,t,n)}else n.current=null}function tu(e,t,n){try{n()}catch(n){kc(e,t,n)}}var nu=!1;function ru(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&tu(t,n,i)}o=o.next}while(o!==r)}}function ou(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function iu(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function au(e){var t=e.alternate;null!==t&&(e.alternate=null,au(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[go],delete t[vo],delete t[yo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||lu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function cu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}var fu=null,du=!1;function pu(e,t,n){for(n=n.child;null!==n;)hu(e,t,n),n=n.sibling}function hu(e,t,n){if(it&&"function"==typeof it.onCommitFiberUnmount)try{it.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Kl||eu(n,t);case 6:var r=fu,o=du;fu=null,pu(e,t,n),du=o,null!==(fu=r)&&(du?(e=fu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):fu.removeChild(n.stateNode));break;case 18:null!==fu&&(du?(e=fu,n=n.stateNode,8===e.nodeType?uo(e.parentNode,n):1===e.nodeType&&uo(e,n),Wt(e)):uo(fu,n.stateNode));break;case 4:r=fu,o=du,fu=n.stateNode.containerInfo,du=!0,pu(e,t,n),fu=r,du=o;break;case 0:case 11:case 14:case 15:if(!Kl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,void 0!==a&&(0!=(2&i)||0!=(4&i))&&tu(n,t,a),o=o.next}while(o!==r)}pu(e,t,n);break;case 1:if(!Kl&&(eu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){kc(n,t,e)}pu(e,t,n);break;case 21:pu(e,t,n);break;case 22:1&n.mode?(Kl=(r=Kl)||null!==n.memoizedState,pu(e,t,n),Kl=r):pu(e,t,n);break;default:pu(e,t,n)}}function mu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Jl),t.forEach((function(t){var r=Oc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function gu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var a=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:fu=u.stateNode,du=!1;break e;case 3:case 4:fu=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===fu)throw Error(i(160));hu(a,l,o),fu=null,du=!1;var c=o.alternate;null!==c&&(c.return=null),o.return=null}catch(e){kc(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vu(t,e),t=t.sibling}function vu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gu(t,e),yu(e),4&r){try{ru(3,e,e.return),ou(3,e)}catch(t){kc(e,e.return,t)}try{ru(5,e,e.return)}catch(t){kc(e,e.return,t)}}break;case 1:gu(t,e),yu(e),512&r&&null!==n&&eu(n,n.return);break;case 5:if(gu(t,e),yu(e),512&r&&null!==n&&eu(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){kc(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var a=e.memoizedProps,l=null!==n?n.memoizedProps:a,u=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===u&&"radio"===a.type&&null!=a.name&&K(o,a),Ae(u,l);var s=Ae(u,a);for(l=0;l<c.length;l+=2){var f=c[l],d=c[l+1];"style"===f?ge(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):A(o,f,d,s)}switch(u){case"input":J(o,a);break;case"textarea":ie(o,a);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?ne(o,!!a.multiple,h,!1):p!==!!a.multiple&&(null!=a.defaultValue?ne(o,!!a.multiple,a.defaultValue,!0):ne(o,!!a.multiple,a.multiple?[]:"",!1))}o[ho]=a}catch(t){kc(e,e.return,t)}}break;case 6:if(gu(t,e),yu(e),4&r){if(null===e.stateNode)throw Error(i(162));o=e.stateNode,a=e.memoizedProps;try{o.nodeValue=a}catch(t){kc(e,e.return,t)}}break;case 3:if(gu(t,e),yu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Wt(t.containerInfo)}catch(t){kc(e,e.return,t)}break;case 4:default:gu(t,e),yu(e);break;case 13:gu(t,e),yu(e),8192&(o=e.child).flags&&(a=null!==o.memoizedState,o.stateNode.isHidden=a,!a||null!==o.alternate&&null!==o.alternate.memoizedState||(Wu=Ke())),4&r&&mu(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Kl=(s=Kl)||f,gu(t,e),Kl=s):gu(t,e),yu(e),8192&r){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!f&&0!=(1&e.mode))for(Zl=e,f=e.child;null!==f;){for(d=Zl=f;null!==Zl;){switch(h=(p=Zl).child,p.tag){case 0:case 11:case 14:case 15:ru(4,p,p.return);break;case 1:eu(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){kc(r,n,e)}}break;case 5:eu(p,p.return);break;case 22:if(null!==p.memoizedState){xu(d);continue}}null!==h?(h.return=p,Zl=h):xu(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,s?"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none":(u=d.stateNode,l=null!=(c=d.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,u.style.display=me("display",l))}catch(t){kc(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=s?"":d.memoizedProps}catch(t){kc(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:gu(t,e),yu(e),4&r&&mu(e);case 21:}}function yu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(lu(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),su(e,uu(e),o);break;case 3:case 4:var a=r.stateNode.containerInfo;cu(e,uu(e),a);break;default:throw Error(i(161))}}catch(t){kc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function Au(e,t,n){Zl=e,bu(e,t,n)}function bu(e,t,n){for(var r=0!=(1&e.mode);null!==Zl;){var o=Zl,i=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||Xl;if(!a){var l=o.alternate,u=null!==l&&null!==l.memoizedState||Kl;l=Xl;var c=Kl;if(Xl=a,(Kl=u)&&!c)for(Zl=o;null!==Zl;)u=(a=Zl).child,22===a.tag&&null!==a.memoizedState?Eu(o):null!==u?(u.return=a,Zl=u):Eu(o);for(;null!==i;)Zl=i,bu(i,t,n),i=i.sibling;Zl=o,Xl=l,Kl=c}wu(e)}else 0!=(8772&o.subtreeFlags)&&null!==i?(i.return=o,Zl=i):wu(e)}}function wu(e){for(;null!==Zl;){var t=Zl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Kl||ou(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Kl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:vi(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&zi(t,a,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}zi(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var s=t.alternate;if(null!==s){var f=s.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Wt(d)}}}break;default:throw Error(i(163))}Kl||512&t.flags&&iu(t)}catch(e){kc(t,t.return,e)}}if(t===e){Zl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zl=n;break}Zl=t.return}}function xu(e){for(;null!==Zl;){var t=Zl;if(t===e){Zl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zl=n;break}Zl=t.return}}function Eu(e){for(;null!==Zl;){var t=Zl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ou(4,t)}catch(e){kc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){kc(t,o,e)}}var i=t.return;try{iu(t)}catch(e){kc(t,i,e)}break;case 5:var a=t.return;try{iu(t)}catch(e){kc(t,a,e)}}}catch(e){kc(t,t.return,e)}if(t===e){Zl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Zl=l;break}Zl=t.return}}var Cu,ku=Math.ceil,Su=b.ReactCurrentDispatcher,Bu=b.ReactCurrentOwner,Iu=b.ReactCurrentBatchConfig,Ou=0,Pu=null,Fu=null,_u=0,Tu=0,Lu=ko(0),Nu=0,ju=null,Ru=0,Mu=0,zu=0,Du=null,Uu=null,Wu=0,qu=1/0,Vu=null,Hu=!1,Qu=null,Yu=null,Gu=!1,$u=null,Xu=0,Ku=0,Ju=null,Zu=-1,ec=0;function tc(){return 0!=(6&Ou)?Ke():-1!==Zu?Zu:Zu=Ke()}function nc(e){return 0==(1&e.mode)?1:0!=(2&Ou)&&0!==_u?_u&-_u:null!==gi.transition?(0===ec&&(ec=mt()),ec):0!==(e=At)?e:e=void 0===(e=window.event)?16:Xt(e.type)}function rc(e,t,n,r){if(50<Ku)throw Ku=0,Ju=null,Error(i(185));vt(e,n,r),0!=(2&Ou)&&e===Pu||(e===Pu&&(0==(2&Ou)&&(Mu|=n),4===Nu&&uc(e,_u)),oc(e,r),1===n&&0===Ou&&0==(1&t.mode)&&(qu=Ke()+500,Do&&qo()))}function oc(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-at(i),l=1<<a,u=o[a];-1===u?0!=(l&n)&&0==(l&r)||(o[a]=pt(l,t)):u<=t&&(e.expiredLanes|=l),i&=~l}}(e,t);var r=dt(e,e===Pu?_u:0);if(0===r)null!==n&&Ge(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ge(n),1===t)0===e.tag?function(e){Do=!0,Wo(e)}(cc.bind(null,e)):Wo(cc.bind(null,e)),ao((function(){0==(6&Ou)&&qo()})),n=null;else{switch(bt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Pc(n,ic.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ic(e,t){if(Zu=-1,ec=0,0!=(6&Ou))throw Error(i(327));var n=e.callbackNode;if(Ec()&&e.callbackNode!==n)return null;var r=dt(e,e===Pu?_u:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=vc(e,r);else{t=r;var o=Ou;Ou|=2;var a=mc();for(Pu===e&&_u===t||(Vu=null,qu=Ke()+500,pc(e,t));;)try{Ac();break}catch(t){hc(e,t)}xi(),Su.current=a,Ou=o,null!==Fu?t=0:(Pu=null,_u=0,t=Nu)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=ac(e,o)),1===t)throw n=ju,pc(e,0),uc(e,r),oc(e,Ke()),n;if(6===t)uc(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!lr(i(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=vc(e,r))&&0!==(a=ht(e))&&(r=a,t=ac(e,a)),1===t))throw n=ju,pc(e,0),uc(e,r),oc(e,Ke()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(i(345));case 2:case 5:xc(e,Uu,Vu);break;case 3:if(uc(e,r),(130023424&r)===r&&10<(t=Wu+500-Ke())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){tc(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(xc.bind(null,e,Uu,Vu),t);break}xc(e,Uu,Vu);break;case 4:if(uc(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-at(r);a=1<<l,(l=t[l])>o&&(o=l),r&=~a}if(r=o,10<(r=(120>(r=Ke()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ku(r/1960))-r)){e.timeoutHandle=ro(xc.bind(null,e,Uu,Vu),r);break}xc(e,Uu,Vu);break;default:throw Error(i(329))}}}return oc(e,Ke()),e.callbackNode===n?ic.bind(null,e):null}function ac(e,t){var n=Du;return e.current.memoizedState.isDehydrated&&(pc(e,t).flags|=256),2!==(e=vc(e,t))&&(t=Uu,Uu=n,null!==t&&lc(t)),e}function lc(e){null===Uu?Uu=e:Uu.push.apply(Uu,e)}function uc(e,t){for(t&=~zu,t&=~Mu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function cc(e){if(0!=(6&Ou))throw Error(i(327));Ec();var t=dt(e,0);if(0==(1&t))return oc(e,Ke()),null;var n=vc(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=ac(e,r))}if(1===n)throw n=ju,pc(e,0),uc(e,t),oc(e,Ke()),n;if(6===n)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,xc(e,Uu,Vu),oc(e,Ke()),null}function sc(e,t){var n=Ou;Ou|=1;try{return e(t)}finally{0===(Ou=n)&&(qu=Ke()+500,Do&&qo())}}function fc(e){null!==$u&&0===$u.tag&&0==(6&Ou)&&Ec();var t=Ou;Ou|=1;var n=Iu.transition,r=At;try{if(Iu.transition=null,At=1,e)return e()}finally{At=r,Iu.transition=n,0==(6&(Ou=t))&&qo()}}function dc(){Tu=Lu.current,So(Lu)}function pc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Fu)for(n=Fu.return;null!==n;){var r=n;switch(ni(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Lo();break;case 3:ia(),So(Po),So(Oo),fa();break;case 5:la(r);break;case 4:ia();break;case 13:case 19:So(ua);break;case 10:Ei(r.type._context);break;case 22:case 23:dc()}n=n.return}if(Pu=e,Fu=e=Lc(e.current,null),_u=Tu=t,Nu=0,ju=null,zu=Mu=Ru=0,Uu=Du=null,null!==Bi){for(t=0;t<Bi.length;t++)if(null!==(r=(n=Bi[t]).interleaved)){n.interleaved=null;var o=r.next,i=n.pending;if(null!==i){var a=i.next;i.next=o,r.next=a}n.pending=r}Bi=null}return e}function hc(e,t){for(;;){var n=Fu;try{if(xi(),da.current=al,ya){for(var r=ma.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ya=!1}if(ha=0,va=ga=ma=null,Aa=!1,ba=0,Bu.current=null,null===n||null===n.return){Nu=1,ju=t,Fu=null;break}e:{var a=e,l=n.return,u=n,c=t;if(t=_u,u.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var s=c,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=vl(l);if(null!==h){h.flags&=-257,yl(h,l,u,0,t),1&h.mode&&gl(a,s,t),c=s;var m=(t=h).updateQueue;if(null===m){var g=new Set;g.add(c),t.updateQueue=g}else m.add(c);break e}if(0==(1&t)){gl(a,s,t),gc();break e}c=Error(i(426))}else if(ii&&1&u.mode){var v=vl(l);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),yl(v,l,u,0,t),mi(sl(c,u));break e}}a=c=sl(c,u),4!==Nu&&(Nu=2),null===Du?Du=[a]:Du.push(a),a=l;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,Ri(a,hl(0,c,t));break e;case 1:u=c;var y=a.type,A=a.stateNode;if(0==(128&a.flags)&&("function"==typeof y.getDerivedStateFromError||null!==A&&"function"==typeof A.componentDidCatch&&(null===Yu||!Yu.has(A)))){a.flags|=65536,t&=-t,a.lanes|=t,Ri(a,ml(a,u,t));break e}}a=a.return}while(null!==a)}wc(n)}catch(e){t=e,Fu===n&&null!==n&&(Fu=n=n.return);continue}break}}function mc(){var e=Su.current;return Su.current=al,null===e?al:e}function gc(){0!==Nu&&3!==Nu&&2!==Nu||(Nu=4),null===Pu||0==(268435455&Ru)&&0==(268435455&Mu)||uc(Pu,_u)}function vc(e,t){var n=Ou;Ou|=2;var r=mc();for(Pu===e&&_u===t||(Vu=null,pc(e,t));;)try{yc();break}catch(t){hc(e,t)}if(xi(),Ou=n,Su.current=r,null!==Fu)throw Error(i(261));return Pu=null,_u=0,Nu}function yc(){for(;null!==Fu;)bc(Fu)}function Ac(){for(;null!==Fu&&!$e();)bc(Fu)}function bc(e){var t=Cu(e.alternate,e,Tu);e.memoizedProps=e.pendingProps,null===t?wc(e):Fu=t,Bu.current=null}function wc(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Gl(n,t,Tu)))return void(Fu=n)}else{if(null!==(n=$l(n,t)))return n.flags&=32767,void(Fu=n);if(null===e)return Nu=6,void(Fu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Fu=t);Fu=t=e}while(null!==t);0===Nu&&(Nu=5)}function xc(e,t,n){var r=At,o=Iu.transition;try{Iu.transition=null,At=1,function(e,t,n,r){do{Ec()}while(null!==$u);if(0!=(6&Ou))throw Error(i(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-at(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}(e,a),e===Pu&&(Fu=Pu=null,_u=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Gu||(Gu=!0,Pc(tt,(function(){return Ec(),null}))),a=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||a){a=Iu.transition,Iu.transition=null;var l=At;At=1;var u=Ou;Ou|=4,Bu.current=null,function(e,t){if(eo=Vt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var l=0,u=-1,c=-1,s=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(u=l+o),d!==a||0!==r&&3!==d.nodeType||(c=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++s===o&&(u=l),p===a&&++f===r&&(c=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===c?null:{start:u,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Vt=!1,Zl=t;null!==Zl;)if(e=(t=Zl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zl=e;else for(;null!==Zl;){t=Zl;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,v=m.memoizedState,y=t.stateNode,A=y.getSnapshotBeforeUpdate(t.elementType===t.type?g:vi(t.type,g),v);y.__reactInternalSnapshotBeforeUpdate=A}break;case 3:var b=t.stateNode.containerInfo;1===b.nodeType?b.textContent="":9===b.nodeType&&b.documentElement&&b.removeChild(b.documentElement);break;default:throw Error(i(163))}}catch(e){kc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zl=e;break}Zl=t.return}m=nu,nu=!1}(e,n),vu(n,e),hr(to),Vt=!!eo,to=eo=null,e.current=n,Au(n,e,o),Xe(),Ou=u,At=l,Iu.transition=a}else e.current=n;if(Gu&&(Gu=!1,$u=e,Xu=o),0===(a=e.pendingLanes)&&(Yu=null),function(e){if(it&&"function"==typeof it.onCommitFiberRoot)try{it.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),oc(e,Ke()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Hu)throw Hu=!1,e=Qu,Qu=null,e;0!=(1&Xu)&&0!==e.tag&&Ec(),0!=(1&(a=e.pendingLanes))?e===Ju?Ku++:(Ku=0,Ju=e):Ku=0,qo()}(e,t,n,r)}finally{Iu.transition=o,At=r}return null}function Ec(){if(null!==$u){var e=bt(Xu),t=Iu.transition,n=At;try{if(Iu.transition=null,At=16>e?16:e,null===$u)var r=!1;else{if(e=$u,$u=null,Xu=0,0!=(6&Ou))throw Error(i(331));var o=Ou;for(Ou|=4,Zl=e.current;null!==Zl;){var a=Zl,l=a.child;if(0!=(16&Zl.flags)){var u=a.deletions;if(null!==u){for(var c=0;c<u.length;c++){var s=u[c];for(Zl=s;null!==Zl;){var f=Zl;switch(f.tag){case 0:case 11:case 15:ru(8,f,a)}var d=f.child;if(null!==d)d.return=f,Zl=d;else for(;null!==Zl;){var p=(f=Zl).sibling,h=f.return;if(au(f),f===s){Zl=null;break}if(null!==p){p.return=h,Zl=p;break}Zl=h}}}var m=a.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var v=g.sibling;g.sibling=null,g=v}while(null!==g)}}Zl=a}}if(0!=(2064&a.subtreeFlags)&&null!==l)l.return=a,Zl=l;else e:for(;null!==Zl;){if(0!=(2048&(a=Zl).flags))switch(a.tag){case 0:case 11:case 15:ru(9,a,a.return)}var y=a.sibling;if(null!==y){y.return=a.return,Zl=y;break e}Zl=a.return}}var A=e.current;for(Zl=A;null!==Zl;){var b=(l=Zl).child;if(0!=(2064&l.subtreeFlags)&&null!==b)b.return=l,Zl=b;else e:for(l=A;null!==Zl;){if(0!=(2048&(u=Zl).flags))try{switch(u.tag){case 0:case 11:case 15:ou(9,u)}}catch(e){kc(u,u.return,e)}if(u===l){Zl=null;break e}var w=u.sibling;if(null!==w){w.return=u.return,Zl=w;break e}Zl=u.return}}if(Ou=o,qo(),it&&"function"==typeof it.onPostCommitFiberRoot)try{it.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{At=n,Iu.transition=t}}return!1}function Cc(e,t,n){e=Ni(e,t=hl(0,t=sl(n,t),1),1),t=tc(),null!==e&&(vt(e,1,t),oc(e,t))}function kc(e,t,n){if(3===e.tag)Cc(e,e,n);else for(;null!==t;){if(3===t.tag){Cc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Yu||!Yu.has(r))){t=Ni(t,e=ml(t,e=sl(n,e),1),1),e=tc(),null!==t&&(vt(t,1,e),oc(t,e));break}}t=t.return}}function Sc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tc(),e.pingedLanes|=e.suspendedLanes&n,Pu===e&&(_u&n)===n&&(4===Nu||3===Nu&&(130023424&_u)===_u&&500>Ke()-Wu?pc(e,0):zu|=n),oc(e,t)}function Bc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=st,0==(130023424&(st<<=1))&&(st=4194304)));var n=tc();null!==(e=Pi(e,t))&&(vt(e,t,n),oc(e,n))}function Ic(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Bc(e,n)}function Oc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(t),Bc(e,n)}function Pc(e,t){return Ye(e,t)}function Fc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function _c(e,t,n,r){return new Fc(e,t,n,r)}function Tc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Lc(e,t){var n=e.alternate;return null===n?((n=_c(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Nc(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)Tc(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case E:return jc(n.children,o,a,t);case C:l=8,o|=8;break;case k:return(e=_c(12,n,t,2|o)).elementType=k,e.lanes=a,e;case O:return(e=_c(13,n,t,o)).elementType=O,e.lanes=a,e;case P:return(e=_c(19,n,t,o)).elementType=P,e.lanes=a,e;case T:return Rc(n,o,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:l=10;break e;case B:l=9;break e;case I:l=11;break e;case F:l=14;break e;case _:l=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=_c(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function jc(e,t,n,r){return(e=_c(7,e,r,t)).lanes=n,e}function Rc(e,t,n,r){return(e=_c(22,e,r,t)).elementType=T,e.lanes=n,e.stateNode={isHidden:!1},e}function Mc(e,t,n){return(e=_c(6,e,null,t)).lanes=n,e}function zc(e,t,n){return(t=_c(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Dc(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Uc(e,t,n,r,o,i,a,l,u){return e=new Dc(e,t,n,l,u),1===t?(t=1,!0===i&&(t|=8)):t=0,i=_c(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},_i(i),e}function Wc(e){if(!e)return Io;e:{if(We(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(To(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var n=e.type;if(To(n))return jo(e,n,t)}return t}function qc(e,t,n,r,o,i,a,l,u){return(e=Uc(n,r,!0,e,0,i,0,l,u)).context=Wc(null),n=e.current,(i=Li(r=tc(),o=nc(n))).callback=null!=t?t:null,Ni(n,i,o),e.current.lanes=o,vt(e,o,r),oc(e,r),e}function Vc(e,t,n,r){var o=t.current,i=tc(),a=nc(o);return n=Wc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Li(i,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Ni(o,t,a))&&(rc(e,o,a,i),ji(e,o,a)),a}function Hc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Qc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Yc(e,t){Qc(e,t),(e=e.alternate)&&Qc(e,t)}Cu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Po.current)bl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return bl=!1,function(e,t,n){switch(t.tag){case 3:Pl(t),hi();break;case 5:aa(t);break;case 1:To(t.type)&&Ro(t);break;case 4:oa(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Bo(yi,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Bo(ua,1&ua.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ml(e,t,n):(Bo(ua,1&ua.current),null!==(e=Hl(e,t,n))?e.sibling:null);Bo(ua,1&ua.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return ql(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Bo(ua,ua.current),r)break;return null;case 22:case 23:return t.lanes=0,kl(e,t,n)}return Hl(e,t,n)}(e,t,n);bl=0!=(131072&e.flags)}else bl=!1,ii&&0!=(1048576&t.flags)&&ei(t,Yo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Vl(e,t),e=t.pendingProps;var o=_o(t,Oo.current);ki(t,n),o=Ca(null,t,r,e,o,n);var a=ka();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,To(r)?(a=!0,Ro(t)):a=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,_i(t),o.updater=Wi,t.stateNode=o,o._reactInternals=t,Qi(t,r,e,n),t=Ol(null,t,r,!0,a,n)):(t.tag=0,ii&&a&&ti(t),wl(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Vl(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Tc(e)?1:0;if(null!=e){if((e=e.$$typeof)===I)return 11;if(e===F)return 14}return 2}(r),e=vi(r,e),o){case 0:t=Bl(null,t,r,e,n);break e;case 1:t=Il(null,t,r,e,n);break e;case 11:t=xl(null,t,r,e,n);break e;case 14:t=El(null,t,r,vi(r.type,e),n);break e}throw Error(i(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Bl(e,t,r,o=t.elementType===r?o:vi(r,o),n);case 1:return r=t.type,o=t.pendingProps,Il(e,t,r,o=t.elementType===r?o:vi(r,o),n);case 3:e:{if(Pl(t),null===e)throw Error(i(387));r=t.pendingProps,o=(a=t.memoizedState).element,Ti(e,t),Mi(t,r,null,n);var l=t.memoizedState;if(r=l.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Fl(e,t,r,n,o=sl(Error(i(423)),t));break e}if(r!==o){t=Fl(e,t,r,n,o=sl(Error(i(424)),t));break e}for(oi=co(t.stateNode.containerInfo.firstChild),ri=t,ii=!0,ai=null,n=Ji(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(hi(),r===o){t=Hl(e,t,n);break e}wl(e,t,r,n)}t=t.child}return t;case 5:return aa(t),null===e&&si(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==a&&no(r,a)&&(t.flags|=32),Sl(e,t),wl(e,t,l,n),t.child;case 6:return null===e&&si(t),null;case 13:return Ml(e,t,n);case 4:return oa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ki(t,null,r,n):wl(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,xl(e,t,r,o=t.elementType===r?o:vi(r,o),n);case 7:return wl(e,t,t.pendingProps,n),t.child;case 8:case 12:return wl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,a=t.memoizedProps,l=o.value,Bo(yi,r._currentValue),r._currentValue=l,null!==a)if(lr(a.value,l)){if(a.children===o.children&&!Po.current){t=Hl(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var u=a.dependencies;if(null!==u){l=a.child;for(var c=u.firstContext;null!==c;){if(c.context===r){if(1===a.tag){(c=Li(-1,n&-n)).tag=2;var s=a.updateQueue;if(null!==s){var f=(s=s.shared).pending;null===f?c.next=c:(c.next=f.next,f.next=c),s.pending=c}}a.lanes|=n,null!==(c=a.alternate)&&(c.lanes|=n),Ci(a.return,n,t),u.lanes|=n;break}c=c.next}}else if(10===a.tag)l=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(l=a.return))throw Error(i(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),Ci(l,n,t),l=a.sibling}else l=a.child;if(null!==l)l.return=a;else for(l=a;null!==l;){if(l===t){l=null;break}if(null!==(a=l.sibling)){a.return=l.return,l=a;break}l=l.return}a=l}wl(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,ki(t,n),r=r(o=Si(o)),t.flags|=1,wl(e,t,r,n),t.child;case 14:return o=vi(r=t.type,t.pendingProps),El(e,t,r,o=vi(r.type,o),n);case 15:return Cl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:vi(r,o),Vl(e,t),t.tag=1,To(r)?(e=!0,Ro(t)):e=!1,ki(t,n),Vi(t,r,o),Qi(t,r,o,n),Ol(null,t,r,!0,e,n);case 19:return ql(e,t,n);case 22:return kl(e,t,n)}throw Error(i(156,t.tag))};var Gc="function"==typeof reportError?reportError:function(e){console.error(e)};function $c(e){this._internalRoot=e}function Xc(e){this._internalRoot=e}function Kc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Jc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zc(){}function es(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if("function"==typeof o){var l=o;o=function(){var e=Hc(a);l.call(e)}}Vc(t,a,e,o)}else a=function(e,t,n,r,o){if(o){if("function"==typeof r){var i=r;r=function(){var e=Hc(a);i.call(e)}}var a=qc(t,r,e,0,null,!1,0,"",Zc);return e._reactRootContainer=a,e[mo]=a.current,Wr(8===e.nodeType?e.parentNode:e),fc(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=Hc(u);l.call(e)}}var u=Uc(e,0,!1,null,0,!1,0,"",Zc);return e._reactRootContainer=u,e[mo]=u.current,Wr(8===e.nodeType?e.parentNode:e),fc((function(){Vc(t,u,n,r)})),u}(n,t,e,o,r);return Hc(a)}Xc.prototype.render=$c.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));Vc(e,t,null,null)},Xc.prototype.unmount=$c.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;fc((function(){Vc(null,e,null,null)})),t[mo]=null}},Xc.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ct();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Tt.length&&0!==t&&t<Tt[n].priority;n++);Tt.splice(n,0,e),0===n&&Rt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(yt(t,1|n),oc(t,Ke()),0==(6&Ou)&&(qu=Ke()+500,qo()))}break;case 13:fc((function(){var t=Pi(e,1);if(null!==t){var n=tc();rc(t,e,1,n)}})),Yc(e,1)}},xt=function(e){if(13===e.tag){var t=Pi(e,134217728);null!==t&&rc(t,e,134217728,tc()),Yc(e,134217728)}},Et=function(e){if(13===e.tag){var t=nc(e),n=Pi(e,t);null!==n&&rc(n,e,t,tc()),Yc(e,t)}},Ct=function(){return At},kt=function(e,t){var n=At;try{return At=e,t()}finally{At=n}},xe=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=xo(r);if(!o)throw Error(i(90));Y(r),J(r,o)}}}break;case"textarea":ie(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ie=sc,Oe=fc;var ts={usingClientEntryPoint:!1,Events:[bo,wo,xo,Se,Be,sc]},ns={findFiberByHostInstance:Ao,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rs={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:b.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var os=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!os.isDisabled&&os.supportsFiber)try{ot=os.inject(rs),it=os}catch(se){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Kc(t))throw Error(i(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Kc(e))throw Error(i(299));var n=!1,r="",o=Gc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Uc(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Wr(8===e.nodeType?e.parentNode:e),new $c(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return fc(e)},t.hydrate=function(e,t,n){if(!Jc(t))throw Error(i(200));return es(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Kc(e))throw Error(i(405));var r=null!=n&&n.hydratedSources||null,o=!1,a="",l=Gc;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=qc(t,null,e,1,null!=n?n:null,o,0,a,l),e[mo]=t.current,Wr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Xc(t)},t.render=function(e,t,n){if(!Jc(t))throw Error(i(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Jc(e))throw Error(i(40));return!!e._reactRootContainer&&(fc((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=sc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Jc(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return es(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},20745:(e,t,n)=>{"use strict";var r=n(73935);t.s=r.createRoot,r.hydrateRoot},73935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(64448)},79655:(e,t,n)=>{"use strict";n.d(t,{VK:()=>u,rU:()=>s});var r=n(67294),o=n(89250),i=n(12599);function a(){return a=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}const l=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"];function u(e){let{basename:t,children:n,window:a}=e,l=r.useRef();null==l.current&&(l.current=(0,i.lX)({window:a,v5Compat:!0}));let u=l.current,[c,s]=r.useState({action:u.action,location:u.location});return r.useLayoutEffect((()=>u.listen(s)),[u]),r.createElement(o.F0,{basename:t,children:n,location:c.location,navigationType:c.action,navigator:u})}const c="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,s=r.forwardRef((function(e,t){let{onClick:n,relative:u,reloadDocument:s,replace:f,state:d,target:p,to:h,preventScrollReset:m}=e,g=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,l),v="string"==typeof h?h:(0,i.Ep)(h),y=/^[a-z+]+:\/\//i.test(v)||v.startsWith("//"),A=v,b=!1;if(c&&y){let e=new URL(window.location.href),t=v.startsWith("//")?new URL(e.protocol+v):new URL(v);t.origin===e.origin?A=t.pathname+t.search+t.hash:b=!0}let w=(0,o.oQ)(A,{relative:u}),x=function(e,t){let{target:n,replace:a,state:l,preventScrollReset:u,relative:c}=void 0===t?{}:t,s=(0,o.s0)(),f=(0,o.TH)(),d=(0,o.WU)(e,{relative:c});return r.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,n)){t.preventDefault();let n=void 0!==a?a:(0,i.Ep)(f)===(0,i.Ep)(d);s(e,{replace:n,state:l,preventScrollReset:u,relative:c})}}),[f,s,d,a,l,n,e,u,c])}(A,{replace:f,state:d,target:p,preventScrollReset:m,relative:u});return r.createElement("a",a({},g,{href:y?v:w,onClick:b||s?n:function(e){n&&n(e),e.defaultPrevented||x(e)},ref:t,target:p}))}));var f,d;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"})(f||(f={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(d||(d={}))},89250:(e,t,n)=>{"use strict";var r;n.d(t,{AW:()=>O,F0:()=>P,TH:()=>A,UO:()=>w,WU:()=>x,Z5:()=>F,oQ:()=>v,s0:()=>b});var o=n(12599),i=n(67294);function a(){return a=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}"function"==typeof Object.is&&Object.is;const{useState:l,useEffect:u,useLayoutEffect:c,useDebugValue:s}=r||(r=n.t(i,2));"undefined"==typeof window||void 0===window.document||window.document.createElement,(r||(r=n.t(i,2))).useSyncExternalStore;const f=i.createContext(null),d=i.createContext(null),p=i.createContext(null),h=i.createContext(null),m=i.createContext({outlet:null,matches:[]}),g=i.createContext(null);function v(e,t){let{relative:n}=void 0===t?{}:t;y()||(0,o.kG)(!1);let{basename:r,navigator:a}=i.useContext(p),{hash:l,pathname:u,search:c}=x(e,{relative:n}),s=u;return"/"!==r&&(s="/"===u?r:(0,o.RQ)([r,u])),a.createHref({pathname:s,search:c,hash:l})}function y(){return null!=i.useContext(h)}function A(){return y()||(0,o.kG)(!1),i.useContext(h).location}function b(){y()||(0,o.kG)(!1);let{basename:e,navigator:t}=i.useContext(p),{matches:n}=i.useContext(m),{pathname:r}=A(),a=JSON.stringify((0,o.Zq)(n).map((e=>e.pathnameBase))),l=i.useRef(!1);return i.useEffect((()=>{l.current=!0})),i.useCallback((function(n,i){if(void 0===i&&(i={}),!l.current)return;if("number"==typeof n)return void t.go(n);let u=(0,o.pC)(n,JSON.parse(a),r,"path"===i.relative);"/"!==e&&(u.pathname="/"===u.pathname?e:(0,o.RQ)([e,u.pathname])),(i.replace?t.replace:t.push)(u,i.state,i)}),[e,t,a,r])}function w(){let{matches:e}=i.useContext(m),t=e[e.length-1];return t?t.params:{}}function x(e,t){let{relative:n}=void 0===t?{}:t,{matches:r}=i.useContext(m),{pathname:a}=A(),l=JSON.stringify((0,o.Zq)(r).map((e=>e.pathnameBase)));return i.useMemo((()=>(0,o.pC)(e,JSON.parse(l),a,"path"===n)),[e,l,a,n])}function E(){let e=function(){var e;let t=i.useContext(g),n=function(e){let t=i.useContext(d);return t||(0,o.kG)(!1),t}(B.UseRouteError),r=function(e){let t=function(e){let t=i.useContext(m);return t||(0,o.kG)(!1),t}(),n=t.matches[t.matches.length-1];return n.route.id||(0,o.kG)(!1),n.route.id}(B.UseRouteError);return t||(null==(e=n.errors)?void 0:e[r])}(),t=(0,o.WK)(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return i.createElement(i.Fragment,null,i.createElement("h2",null,"Unexpected Application Error!"),i.createElement("h3",{style:{fontStyle:"italic"}},t),n?i.createElement("pre",{style:r},n):null,null)}class C extends i.Component{constructor(e){super(e),this.state={location:e.location,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error,location:e.location}:{error:e.error||t.error,location:t.location}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?i.createElement(m.Provider,{value:this.props.routeContext},i.createElement(g.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function k(e){let{routeContext:t,match:n,children:r}=e,o=i.useContext(f);return o&&o.static&&o.staticContext&&n.route.errorElement&&(o.staticContext._deepestRenderedBoundaryId=n.route.id),i.createElement(m.Provider,{value:t},r)}var S,B,I;function O(e){(0,o.kG)(!1)}function P(e){let{basename:t="/",children:n=null,location:r,navigationType:a=o.aU.Pop,navigator:l,static:u=!1}=e;y()&&(0,o.kG)(!1);let c=t.replace(/^\/*/,"/"),s=i.useMemo((()=>({basename:c,navigator:l,static:u})),[c,l,u]);"string"==typeof r&&(r=(0,o.cP)(r));let{pathname:f="/",search:d="",hash:m="",state:g=null,key:v="default"}=r,A=i.useMemo((()=>{let e=(0,o.Zn)(f,c);return null==e?null:{pathname:e,search:d,hash:m,state:g,key:v}}),[c,f,d,m,g,v]);return null==A?null:i.createElement(p.Provider,{value:s},i.createElement(h.Provider,{children:n,value:{location:A,navigationType:a}}))}function F(e){let{children:t,location:n}=e,r=i.useContext(f);return function(e,t){y()||(0,o.kG)(!1);let{navigator:n}=i.useContext(p),r=i.useContext(d),{matches:l}=i.useContext(m),u=l[l.length-1],c=u?u.params:{},s=(u&&u.pathname,u?u.pathnameBase:"/");u&&u.route;let f,g=A();if(t){var v;let e="string"==typeof t?(0,o.cP)(t):t;"/"===s||(null==(v=e.pathname)?void 0:v.startsWith(s))||(0,o.kG)(!1),f=e}else f=g;let b=f.pathname||"/",w="/"===s?b:b.slice(s.length)||"/",x=(0,o.fp)(e,{pathname:w}),S=function(e,t,n){if(void 0===t&&(t=[]),null==e){if(null==n||!n.errors)return null;e=n.matches}let r=e,a=null==n?void 0:n.errors;if(null!=a){let e=r.findIndex((e=>e.route.id&&(null==a?void 0:a[e.route.id])));e>=0||(0,o.kG)(!1),r=r.slice(0,Math.min(r.length,e+1))}return r.reduceRight(((e,o,l)=>{let u=o.route.id?null==a?void 0:a[o.route.id]:null,c=n?o.route.errorElement||i.createElement(E,null):null,s=t.concat(r.slice(0,l+1)),f=()=>i.createElement(k,{match:o,routeContext:{outlet:e,matches:s}},u?c:void 0!==o.route.element?o.route.element:e);return n&&(o.route.errorElement||0===l)?i.createElement(C,{location:n.location,component:c,error:u,children:f(),routeContext:{outlet:null,matches:s}}):f()}),null)}(x&&x.map((e=>Object.assign({},e,{params:Object.assign({},c,e.params),pathname:(0,o.RQ)([s,n.encodeLocation?n.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?s:(0,o.RQ)([s,n.encodeLocation?n.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),l,r||void 0);return t&&S?i.createElement(h.Provider,{value:{location:a({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:o.aU.Pop}},S):S}(r&&!t?r.router.routes:T(t),n)}!function(e){e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator"}(S||(S={})),function(e){e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator"}(B||(B={})),function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(I||(I={})),new Promise((()=>{}));class _ extends i.Component{constructor(e){super(e),this.state={error:null}}static getDerivedStateFromError(e){return{error:e}}componentDidCatch(e,t){console.error("<Await> caught the following error during render",e,t)}render(){let{children:e,errorElement:t,resolve:n}=this.props,r=null,o=I.pending;if(n instanceof Promise)if(this.state.error){I.error;let e=this.state.error;Promise.reject().catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_error",{get:()=>e})}else n._tracked?void 0!==r._error?I.error:void 0!==r._data?I.success:I.pending:(I.pending,Object.defineProperty(n,"_tracked",{get:()=>!0}),n.then((e=>Object.defineProperty(n,"_data",{get:()=>e})),(e=>Object.defineProperty(n,"_error",{get:()=>e}))));else I.success,Promise.resolve(),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_data",{get:()=>n});if(o===I.error&&r._error instanceof AbortedDeferredError)throw neverSettledPromise;if(o===I.error&&!t)throw r._error;if(o===I.error)return React.createElement(AwaitContext.Provider,{value:r,children:t});if(o===I.success)return React.createElement(AwaitContext.Provider,{value:r,children:e});throw r}}function T(e,t){void 0===t&&(t=[]);let n=[];return i.Children.forEach(e,((e,r)=>{if(!i.isValidElement(e))return;if(e.type===i.Fragment)return void n.push.apply(n,T(e.props.children,t));e.type!==O&&(0,o.kG)(!1),e.props.index&&e.props.children&&(0,o.kG)(!1);let a=[...t,r],l={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,hasErrorBoundary:null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle};e.props.children&&(l.children=T(e.props.children,a)),n.push(l)})),n}},75251:(e,t,n)=>{"use strict";var r=n(67294),o=Symbol.for("react.element"),i=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,u={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,i={},c=null,s=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(s=t.ref),t)a.call(t,r)&&!u.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===i[r]&&(i[r]=t[r]);return{$$typeof:o,type:e,key:c,ref:s,props:i,_owner:l.current}}t.Fragment=i,t.jsx=c,t.jsxs=c},72408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function y(){}function A(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var b=A.prototype=new y;b.constructor=A,m(b,v.prototype),b.isPureReactComponent=!0;var w=Array.isArray,x=Object.prototype.hasOwnProperty,E={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,r){var o,i={},a=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)x.call(t,o)&&!C.hasOwnProperty(o)&&(i[o]=t[o]);var u=arguments.length-2;if(1===u)i.children=r;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];i.children=c}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===i[o]&&(i[o]=u[o]);return{$$typeof:n,type:e,key:a,ref:l,props:i,_owner:E.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var B=/\/+/g;function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,o,i,a){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return a=a(u=e),e=""===i?"."+I(u,0):i,w(a)?(o="",null!=e&&(o=e.replace(B,"$&/")+"/"),O(a,t,o,"",(function(e){return e}))):null!=a&&(S(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,o+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(B,"$&/")+"/")+e)),t.push(a)),1;if(u=0,i=""===i?".":i+":",w(e))for(var c=0;c<e.length;c++){var s=i+I(l=e[c],c);u+=O(l,t,o,s,a)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),c=0;!(l=e.next()).done;)u+=O(l=l.value,t,o,s=i+I(l,c++),a);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function P(e,t,n){if(null==e)return e;var r=[],o=0;return O(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function F(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var _={current:null},T={transition:null},L={ReactCurrentDispatcher:_,ReactCurrentBatchConfig:T,ReactCurrentOwner:E};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=o,t.Profiler=a,t.PureComponent=A,t.StrictMode=i,t.Suspense=s,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),i=e.key,a=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,l=E.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)x.call(t,c)&&!C.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=r;else if(1<c){u=Array(c);for(var s=0;s<c;s++)u[s]=arguments[s+2];o.children=u}return{$$typeof:n,type:e.type,key:i,ref:a,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:F}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=T.transition;T.transition={};try{e()}finally{T.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return _.current.useCallback(e,t)},t.useContext=function(e){return _.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return _.current.useDeferredValue(e)},t.useEffect=function(e,t){return _.current.useEffect(e,t)},t.useId=function(){return _.current.useId()},t.useImperativeHandle=function(e,t,n){return _.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return _.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return _.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return _.current.useMemo(e,t)},t.useReducer=function(e,t,n){return _.current.useReducer(e,t,n)},t.useRef=function(e){return _.current.useRef(e)},t.useState=function(e){return _.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return _.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return _.current.useTransition()},t.version="18.2.0"},67294:(e,t,n)=>{"use strict";e.exports=n(72408)},85893:(e,t,n)=>{"use strict";e.exports=n(75251)},35666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",l=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var i=t&&t.prototype instanceof v?t:v,a=Object.create(i.prototype),l=new P(r||[]);return o(a,"_invoke",{value:S(e,n,l)}),a}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",g={};function v(){}function y(){}function A(){}var b={};c(b,a,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(F([])));x&&x!==n&&r.call(x,a)&&(b=x);var E=A.prototype=v.prototype=Object.create(b);function C(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,i,a,l){var u=f(e[o],e,i);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==typeof s&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,a,l)}),(function(e){n("throw",e,a,l)})):t.resolve(s).then((function(e){c.value=e,a(c)}),(function(e){return n("throw",e,a,l)}))}l(u.arg)}var i;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return i=i?i.then(o,o):o()}})}function S(e,t,n){var r=d;return function(o,i){if(r===h)throw new Error("Generator is already running");if(r===m){if("throw"===o)throw i;return _()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var l=B(a,n);if(l){if(l===g)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var u=f(e,t,n);if("normal"===u.type){if(r=n.done?m:p,u.arg===g)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=m,n.method="throw",n.arg=u.arg)}}}function B(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,B(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var i=f(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,g;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,g):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function I(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(I,this),this.reset(!0)}function F(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:_}}function _(){return{value:t,done:!0}}return y.prototype=A,o(E,"constructor",{value:A,configurable:!0}),o(A,"constructor",{value:y,configurable:!0}),y.displayName=c(A,u,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,A):(e.__proto__=A,c(e,u,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},C(k.prototype),c(k.prototype,l,(function(){return this})),e.AsyncIterator=k,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new k(s(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},C(E),c(E,u,"Generator"),c(E,a,(function(){return this})),c(E,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=F,P.prototype={constructor:P,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(O),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return l.type="throw",l.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],l=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=r.call(a,"catchLoc"),c=r.call(a,"finallyLoc");if(u&&c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,g):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:F(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),g}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},60053:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<i(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var l=2*(r+1)-1,u=e[l],c=l+1,s=e[c];if(0>i(u,n))c<o&&0>i(s,u)?(e[r]=s,e[c]=n,r=c):(e[r]=u,e[l]=n,r=l);else{if(!(c<o&&0>i(s,n)))break e;e[r]=s,e[c]=n,r=c}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var c=[],s=[],f=1,d=null,p=3,h=!1,m=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,A="undefined"!=typeof setImmediate?setImmediate:null;function b(e){for(var t=r(s);null!==t;){if(null===t.callback)o(s);else{if(!(t.startTime<=e))break;o(s),t.sortIndex=t.expirationTime,n(c,t)}t=r(s)}}function w(e){if(g=!1,b(e),!m)if(null!==r(c))m=!0,T(x);else{var t=r(s);null!==t&&L(w,t.startTime-e)}}function x(e,n){m=!1,g&&(g=!1,y(S),S=-1),h=!0;var i=p;try{for(b(n),d=r(c);null!==d&&(!(d.expirationTime>n)||e&&!O());){var a=d.callback;if("function"==typeof a){d.callback=null,p=d.priorityLevel;var l=a(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(c)&&o(c),b(n)}else o(c);d=r(c)}if(null!==d)var u=!0;else{var f=r(s);null!==f&&L(w,f.startTime-n),u=!1}return u}finally{d=null,p=i,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E,C=!1,k=null,S=-1,B=5,I=-1;function O(){return!(t.unstable_now()-I<B)}function P(){if(null!==k){var e=t.unstable_now();I=e;var n=!0;try{n=k(!0,e)}finally{n?E():(C=!1,k=null)}}else C=!1}if("function"==typeof A)E=function(){A(P)};else if("undefined"!=typeof MessageChannel){var F=new MessageChannel,_=F.port2;F.port1.onmessage=P,E=function(){_.postMessage(null)}}else E=function(){v(P,0)};function T(e){k=e,C||(C=!0,E())}function L(e,n){S=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,T(x))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):B=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,i){var a=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?a+i:a,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>a?(e.sortIndex=i,n(s,e),null===r(c)&&e===r(s)&&(g?(y(S),S=-1):g=!0,L(w,i-a))):(e.sortIndex=l,n(c,e),m||h||(m=!0,T(x))),e},t.unstable_shouldYield=O,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},63840:(e,t,n)=>{"use strict";e.exports=n(60053)},11238:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(8765),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(8765,(t=>{m=n(8765),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},40659:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(41590),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(41590,(t=>{m=n(41590),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},28415:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(97656),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(97656,(t=>{m=n(97656),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},80070:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(12825),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(12825,(t=>{m=n(12825),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},67312:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(26373),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(26373,(t=>{m=n(26373),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},30380:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(40770),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(40770,(t=>{m=n(40770),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},30131:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(78299),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(78299,(t=>{m=n(78299),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},50356:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(55847),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(55847,(t=>{m=n(55847),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},81362:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(91304),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(91304,(t=>{m=n(91304),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},82199:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(83344),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(83344,(t=>{m=n(83344),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},41105:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(99985),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(99985,(t=>{m=n(99985),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},93945:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(58513),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(58513,(t=>{m=n(58513),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},85759:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(54224),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(54224,(t=>{m=n(54224),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},57717:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(35148),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(35148,(t=>{m=n(35148),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},32357:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(56653),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(56653,(t=>{m=n(56653),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},32982:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(34754),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(34754,(t=>{m=n(34754),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},46761:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(53847),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(53847,(t=>{m=n(53847),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},82880:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(52883),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(52883,(t=>{m=n(52883),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},82559:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(45436),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(45436,(t=>{m=n(45436),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},34071:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(76892),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(76892,(t=>{m=n(76892),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},78738:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(22767),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(22767,(t=>{m=n(22767),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},71437:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(74838),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(74838,(t=>{m=n(74838),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},76622:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(98727),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(98727,(t=>{m=n(98727),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},87058:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(65574),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(65574,(t=>{m=n(65574),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},10073:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(2617),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(2617,(t=>{m=n(2617),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},45171:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(57561),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(57561,(t=>{m=n(57561),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},60977:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(83352),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(83352,(t=>{m=n(83352),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},37248:(e,t,n)=>{"use strict";var r=n(93379),o=n.n(r),i=n(7795),a=n.n(i),l=n(90569),u=n.n(l),c=n(3565),s=n.n(c),f=n(19216),d=n.n(f),p=n(44589),h=n.n(p),m=n(22519),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d();var v=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,A=y?m:m.default.locals;e.hot.accept(22519,(t=>{m=n(22519),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(A,y?m:m.default.locals,y)?(A=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},93379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],l=0;l<e.length;l++){var u=e[l],c=r.base?u[0]+r.base:u[0],s=i[c]||0,f="".concat(c," ").concat(s);i[c]=s+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var l=n(i[a]);t[l].references--}for(var u=r(e,o),c=0;c<i.length;c++){var s=n(i[c]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}i=u}}},90569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},19216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},44589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},57848:(e,t,n)=>{var r=n(18139);function o(e,t){var n,o=null;if(!e||"string"!=typeof e)return o;for(var i,a,l=r(e),u="function"==typeof t,c=0,s=l.length;c<s;c++)i=(n=l[c]).property,a=n.value,u?t(i,a,n):a&&(o||(o={}),o[i]=a);return o}e.exports=o,e.exports.default=o},59271:(e,t,n)=>{"use strict";e.exports=n.p+"87e68a4ed959ae9f18e9.jpg"}},i={};function a(e){var t=i[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var n=i[e]={id:e,exports:{}};try{var r={id:e,module:n,factory:o[e],require:a};a.i.forEach((function(e){e(r)})),n=r.module,r.factory.call(n.exports,n,n.exports,r.require)}catch(e){throw n.error=e,e}return n.exports}a.m=o,a.c=i,a.i=[],a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,a.d(o,i),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.hu=e=>e+"."+a.h()+".hot-update.js",a.hmrF=()=>"main."+a.h()+".hot-update.json",a.h=()=>"707e1aa2da6b56a16827",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},r="university-college-wcr:",a.l=(e,t,o,i)=>{if(n[e])n[e].push(t);else{var l,u;if(void 0!==o)for(var c=document.getElementsByTagName("script"),s=0;s<c.length;s++){var f=c[s];if(f.getAttribute("src")==e||f.getAttribute("data-webpack")==r+o){l=f;break}}l||(u=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,a.nc&&l.setAttribute("nonce",a.nc),l.setAttribute("data-webpack",r+o),l.src=e),n[e]=[t];var d=(t,r)=>{l.onerror=l.onload=null,clearTimeout(p);var o=n[e];if(delete n[e],l.parentNode&&l.parentNode.removeChild(l),o&&o.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=d.bind(null,l.onerror),l.onload=d.bind(null,l.onload),u&&document.head.appendChild(l)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e,t,n,r={},o=a.c,i=[],l=[],u="idle",c=0,s=[];function f(e){u=e;for(var t=[],n=0;n<l.length;n++)t[n]=l[n].call(null,e);return Promise.all(t)}function d(){0==--c&&f("ready").then((function(){if(0===c){var e=s;s=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return f("check").then(a.hmrM).then((function(n){return n?f("prepare").then((function(){var r=[];return t=[],Promise.all(Object.keys(a.hmrC).reduce((function(e,o){return a.hmrC[o](n.c,n.r,n.m,e,t,r),e}),[])).then((function(){return t=function(){return e?m(e):f("ready").then((function(){return r}))},0===c?t():new Promise((function(e){s.push((function(){e(t())}))}));var t}))})):f(g()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==u?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+u+")")})):m(e)}function m(e){e=e||{},g();var r=t.map((function(t){return t(e)}));t=void 0;var o=r.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return f("abort").then((function(){throw o[0]}));var i=f("dispose");r.forEach((function(e){e.dispose&&e.dispose()}));var a,l=f("apply"),u=function(e){a||(a=e)},c=[];return r.forEach((function(e){if(e.apply){var t=e.apply(u);if(t)for(var n=0;n<t.length;n++)c.push(t[n])}})),Promise.all([i,l]).then((function(){return a?f("fail").then((function(){throw a})):n?m(e).then((function(e){return c.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):f("idle").then((function(){return c}))}))}function g(){if(n)return t||(t=[]),Object.keys(a.hmrI).forEach((function(e){n.forEach((function(n){a.hmrI[e](n,t)}))})),n=void 0,!0}a.hmrD=r,a.i.push((function(s){var m,g,v,y,A=s.module,b=function(t,n){var r=o[n];if(!r)return t;var a=function(a){if(r.hot.active){if(o[a]){var l=o[a].parents;-1===l.indexOf(n)&&l.push(n)}else i=[n],e=a;-1===r.children.indexOf(a)&&r.children.push(a)}else console.warn("[HMR] unexpected require("+a+") from disposed module "+n),i=[];return t(a)},l=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(n){t[e]=n}}};for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&"e"!==s&&Object.defineProperty(a,s,l(s));return a.e=function(e){return function(e){switch(u){case"ready":f("prepare");case"prepare":return c++,e.then(d,d),e;default:return e}}(t.e(e))},a}(s.require,s.id);A.hot=(m=s.id,g=A,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:v=e!==m,_requireSelf:function(){i=g.parents.slice(),e=v?void 0:m,a(m)},active:!0,accept:function(e,t,n){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._acceptedDependencies[e[r]]=t||function(){},y._acceptedErrorHandlers[e[r]]=n;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":t=[],Object.keys(a.hmrI).forEach((function(e){a.hmrI[e](m,t)})),f("ready");break;case"ready":Object.keys(a.hmrI).forEach((function(e){a.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:p,apply:h,status:function(e){if(!e)return u;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:r[m]},e=void 0,y),A.parents=i,A.children=[],i=[],s.require=b})),a.hmrC={},a.hmrI={}})(),a.p="/",(()=>{a.b=document.baseURI||self.location.href;var e,t,n,r,o,i=a.hmrS_jsonp=a.hmrS_jsonp||{179:0},l={};function u(t,n){return e=n,new Promise(((e,n)=>{l[t]=e;var r=a.p+a.hu(t),o=new Error;a.l(r,(e=>{if(l[t]){l[t]=void 0;var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;o.message="Loading hot update chunk "+t+" failed.\n("+r+": "+i+")",o.name="ChunkLoadError",o.type=r,o.request=i,n(o)}}))}))}function c(e){function l(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),i=o.id,l=o.chain,c=a.c[i];if(c&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:l,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:l,moduleId:i};for(var s=0;s<c.parents.length;s++){var f=c.parents[s],d=a.c[f];if(d){if(d.hot._declinedDependencies[i])return{type:"declined",chain:l.concat([f]),moduleId:i,parentId:f};-1===t.indexOf(f)&&(d.hot._acceptedDependencies[i]?(n[f]||(n[f]=[]),u(n[f],[i])):(delete n[f],t.push(f),r.push({chain:l.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}a.f&&delete a.f.jsonpHmr,t=void 0;var c={},s=[],f={},d=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in n)if(a.o(n,p)){var h,m=n[p],g=!1,v=!1,y=!1,A="";switch((h=m?l(p):{type:"disposed",moduleId:p}).chain&&(A="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(g=new Error("Aborted because of self decline: "+h.moduleId+A));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+A));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(g=new Error("Aborted because "+p+" is not accepted"+A));break;case"accepted":e.onAccepted&&e.onAccepted(h),v=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),y=!0;break;default:throw new Error("Unexception type "+h.type)}if(g)return{error:g};if(v)for(p in f[p]=m,u(s,h.outdatedModules),h.outdatedDependencies)a.o(h.outdatedDependencies,p)&&(c[p]||(c[p]=[]),u(c[p],h.outdatedDependencies[p]));y&&(u(s,[h.moduleId]),f[p]=d)}n=void 0;for(var b,w=[],x=0;x<s.length;x++){var E=s[x],C=a.c[E];C&&(C.hot._selfAccepted||C.hot._main)&&f[E]!==d&&!C.hot._selfInvalidated&&w.push({module:E,require:C.hot._requireSelf,errorHandler:C.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete i[e]})),r=void 0;for(var t,n=s.slice();n.length>0;){var o=n.pop(),l=a.c[o];if(l){var u={},f=l.hot._disposeHandlers;for(x=0;x<f.length;x++)f[x].call(null,u);for(a.hmrD[o]=u,l.hot.active=!1,delete a.c[o],delete c[o],x=0;x<l.children.length;x++){var d=a.c[l.children[x]];d&&(e=d.parents.indexOf(o))>=0&&d.parents.splice(e,1)}}}for(var p in c)if(a.o(c,p)&&(l=a.c[p]))for(b=c[p],x=0;x<b.length;x++)t=b[x],(e=l.children.indexOf(t))>=0&&l.children.splice(e,1)},apply:function(t){for(var n in f)a.o(f,n)&&(a.m[n]=f[n]);for(var r=0;r<o.length;r++)o[r](a);for(var i in c)if(a.o(c,i)){var l=a.c[i];if(l){b=c[i];for(var u=[],d=[],p=[],h=0;h<b.length;h++){var m=b[h],g=l.hot._acceptedDependencies[m],v=l.hot._acceptedErrorHandlers[m];if(g){if(-1!==u.indexOf(g))continue;u.push(g),d.push(v),p.push(m)}}for(var y=0;y<u.length;y++)try{u[y].call(null,b)}catch(n){if("function"==typeof d[y])try{d[y](n,{moduleId:i,dependencyId:p[y]})}catch(r){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:p[y],error:r,originalError:n}),e.ignoreErrored||(t(r),t(n))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:p[y],error:n}),e.ignoreErrored||t(n)}}}for(var A=0;A<w.length;A++){var x=w[A],E=x.module;try{x.require(E)}catch(n){if("function"==typeof x.errorHandler)try{x.errorHandler(n,{moduleId:E,module:a.c[E]})}catch(r){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:E,error:r,originalError:n}),e.ignoreErrored||(t(r),t(n))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:E,error:n}),e.ignoreErrored||t(n)}}return s}}}self.webpackHotUpdateuniversity_college_wcr=(t,r,i)=>{for(var u in r)a.o(r,u)&&(n[u]=r[u],e&&e.push(u));i&&o.push(i),l[t]&&(l[t](),l[t]=void 0)},a.hmrI.jsonp=function(e,t){n||(n={},o=[],r=[],t.push(c)),a.o(n,e)||(n[e]=a.m[e])},a.hmrC.jsonp=function(e,l,s,f,d,p){d.push(c),t={},r=l,n=s.reduce((function(e,t){return e[t]=!1,e}),{}),o=[],e.forEach((function(e){a.o(i,e)&&void 0!==i[e]?(f.push(u(e,p)),t[e]=!0):t[e]=!1})),a.f&&(a.f.jsonpHmr=function(e,n){t&&a.o(t,e)&&!t[e]&&(n.push(u(e)),t[e]=!0)})},a.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(a.p+a.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),a.nc=void 0,a(26981),a(13644)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,